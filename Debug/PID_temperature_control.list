
PID_temperature_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  0800c770  0800c770  0001c770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbf4  0800cbf4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbf4  0800cbf4  0001cbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbfc  0800cbfc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbfc  0800cbfc  0001cbfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc00  0800cc00  0001cc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800cc04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f8  200001e8  0800cdec  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ae0  0800cdec  00020ae0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   000189f3  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000341f  00000000  00000000  00038c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a8  00000000  00000000  0003c070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010e4  00000000  00000000  0003d618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b4f  00000000  00000000  0003e6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b7c6  00000000  00000000  0006724b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6969  00000000  00000000  00082a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007180  00000000  00000000  0017937c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  001804fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c758 	.word	0x0800c758

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800c758 	.word	0x0800c758

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9f1 	b.w	80010cc <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a6 	b.w	80010cc <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9e08      	ldr	r6, [sp, #32]
 8000e0a:	460d      	mov	r5, r1
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	460f      	mov	r7, r1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d14a      	bne.n	8000eaa <__udivmoddi4+0xa6>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4694      	mov	ip, r2
 8000e18:	d965      	bls.n	8000ee6 <__udivmoddi4+0xe2>
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	b143      	cbz	r3, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e24:	f1c3 0220 	rsb	r2, r3, #32
 8000e28:	409f      	lsls	r7, r3
 8000e2a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	409c      	lsls	r4, r3
 8000e32:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e36:	fa1f f58c 	uxth.w	r5, ip
 8000e3a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e3e:	0c22      	lsrs	r2, r4, #16
 8000e40:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e44:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e48:	fb01 f005 	mul.w	r0, r1, r5
 8000e4c:	4290      	cmp	r0, r2
 8000e4e:	d90a      	bls.n	8000e66 <__udivmoddi4+0x62>
 8000e50:	eb1c 0202 	adds.w	r2, ip, r2
 8000e54:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e58:	f080 811c 	bcs.w	8001094 <__udivmoddi4+0x290>
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	f240 8119 	bls.w	8001094 <__udivmoddi4+0x290>
 8000e62:	3902      	subs	r1, #2
 8000e64:	4462      	add	r2, ip
 8000e66:	1a12      	subs	r2, r2, r0
 8000e68:	b2a4      	uxth	r4, r4
 8000e6a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e6e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e72:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e76:	fb00 f505 	mul.w	r5, r0, r5
 8000e7a:	42a5      	cmp	r5, r4
 8000e7c:	d90a      	bls.n	8000e94 <__udivmoddi4+0x90>
 8000e7e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e82:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e86:	f080 8107 	bcs.w	8001098 <__udivmoddi4+0x294>
 8000e8a:	42a5      	cmp	r5, r4
 8000e8c:	f240 8104 	bls.w	8001098 <__udivmoddi4+0x294>
 8000e90:	4464      	add	r4, ip
 8000e92:	3802      	subs	r0, #2
 8000e94:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e98:	1b64      	subs	r4, r4, r5
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	b11e      	cbz	r6, 8000ea6 <__udivmoddi4+0xa2>
 8000e9e:	40dc      	lsrs	r4, r3
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0xbc>
 8000eae:	2e00      	cmp	r6, #0
 8000eb0:	f000 80ed 	beq.w	800108e <__udivmoddi4+0x28a>
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec0:	fab3 f183 	clz	r1, r3
 8000ec4:	2900      	cmp	r1, #0
 8000ec6:	d149      	bne.n	8000f5c <__udivmoddi4+0x158>
 8000ec8:	42ab      	cmp	r3, r5
 8000eca:	d302      	bcc.n	8000ed2 <__udivmoddi4+0xce>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	f200 80f8 	bhi.w	80010c2 <__udivmoddi4+0x2be>
 8000ed2:	1a84      	subs	r4, r0, r2
 8000ed4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ed8:	2001      	movs	r0, #1
 8000eda:	4617      	mov	r7, r2
 8000edc:	2e00      	cmp	r6, #0
 8000ede:	d0e2      	beq.n	8000ea6 <__udivmoddi4+0xa2>
 8000ee0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ee4:	e7df      	b.n	8000ea6 <__udivmoddi4+0xa2>
 8000ee6:	b902      	cbnz	r2, 8000eea <__udivmoddi4+0xe6>
 8000ee8:	deff      	udf	#255	; 0xff
 8000eea:	fab2 f382 	clz	r3, r2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f040 8090 	bne.w	8001014 <__udivmoddi4+0x210>
 8000ef4:	1a8a      	subs	r2, r1, r2
 8000ef6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000efa:	fa1f fe8c 	uxth.w	lr, ip
 8000efe:	2101      	movs	r1, #1
 8000f00:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f04:	fb07 2015 	mls	r0, r7, r5, r2
 8000f08:	0c22      	lsrs	r2, r4, #16
 8000f0a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f0e:	fb0e f005 	mul.w	r0, lr, r5
 8000f12:	4290      	cmp	r0, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x124>
 8000f16:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f1e:	d202      	bcs.n	8000f26 <__udivmoddi4+0x122>
 8000f20:	4290      	cmp	r0, r2
 8000f22:	f200 80cb 	bhi.w	80010bc <__udivmoddi4+0x2b8>
 8000f26:	4645      	mov	r5, r8
 8000f28:	1a12      	subs	r2, r2, r0
 8000f2a:	b2a4      	uxth	r4, r4
 8000f2c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f30:	fb07 2210 	mls	r2, r7, r0, r2
 8000f34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f38:	fb0e fe00 	mul.w	lr, lr, r0
 8000f3c:	45a6      	cmp	lr, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x14e>
 8000f40:	eb1c 0404 	adds.w	r4, ip, r4
 8000f44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f48:	d202      	bcs.n	8000f50 <__udivmoddi4+0x14c>
 8000f4a:	45a6      	cmp	lr, r4
 8000f4c:	f200 80bb 	bhi.w	80010c6 <__udivmoddi4+0x2c2>
 8000f50:	4610      	mov	r0, r2
 8000f52:	eba4 040e 	sub.w	r4, r4, lr
 8000f56:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f5a:	e79f      	b.n	8000e9c <__udivmoddi4+0x98>
 8000f5c:	f1c1 0720 	rsb	r7, r1, #32
 8000f60:	408b      	lsls	r3, r1
 8000f62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f6a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f6e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f72:	40fd      	lsrs	r5, r7
 8000f74:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f78:	4323      	orrs	r3, r4
 8000f7a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f7e:	fa1f fe8c 	uxth.w	lr, ip
 8000f82:	fb09 5518 	mls	r5, r9, r8, r5
 8000f86:	0c1c      	lsrs	r4, r3, #16
 8000f88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f8c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f90:	42a5      	cmp	r5, r4
 8000f92:	fa02 f201 	lsl.w	r2, r2, r1
 8000f96:	fa00 f001 	lsl.w	r0, r0, r1
 8000f9a:	d90b      	bls.n	8000fb4 <__udivmoddi4+0x1b0>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fa4:	f080 8088 	bcs.w	80010b8 <__udivmoddi4+0x2b4>
 8000fa8:	42a5      	cmp	r5, r4
 8000faa:	f240 8085 	bls.w	80010b8 <__udivmoddi4+0x2b4>
 8000fae:	f1a8 0802 	sub.w	r8, r8, #2
 8000fb2:	4464      	add	r4, ip
 8000fb4:	1b64      	subs	r4, r4, r5
 8000fb6:	b29d      	uxth	r5, r3
 8000fb8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fbc:	fb09 4413 	mls	r4, r9, r3, r4
 8000fc0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fc4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fc8:	45a6      	cmp	lr, r4
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x1da>
 8000fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fd0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fd4:	d26c      	bcs.n	80010b0 <__udivmoddi4+0x2ac>
 8000fd6:	45a6      	cmp	lr, r4
 8000fd8:	d96a      	bls.n	80010b0 <__udivmoddi4+0x2ac>
 8000fda:	3b02      	subs	r3, #2
 8000fdc:	4464      	add	r4, ip
 8000fde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fe2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fe6:	eba4 040e 	sub.w	r4, r4, lr
 8000fea:	42ac      	cmp	r4, r5
 8000fec:	46c8      	mov	r8, r9
 8000fee:	46ae      	mov	lr, r5
 8000ff0:	d356      	bcc.n	80010a0 <__udivmoddi4+0x29c>
 8000ff2:	d053      	beq.n	800109c <__udivmoddi4+0x298>
 8000ff4:	b156      	cbz	r6, 800100c <__udivmoddi4+0x208>
 8000ff6:	ebb0 0208 	subs.w	r2, r0, r8
 8000ffa:	eb64 040e 	sbc.w	r4, r4, lr
 8000ffe:	fa04 f707 	lsl.w	r7, r4, r7
 8001002:	40ca      	lsrs	r2, r1
 8001004:	40cc      	lsrs	r4, r1
 8001006:	4317      	orrs	r7, r2
 8001008:	e9c6 7400 	strd	r7, r4, [r6]
 800100c:	4618      	mov	r0, r3
 800100e:	2100      	movs	r1, #0
 8001010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001014:	f1c3 0120 	rsb	r1, r3, #32
 8001018:	fa02 fc03 	lsl.w	ip, r2, r3
 800101c:	fa20 f201 	lsr.w	r2, r0, r1
 8001020:	fa25 f101 	lsr.w	r1, r5, r1
 8001024:	409d      	lsls	r5, r3
 8001026:	432a      	orrs	r2, r5
 8001028:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800102c:	fa1f fe8c 	uxth.w	lr, ip
 8001030:	fbb1 f0f7 	udiv	r0, r1, r7
 8001034:	fb07 1510 	mls	r5, r7, r0, r1
 8001038:	0c11      	lsrs	r1, r2, #16
 800103a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800103e:	fb00 f50e 	mul.w	r5, r0, lr
 8001042:	428d      	cmp	r5, r1
 8001044:	fa04 f403 	lsl.w	r4, r4, r3
 8001048:	d908      	bls.n	800105c <__udivmoddi4+0x258>
 800104a:	eb1c 0101 	adds.w	r1, ip, r1
 800104e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001052:	d22f      	bcs.n	80010b4 <__udivmoddi4+0x2b0>
 8001054:	428d      	cmp	r5, r1
 8001056:	d92d      	bls.n	80010b4 <__udivmoddi4+0x2b0>
 8001058:	3802      	subs	r0, #2
 800105a:	4461      	add	r1, ip
 800105c:	1b49      	subs	r1, r1, r5
 800105e:	b292      	uxth	r2, r2
 8001060:	fbb1 f5f7 	udiv	r5, r1, r7
 8001064:	fb07 1115 	mls	r1, r7, r5, r1
 8001068:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800106c:	fb05 f10e 	mul.w	r1, r5, lr
 8001070:	4291      	cmp	r1, r2
 8001072:	d908      	bls.n	8001086 <__udivmoddi4+0x282>
 8001074:	eb1c 0202 	adds.w	r2, ip, r2
 8001078:	f105 38ff 	add.w	r8, r5, #4294967295
 800107c:	d216      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800107e:	4291      	cmp	r1, r2
 8001080:	d914      	bls.n	80010ac <__udivmoddi4+0x2a8>
 8001082:	3d02      	subs	r5, #2
 8001084:	4462      	add	r2, ip
 8001086:	1a52      	subs	r2, r2, r1
 8001088:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800108c:	e738      	b.n	8000f00 <__udivmoddi4+0xfc>
 800108e:	4631      	mov	r1, r6
 8001090:	4630      	mov	r0, r6
 8001092:	e708      	b.n	8000ea6 <__udivmoddi4+0xa2>
 8001094:	4639      	mov	r1, r7
 8001096:	e6e6      	b.n	8000e66 <__udivmoddi4+0x62>
 8001098:	4610      	mov	r0, r2
 800109a:	e6fb      	b.n	8000e94 <__udivmoddi4+0x90>
 800109c:	4548      	cmp	r0, r9
 800109e:	d2a9      	bcs.n	8000ff4 <__udivmoddi4+0x1f0>
 80010a0:	ebb9 0802 	subs.w	r8, r9, r2
 80010a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010a8:	3b01      	subs	r3, #1
 80010aa:	e7a3      	b.n	8000ff4 <__udivmoddi4+0x1f0>
 80010ac:	4645      	mov	r5, r8
 80010ae:	e7ea      	b.n	8001086 <__udivmoddi4+0x282>
 80010b0:	462b      	mov	r3, r5
 80010b2:	e794      	b.n	8000fde <__udivmoddi4+0x1da>
 80010b4:	4640      	mov	r0, r8
 80010b6:	e7d1      	b.n	800105c <__udivmoddi4+0x258>
 80010b8:	46d0      	mov	r8, sl
 80010ba:	e77b      	b.n	8000fb4 <__udivmoddi4+0x1b0>
 80010bc:	3d02      	subs	r5, #2
 80010be:	4462      	add	r2, ip
 80010c0:	e732      	b.n	8000f28 <__udivmoddi4+0x124>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e70a      	b.n	8000edc <__udivmoddi4+0xd8>
 80010c6:	4464      	add	r4, ip
 80010c8:	3802      	subs	r0, #2
 80010ca:	e742      	b.n	8000f52 <__udivmoddi4+0x14e>

080010cc <__aeabi_idiv0>:
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af04      	add	r7, sp, #16
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <BMP280_Read8+0x38>)
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	230a      	movs	r3, #10
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	2301      	movs	r3, #1
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	f107 030f 	add.w	r3, r7, #15
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	21ec      	movs	r1, #236	; 0xec
 80010f8:	f002 fb66 	bl	80037c8 <HAL_I2C_Mem_Read>
  return tmp;
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000204 	.word	0x20000204

0800110c <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af04      	add	r7, sp, #16
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <BMP280_Read16+0x40>)
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	b29a      	uxth	r2, r3
 800111e:	230a      	movs	r3, #10
 8001120:	9302      	str	r3, [sp, #8]
 8001122:	2302      	movs	r3, #2
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	21ec      	movs	r1, #236	; 0xec
 8001130:	f002 fb4a 	bl	80037c8 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8001134:	7b3b      	ldrb	r3, [r7, #12]
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	b21a      	sxth	r2, r3
 800113a:	7b7b      	ldrb	r3, [r7, #13]
 800113c:	b21b      	sxth	r3, r3
 800113e:	4313      	orrs	r3, r2
 8001140:	b21b      	sxth	r3, r3
 8001142:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000204 	.word	0x20000204

08001150 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ffd5 	bl	800110c <BMP280_Read16>
 8001162:	4603      	mov	r3, r0
 8001164:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8001166:	89fb      	ldrh	r3, [r7, #14]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	b29b      	uxth	r3, r3
 800116c:	b21a      	sxth	r2, r3
 800116e:	89fb      	ldrh	r3, [r7, #14]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21b      	sxth	r3, r3
 8001178:	b29b      	uxth	r3, r3
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af04      	add	r7, sp, #16
 800118a:	4603      	mov	r3, r0
 800118c:	460a      	mov	r2, r1
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <BMP280_Write8+0x34>)
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	b29a      	uxth	r2, r3
 800119c:	230a      	movs	r3, #10
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2301      	movs	r3, #1
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	1dbb      	adds	r3, r7, #6
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	21ec      	movs	r1, #236	; 0xec
 80011ac:	f002 f9f8 	bl	80035a0 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000204 	.word	0x20000204

080011bc <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af04      	add	r7, sp, #16
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <BMP280_Read24+0x40>)
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	230a      	movs	r3, #10
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	2303      	movs	r3, #3
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2301      	movs	r3, #1
 80011de:	21ec      	movs	r1, #236	; 0xec
 80011e0:	f002 faf2 	bl	80037c8 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 80011e4:	7b3b      	ldrb	r3, [r7, #12]
 80011e6:	041a      	lsls	r2, r3, #16
 80011e8:	7b7b      	ldrb	r3, [r7, #13]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	4313      	orrs	r3, r2
 80011ee:	7bba      	ldrb	r2, [r7, #14]
 80011f0:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000204 	.word	0x20000204

08001200 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	4608      	mov	r0, r1
 800120a:	4611      	mov	r1, r2
 800120c:	461a      	mov	r2, r3
 800120e:	4603      	mov	r3, r0
 8001210:	70fb      	strb	r3, [r7, #3]
 8001212:	460b      	mov	r3, r1
 8001214:	70bb      	strb	r3, [r7, #2]
 8001216:	4613      	mov	r3, r2
 8001218:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 800121a:	4a48      	ldr	r2, [pc, #288]	; (800133c <BMP280_Init+0x13c>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 8001220:	787b      	ldrb	r3, [r7, #1]
 8001222:	2b03      	cmp	r3, #3
 8001224:	d901      	bls.n	800122a <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 8001226:	2303      	movs	r3, #3
 8001228:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 800122a:	4a45      	ldr	r2, [pc, #276]	; (8001340 <BMP280_Init+0x140>)
 800122c:	787b      	ldrb	r3, [r7, #1]
 800122e:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d101      	bne.n	800123a <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 8001236:	2300      	movs	r3, #0
 8001238:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	2b05      	cmp	r3, #5
 800123e:	d901      	bls.n	8001244 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8001240:	2305      	movs	r3, #5
 8001242:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8001244:	4a3f      	ldr	r2, [pc, #252]	; (8001344 <BMP280_Init+0x144>)
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 800124a:	78bb      	ldrb	r3, [r7, #2]
 800124c:	2b05      	cmp	r3, #5
 800124e:	d901      	bls.n	8001254 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8001250:	2305      	movs	r3, #5
 8001252:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8001254:	4a3c      	ldr	r2, [pc, #240]	; (8001348 <BMP280_Init+0x148>)
 8001256:	78bb      	ldrb	r3, [r7, #2]
 8001258:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 800125a:	bf00      	nop
 800125c:	20d0      	movs	r0, #208	; 0xd0
 800125e:	f7ff ff37 	bl	80010d0 <BMP280_Read8>
 8001262:	4603      	mov	r3, r0
 8001264:	2b58      	cmp	r3, #88	; 0x58
 8001266:	d1f9      	bne.n	800125c <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001268:	2088      	movs	r0, #136	; 0x88
 800126a:	f7ff ff71 	bl	8001150 <BMP280_Read16LE>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	4b36      	ldr	r3, [pc, #216]	; (800134c <BMP280_Init+0x14c>)
 8001274:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001276:	208a      	movs	r0, #138	; 0x8a
 8001278:	f7ff ff6a 	bl	8001150 <BMP280_Read16LE>
 800127c:	4603      	mov	r3, r0
 800127e:	b21a      	sxth	r2, r3
 8001280:	4b33      	ldr	r3, [pc, #204]	; (8001350 <BMP280_Init+0x150>)
 8001282:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001284:	208c      	movs	r0, #140	; 0x8c
 8001286:	f7ff ff63 	bl	8001150 <BMP280_Read16LE>
 800128a:	4603      	mov	r3, r0
 800128c:	b21a      	sxth	r2, r3
 800128e:	4b31      	ldr	r3, [pc, #196]	; (8001354 <BMP280_Init+0x154>)
 8001290:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8001292:	208e      	movs	r0, #142	; 0x8e
 8001294:	f7ff ff5c 	bl	8001150 <BMP280_Read16LE>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <BMP280_Init+0x158>)
 800129e:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80012a0:	2090      	movs	r0, #144	; 0x90
 80012a2:	f7ff ff55 	bl	8001150 <BMP280_Read16LE>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b21a      	sxth	r2, r3
 80012aa:	4b2c      	ldr	r3, [pc, #176]	; (800135c <BMP280_Init+0x15c>)
 80012ac:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 80012ae:	2092      	movs	r0, #146	; 0x92
 80012b0:	f7ff ff4e 	bl	8001150 <BMP280_Read16LE>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	4b29      	ldr	r3, [pc, #164]	; (8001360 <BMP280_Init+0x160>)
 80012ba:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 80012bc:	2094      	movs	r0, #148	; 0x94
 80012be:	f7ff ff47 	bl	8001150 <BMP280_Read16LE>
 80012c2:	4603      	mov	r3, r0
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <BMP280_Init+0x164>)
 80012c8:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 80012ca:	2096      	movs	r0, #150	; 0x96
 80012cc:	f7ff ff40 	bl	8001150 <BMP280_Read16LE>
 80012d0:	4603      	mov	r3, r0
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	4b24      	ldr	r3, [pc, #144]	; (8001368 <BMP280_Init+0x168>)
 80012d6:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 80012d8:	2098      	movs	r0, #152	; 0x98
 80012da:	f7ff ff39 	bl	8001150 <BMP280_Read16LE>
 80012de:	4603      	mov	r3, r0
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <BMP280_Init+0x16c>)
 80012e4:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 80012e6:	209a      	movs	r0, #154	; 0x9a
 80012e8:	f7ff ff32 	bl	8001150 <BMP280_Read16LE>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <BMP280_Init+0x170>)
 80012f2:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 80012f4:	209c      	movs	r0, #156	; 0x9c
 80012f6:	f7ff ff2b 	bl	8001150 <BMP280_Read16LE>
 80012fa:	4603      	mov	r3, r0
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <BMP280_Init+0x174>)
 8001300:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 8001302:	209e      	movs	r0, #158	; 0x9e
 8001304:	f7ff ff24 	bl	8001150 <BMP280_Read16LE>
 8001308:	4603      	mov	r3, r0
 800130a:	b21a      	sxth	r2, r3
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <BMP280_Init+0x178>)
 800130e:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	015b      	lsls	r3, r3, #5
 8001314:	b25a      	sxtb	r2, r3
 8001316:	78bb      	ldrb	r3, [r7, #2]
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	b25b      	sxtb	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b25a      	sxtb	r2, r3
 8001320:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001324:	4313      	orrs	r3, r2
 8001326:	b25b      	sxtb	r3, r3
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4619      	mov	r1, r3
 800132c:	20f4      	movs	r0, #244	; 0xf4
 800132e:	f7ff ff29 	bl	8001184 <BMP280_Write8>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000204 	.word	0x20000204
 8001340:	2000020a 	.word	0x2000020a
 8001344:	20000208 	.word	0x20000208
 8001348:	20000209 	.word	0x20000209
 800134c:	20000220 	.word	0x20000220
 8001350:	2000020c 	.word	0x2000020c
 8001354:	2000020e 	.word	0x2000020e
 8001358:	20000222 	.word	0x20000222
 800135c:	20000210 	.word	0x20000210
 8001360:	20000212 	.word	0x20000212
 8001364:	20000214 	.word	0x20000214
 8001368:	20000216 	.word	0x20000216
 800136c:	20000218 	.word	0x20000218
 8001370:	2000021a 	.word	0x2000021a
 8001374:	2000021c 	.word	0x2000021c
 8001378:	2000021e 	.word	0x2000021e

0800137c <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 8001382:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <BMP280_ReadTemperature+0xfc>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d16d      	bne.n	8001466 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 800138a:	20f4      	movs	r0, #244	; 0xf4
 800138c:	f7ff fea0 	bl	80010d0 <BMP280_Read8>
 8001390:	4603      	mov	r3, r0
 8001392:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001394:	7dfb      	ldrb	r3, [r7, #23]
 8001396:	f023 0303 	bic.w	r3, r3, #3
 800139a:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 800139c:	7dfb      	ldrb	r3, [r7, #23]
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	4619      	mov	r1, r3
 80013a8:	20f4      	movs	r0, #244	; 0xf4
 80013aa:	f7ff feeb 	bl	8001184 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 80013ae:	20f4      	movs	r0, #244	; 0xf4
 80013b0:	f7ff fe8e 	bl	80010d0 <BMP280_Read8>
 80013b4:	4603      	mov	r3, r0
 80013b6:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 80013b8:	7dbb      	ldrb	r3, [r7, #22]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 80013c0:	7dbb      	ldrb	r3, [r7, #22]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d14f      	bne.n	8001466 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 80013c6:	20f4      	movs	r0, #244	; 0xf4
 80013c8:	f7ff fe82 	bl	80010d0 <BMP280_Read8>
 80013cc:	4603      	mov	r3, r0
 80013ce:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 80013d0:	7dbb      	ldrb	r3, [r7, #22]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 80013d8:	7dbb      	ldrb	r3, [r7, #22]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d000      	beq.n	80013e0 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 80013de:	e7f2      	b.n	80013c6 <BMP280_ReadTemperature+0x4a>
				  break;
 80013e0:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 80013e2:	20fa      	movs	r0, #250	; 0xfa
 80013e4:	f7ff feea 	bl	80011bc <BMP280_Read24>
 80013e8:	4603      	mov	r3, r0
 80013ea:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	111b      	asrs	r3, r3, #4
 80013f0:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	10da      	asrs	r2, r3, #3
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <BMP280_ReadTemperature+0x100>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80013fe:	4a20      	ldr	r2, [pc, #128]	; (8001480 <BMP280_ReadTemperature+0x104>)
 8001400:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001404:	fb02 f303 	mul.w	r3, r2, r3
 8001408:	12db      	asrs	r3, r3, #11
 800140a:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	111b      	asrs	r3, r3, #4
 8001410:	4a1a      	ldr	r2, [pc, #104]	; (800147c <BMP280_ReadTemperature+0x100>)
 8001412:	8812      	ldrh	r2, [r2, #0]
 8001414:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	1112      	asrs	r2, r2, #4
 800141a:	4918      	ldr	r1, [pc, #96]	; (800147c <BMP280_ReadTemperature+0x100>)
 800141c:	8809      	ldrh	r1, [r1, #0]
 800141e:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001420:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001424:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8001426:	4a17      	ldr	r2, [pc, #92]	; (8001484 <BMP280_ReadTemperature+0x108>)
 8001428:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800142c:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001430:	139b      	asrs	r3, r3, #14
 8001432:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	4413      	add	r3, r2
 800143a:	4a13      	ldr	r2, [pc, #76]	; (8001488 <BMP280_ReadTemperature+0x10c>)
 800143c:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <BMP280_ReadTemperature+0x10c>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3380      	adds	r3, #128	; 0x80
 800144a:	121b      	asrs	r3, r3, #8
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001454:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8001458:	edd7 7a01 	vldr	s15, [r7, #4]
 800145c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800148c <BMP280_ReadTemperature+0x110>
 8001460:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001464:	e001      	b.n	800146a <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8001466:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001490 <BMP280_ReadTemperature+0x114>
}
 800146a:	eef0 7a47 	vmov.f32	s15, s14
 800146e:	eeb0 0a67 	vmov.f32	s0, s15
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	2000020a 	.word	0x2000020a
 800147c:	20000220 	.word	0x20000220
 8001480:	2000020c 	.word	0x2000020c
 8001484:	2000020e 	.word	0x2000020e
 8001488:	20000224 	.word	0x20000224
 800148c:	42c80000 	.word	0x42c80000
 8001490:	c2c60000 	.word	0xc2c60000

08001494 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8001494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001498:	b0cc      	sub	sp, #304	; 0x130
 800149a:	af00      	add	r7, sp, #0
 800149c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80014a0:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 80014a4:	f7ff ff6a 	bl	800137c <BMP280_ReadTemperature>
 80014a8:	eef0 7a40 	vmov.f32	s15, s0
 80014ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014b0:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 80014b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 800178c <BMP280_ReadTemperatureAndPressure+0x2f8>
 80014c0:	eef4 7a47 	vcmp.f32	s15, s14
 80014c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c8:	d101      	bne.n	80014ce <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 80014ca:	23ff      	movs	r3, #255	; 0xff
 80014cc:	e2bf      	b.n	8001a4e <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 80014ce:	20f7      	movs	r0, #247	; 0xf7
 80014d0:	f7ff fe74 	bl	80011bc <BMP280_Read24>
 80014d4:	4603      	mov	r3, r0
 80014d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  adc_P >>= 4;
 80014da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014de:	111b      	asrs	r3, r3, #4
 80014e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 80014e4:	4baa      	ldr	r3, [pc, #680]	; (8001790 <BMP280_ReadTemperatureAndPressure+0x2fc>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	17da      	asrs	r2, r3, #31
 80014ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80014ee:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80014f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80014f6:	460b      	mov	r3, r1
 80014f8:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 80014fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80014fe:	4613      	mov	r3, r2
 8001500:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001504:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001506:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800150a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 800150e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001512:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001516:	fb03 f102 	mul.w	r1, r3, r2
 800151a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800151e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001522:	fb02 f303 	mul.w	r3, r2, r3
 8001526:	18ca      	adds	r2, r1, r3
 8001528:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800152c:	fba3 4503 	umull	r4, r5, r3, r3
 8001530:	1953      	adds	r3, r2, r5
 8001532:	461d      	mov	r5, r3
 8001534:	4b97      	ldr	r3, [pc, #604]	; (8001794 <BMP280_ReadTemperatureAndPressure+0x300>)
 8001536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153a:	b21b      	sxth	r3, r3
 800153c:	17da      	asrs	r2, r3, #31
 800153e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001542:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001546:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800154a:	4603      	mov	r3, r0
 800154c:	fb03 f205 	mul.w	r2, r3, r5
 8001550:	460b      	mov	r3, r1
 8001552:	fb04 f303 	mul.w	r3, r4, r3
 8001556:	4413      	add	r3, r2
 8001558:	4602      	mov	r2, r0
 800155a:	fba4 8902 	umull	r8, r9, r4, r2
 800155e:	444b      	add	r3, r9
 8001560:	4699      	mov	r9, r3
 8001562:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 8001566:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 800156a:	4b8b      	ldr	r3, [pc, #556]	; (8001798 <BMP280_ReadTemperatureAndPressure+0x304>)
 800156c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001570:	b21b      	sxth	r3, r3
 8001572:	17da      	asrs	r2, r3, #31
 8001574:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001578:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800157c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001580:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001584:	462a      	mov	r2, r5
 8001586:	fb02 f203 	mul.w	r2, r2, r3
 800158a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800158e:	4621      	mov	r1, r4
 8001590:	fb01 f303 	mul.w	r3, r1, r3
 8001594:	441a      	add	r2, r3
 8001596:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800159a:	4621      	mov	r1, r4
 800159c:	fba3 ab01 	umull	sl, fp, r3, r1
 80015a0:	eb02 030b 	add.w	r3, r2, fp
 80015a4:	469b      	mov	fp, r3
 80015a6:	f04f 0000 	mov.w	r0, #0
 80015aa:	f04f 0100 	mov.w	r1, #0
 80015ae:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80015b2:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 80015b6:	ea4f 404a 	mov.w	r0, sl, lsl #17
 80015ba:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80015be:	1814      	adds	r4, r2, r0
 80015c0:	643c      	str	r4, [r7, #64]	; 0x40
 80015c2:	414b      	adcs	r3, r1
 80015c4:	647b      	str	r3, [r7, #68]	; 0x44
 80015c6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80015ca:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 80015ce:	4b73      	ldr	r3, [pc, #460]	; (800179c <BMP280_ReadTemperatureAndPressure+0x308>)
 80015d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	17da      	asrs	r2, r3, #31
 80015d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80015dc:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80015e0:	f04f 0000 	mov.w	r0, #0
 80015e4:	f04f 0100 	mov.w	r1, #0
 80015e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80015ec:	00d9      	lsls	r1, r3, #3
 80015ee:	2000      	movs	r0, #0
 80015f0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80015f4:	1814      	adds	r4, r2, r0
 80015f6:	63bc      	str	r4, [r7, #56]	; 0x38
 80015f8:	414b      	adcs	r3, r1
 80015fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015fc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001600:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001604:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001608:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800160c:	fb03 f102 	mul.w	r1, r3, r2
 8001610:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001614:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001618:	fb02 f303 	mul.w	r3, r2, r3
 800161c:	18ca      	adds	r2, r1, r3
 800161e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001622:	fba3 1303 	umull	r1, r3, r3, r3
 8001626:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800162a:	460b      	mov	r3, r1
 800162c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001634:	18d3      	adds	r3, r2, r3
 8001636:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800163a:	4b59      	ldr	r3, [pc, #356]	; (80017a0 <BMP280_ReadTemperatureAndPressure+0x30c>)
 800163c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001640:	b21b      	sxth	r3, r3
 8001642:	17da      	asrs	r2, r3, #31
 8001644:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001648:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800164c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001650:	462b      	mov	r3, r5
 8001652:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001656:	4642      	mov	r2, r8
 8001658:	fb02 f203 	mul.w	r2, r2, r3
 800165c:	464b      	mov	r3, r9
 800165e:	4621      	mov	r1, r4
 8001660:	fb01 f303 	mul.w	r3, r1, r3
 8001664:	4413      	add	r3, r2
 8001666:	4622      	mov	r2, r4
 8001668:	4641      	mov	r1, r8
 800166a:	fba2 1201 	umull	r1, r2, r2, r1
 800166e:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8001672:	460a      	mov	r2, r1
 8001674:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001678:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800167c:	4413      	add	r3, r2
 800167e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001682:	f04f 0000 	mov.w	r0, #0
 8001686:	f04f 0100 	mov.w	r1, #0
 800168a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800168e:	4623      	mov	r3, r4
 8001690:	0a18      	lsrs	r0, r3, #8
 8001692:	462b      	mov	r3, r5
 8001694:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001698:	462b      	mov	r3, r5
 800169a:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 800169c:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <BMP280_ReadTemperatureAndPressure+0x310>)
 800169e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	17da      	asrs	r2, r3, #31
 80016a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016b6:	464a      	mov	r2, r9
 80016b8:	fb02 f203 	mul.w	r2, r2, r3
 80016bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016c0:	4644      	mov	r4, r8
 80016c2:	fb04 f303 	mul.w	r3, r4, r3
 80016c6:	441a      	add	r2, r3
 80016c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016cc:	4644      	mov	r4, r8
 80016ce:	fba3 4304 	umull	r4, r3, r3, r4
 80016d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80016d6:	4623      	mov	r3, r4
 80016d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80016dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016e0:	18d3      	adds	r3, r2, r3
 80016e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80016f2:	464c      	mov	r4, r9
 80016f4:	0323      	lsls	r3, r4, #12
 80016f6:	4644      	mov	r4, r8
 80016f8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80016fc:	4644      	mov	r4, r8
 80016fe:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001700:	1884      	adds	r4, r0, r2
 8001702:	633c      	str	r4, [r7, #48]	; 0x30
 8001704:	eb41 0303 	adc.w	r3, r1, r3
 8001708:	637b      	str	r3, [r7, #52]	; 0x34
 800170a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800170e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8001712:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001716:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800171a:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800171e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8001722:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <BMP280_ReadTemperatureAndPressure+0x314>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	2200      	movs	r2, #0
 800172a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800172e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001732:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001736:	462b      	mov	r3, r5
 8001738:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800173c:	4642      	mov	r2, r8
 800173e:	fb02 f203 	mul.w	r2, r2, r3
 8001742:	464b      	mov	r3, r9
 8001744:	4621      	mov	r1, r4
 8001746:	fb01 f303 	mul.w	r3, r1, r3
 800174a:	4413      	add	r3, r2
 800174c:	4622      	mov	r2, r4
 800174e:	4641      	mov	r1, r8
 8001750:	fba2 1201 	umull	r1, r2, r2, r1
 8001754:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001758:	460a      	mov	r2, r1
 800175a:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800175e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001762:	4413      	add	r3, r2
 8001764:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001774:	4629      	mov	r1, r5
 8001776:	104a      	asrs	r2, r1, #1
 8001778:	4629      	mov	r1, r5
 800177a:	17cb      	asrs	r3, r1, #31
 800177c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	  if (var1 == 0) {
 8001780:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001784:	4313      	orrs	r3, r2
 8001786:	d111      	bne.n	80017ac <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 8001788:	2300      	movs	r3, #0
 800178a:	e160      	b.n	8001a4e <BMP280_ReadTemperatureAndPressure+0x5ba>
 800178c:	c2c60000 	.word	0xc2c60000
 8001790:	20000224 	.word	0x20000224
 8001794:	20000218 	.word	0x20000218
 8001798:	20000216 	.word	0x20000216
 800179c:	20000214 	.word	0x20000214
 80017a0:	20000212 	.word	0x20000212
 80017a4:	20000210 	.word	0x20000210
 80017a8:	20000222 	.word	0x20000222
	  }
	  p = 1048576 - adc_P;
 80017ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017b0:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80017b4:	17da      	asrs	r2, r3, #31
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017ba:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80017be:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 80017c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017c6:	105b      	asrs	r3, r3, #1
 80017c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80017cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017d0:	07db      	lsls	r3, r3, #31
 80017d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017d6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80017da:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80017de:	4621      	mov	r1, r4
 80017e0:	1a89      	subs	r1, r1, r2
 80017e2:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80017e6:	4629      	mov	r1, r5
 80017e8:	eb61 0303 	sbc.w	r3, r1, r3
 80017ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80017f0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80017f4:	4622      	mov	r2, r4
 80017f6:	462b      	mov	r3, r5
 80017f8:	1891      	adds	r1, r2, r2
 80017fa:	6239      	str	r1, [r7, #32]
 80017fc:	415b      	adcs	r3, r3
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001800:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001804:	4621      	mov	r1, r4
 8001806:	1851      	adds	r1, r2, r1
 8001808:	61b9      	str	r1, [r7, #24]
 800180a:	4629      	mov	r1, r5
 800180c:	414b      	adcs	r3, r1
 800180e:	61fb      	str	r3, [r7, #28]
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800181c:	4649      	mov	r1, r9
 800181e:	018b      	lsls	r3, r1, #6
 8001820:	4641      	mov	r1, r8
 8001822:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001826:	4641      	mov	r1, r8
 8001828:	018a      	lsls	r2, r1, #6
 800182a:	4641      	mov	r1, r8
 800182c:	1889      	adds	r1, r1, r2
 800182e:	6139      	str	r1, [r7, #16]
 8001830:	4649      	mov	r1, r9
 8001832:	eb43 0101 	adc.w	r1, r3, r1
 8001836:	6179      	str	r1, [r7, #20]
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001844:	4649      	mov	r1, r9
 8001846:	008b      	lsls	r3, r1, #2
 8001848:	4641      	mov	r1, r8
 800184a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800184e:	4641      	mov	r1, r8
 8001850:	008a      	lsls	r2, r1, #2
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	4603      	mov	r3, r0
 8001858:	4622      	mov	r2, r4
 800185a:	189b      	adds	r3, r3, r2
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	460b      	mov	r3, r1
 8001860:	462a      	mov	r2, r5
 8001862:	eb42 0303 	adc.w	r3, r2, r3
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	f04f 0300 	mov.w	r3, #0
 8001870:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001874:	4649      	mov	r1, r9
 8001876:	008b      	lsls	r3, r1, #2
 8001878:	4641      	mov	r1, r8
 800187a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800187e:	4641      	mov	r1, r8
 8001880:	008a      	lsls	r2, r1, #2
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	4603      	mov	r3, r0
 8001888:	4622      	mov	r2, r4
 800188a:	189b      	adds	r3, r3, r2
 800188c:	67bb      	str	r3, [r7, #120]	; 0x78
 800188e:	462b      	mov	r3, r5
 8001890:	460a      	mov	r2, r1
 8001892:	eb42 0303 	adc.w	r3, r2, r3
 8001896:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001898:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800189c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80018a0:	f7ff fa12 	bl	8000cc8 <__aeabi_ldivmod>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 80018ac:	4b6b      	ldr	r3, [pc, #428]	; (8001a5c <BMP280_ReadTemperatureAndPressure+0x5c8>)
 80018ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	17da      	asrs	r2, r3, #31
 80018b6:	673b      	str	r3, [r7, #112]	; 0x70
 80018b8:	677a      	str	r2, [r7, #116]	; 0x74
 80018ba:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80018be:	f04f 0000 	mov.w	r0, #0
 80018c2:	f04f 0100 	mov.w	r1, #0
 80018c6:	0b50      	lsrs	r0, r2, #13
 80018c8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018cc:	1359      	asrs	r1, r3, #13
 80018ce:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80018d2:	462b      	mov	r3, r5
 80018d4:	fb00 f203 	mul.w	r2, r0, r3
 80018d8:	4623      	mov	r3, r4
 80018da:	fb03 f301 	mul.w	r3, r3, r1
 80018de:	4413      	add	r3, r2
 80018e0:	4622      	mov	r2, r4
 80018e2:	fba2 1200 	umull	r1, r2, r2, r0
 80018e6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80018ea:	460a      	mov	r2, r1
 80018ec:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80018f0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80018f4:	4413      	add	r3, r2
 80018f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80018fa:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80018fe:	f04f 0000 	mov.w	r0, #0
 8001902:	f04f 0100 	mov.w	r1, #0
 8001906:	0b50      	lsrs	r0, r2, #13
 8001908:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800190c:	1359      	asrs	r1, r3, #13
 800190e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001912:	462b      	mov	r3, r5
 8001914:	fb00 f203 	mul.w	r2, r0, r3
 8001918:	4623      	mov	r3, r4
 800191a:	fb03 f301 	mul.w	r3, r3, r1
 800191e:	4413      	add	r3, r2
 8001920:	4622      	mov	r2, r4
 8001922:	fba2 1200 	umull	r1, r2, r2, r0
 8001926:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800192a:	460a      	mov	r2, r1
 800192c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001930:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001934:	4413      	add	r3, r2
 8001936:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001946:	4621      	mov	r1, r4
 8001948:	0e4a      	lsrs	r2, r1, #25
 800194a:	4629      	mov	r1, r5
 800194c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001950:	4629      	mov	r1, r5
 8001952:	164b      	asrs	r3, r1, #25
 8001954:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 8001958:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <BMP280_ReadTemperatureAndPressure+0x5cc>)
 800195a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800195e:	b21b      	sxth	r3, r3
 8001960:	17da      	asrs	r2, r3, #31
 8001962:	66bb      	str	r3, [r7, #104]	; 0x68
 8001964:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001966:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800196a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800196e:	462a      	mov	r2, r5
 8001970:	fb02 f203 	mul.w	r2, r2, r3
 8001974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001978:	4621      	mov	r1, r4
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	4413      	add	r3, r2
 8001980:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001984:	4621      	mov	r1, r4
 8001986:	fba2 1201 	umull	r1, r2, r2, r1
 800198a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800198e:	460a      	mov	r2, r1
 8001990:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001994:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001998:	4413      	add	r3, r2
 800199a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019aa:	4621      	mov	r1, r4
 80019ac:	0cca      	lsrs	r2, r1, #19
 80019ae:	4629      	mov	r1, r5
 80019b0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80019b4:	4629      	mov	r1, r5
 80019b6:	14cb      	asrs	r3, r1, #19
 80019b8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 80019bc:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80019c0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80019c4:	1884      	adds	r4, r0, r2
 80019c6:	663c      	str	r4, [r7, #96]	; 0x60
 80019c8:	eb41 0303 	adc.w	r3, r1, r3
 80019cc:	667b      	str	r3, [r7, #100]	; 0x64
 80019ce:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80019d2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019d6:	4621      	mov	r1, r4
 80019d8:	1889      	adds	r1, r1, r2
 80019da:	65b9      	str	r1, [r7, #88]	; 0x58
 80019dc:	4629      	mov	r1, r5
 80019de:	eb43 0101 	adc.w	r1, r3, r1
 80019e2:	65f9      	str	r1, [r7, #92]	; 0x5c
 80019e4:	f04f 0000 	mov.w	r0, #0
 80019e8:	f04f 0100 	mov.w	r1, #0
 80019ec:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80019f0:	4623      	mov	r3, r4
 80019f2:	0a18      	lsrs	r0, r3, #8
 80019f4:	462b      	mov	r3, r5
 80019f6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80019fa:	462b      	mov	r3, r5
 80019fc:	1219      	asrs	r1, r3, #8
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 8001a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a04:	b21b      	sxth	r3, r3
 8001a06:	17da      	asrs	r2, r3, #31
 8001a08:	653b      	str	r3, [r7, #80]	; 0x50
 8001a0a:	657a      	str	r2, [r7, #84]	; 0x54
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001a18:	464c      	mov	r4, r9
 8001a1a:	0123      	lsls	r3, r4, #4
 8001a1c:	4644      	mov	r4, r8
 8001a1e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a22:	4644      	mov	r4, r8
 8001a24:	0122      	lsls	r2, r4, #4
 8001a26:	1884      	adds	r4, r0, r2
 8001a28:	603c      	str	r4, [r7, #0]
 8001a2a:	eb41 0303 	adc.w	r3, r1, r3
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a34:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  *pressure = (int32_t)p/256;
 8001a38:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	da00      	bge.n	8001a42 <BMP280_ReadTemperatureAndPressure+0x5ae>
 8001a40:	33ff      	adds	r3, #255	; 0xff
 8001a42:	121b      	asrs	r3, r3, #8
 8001a44:	461a      	mov	r2, r3
 8001a46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001a4a:	601a      	str	r2, [r3, #0]

	  return 0;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001a54:	46bd      	mov	sp, r7
 8001a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000021e 	.word	0x2000021e
 8001a60:	2000021c 	.word	0x2000021c
 8001a64:	2000021a 	.word	0x2000021a

08001a68 <LCD_SetDataPort>:

//
//	Set data port
//
static inline void LCD_SetDataPort(uint8_t data)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]

#ifdef LCD_4BIT
	if(data & (1<<0))
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <LCD_SetDataPort+0x20>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	2110      	movs	r1, #16
 8001a80:	481e      	ldr	r0, [pc, #120]	; (8001afc <LCD_SetDataPort+0x94>)
 8001a82:	f001 fce3 	bl	800344c <HAL_GPIO_WritePin>
 8001a86:	e004      	b.n	8001a92 <LCD_SetDataPort+0x2a>
	else
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2110      	movs	r1, #16
 8001a8c:	481b      	ldr	r0, [pc, #108]	; (8001afc <LCD_SetDataPort+0x94>)
 8001a8e:	f001 fcdd 	bl	800344c <HAL_GPIO_WritePin>

	if(data & (1<<1))
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <LCD_SetDataPort+0x40>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	2120      	movs	r1, #32
 8001aa0:	4816      	ldr	r0, [pc, #88]	; (8001afc <LCD_SetDataPort+0x94>)
 8001aa2:	f001 fcd3 	bl	800344c <HAL_GPIO_WritePin>
 8001aa6:	e004      	b.n	8001ab2 <LCD_SetDataPort+0x4a>
	else
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2120      	movs	r1, #32
 8001aac:	4813      	ldr	r0, [pc, #76]	; (8001afc <LCD_SetDataPort+0x94>)
 8001aae:	f001 fccd 	bl	800344c <HAL_GPIO_WritePin>

	if(data & (1<<2))
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <LCD_SetDataPort+0x60>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8001abc:	2201      	movs	r2, #1
 8001abe:	2140      	movs	r1, #64	; 0x40
 8001ac0:	480e      	ldr	r0, [pc, #56]	; (8001afc <LCD_SetDataPort+0x94>)
 8001ac2:	f001 fcc3 	bl	800344c <HAL_GPIO_WritePin>
 8001ac6:	e004      	b.n	8001ad2 <LCD_SetDataPort+0x6a>
	else
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2140      	movs	r1, #64	; 0x40
 8001acc:	480b      	ldr	r0, [pc, #44]	; (8001afc <LCD_SetDataPort+0x94>)
 8001ace:	f001 fcbd 	bl	800344c <HAL_GPIO_WritePin>

	if(data & (1<<3))
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <LCD_SetDataPort+0x80>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	2180      	movs	r1, #128	; 0x80
 8001ae0:	4806      	ldr	r0, [pc, #24]	; (8001afc <LCD_SetDataPort+0x94>)
 8001ae2:	f001 fcb3 	bl	800344c <HAL_GPIO_WritePin>
	if(data & (1<<7))
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
	else
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
#endif
}
 8001ae6:	e004      	b.n	8001af2 <LCD_SetDataPort+0x8a>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	4803      	ldr	r0, [pc, #12]	; (8001afc <LCD_SetDataPort+0x94>)
 8001aee:	f001 fcad 	bl	800344c <HAL_GPIO_WritePin>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40020c00 	.word	0x40020c00

08001b00 <LCD_DataOut>:
return result;
}
#endif

static void LCD_DataOut()
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct;
#ifdef LCD_4BIT
	  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 8001b06:	23f0      	movs	r3, #240	; 0xf0
 8001b08:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
	                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
#endif
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4803      	ldr	r0, [pc, #12]	; (8001b28 <LCD_DataOut+0x28>)
 8001b1c:	f001 faea 	bl	80030f4 <HAL_GPIO_Init>
}
 8001b20:	bf00      	nop
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40020c00 	.word	0x40020c00

08001b2c <LCD_WriteByte>:

//
//	Write byte to LCD
//
void LCD_WriteByte(uint8_t data)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]

	RESET_LCD_RW;
#endif

#ifdef LCD_4BIT
	SET_LCD_E;
 8001b36:	2201      	movs	r2, #1
 8001b38:	2108      	movs	r1, #8
 8001b3a:	4811      	ldr	r0, [pc, #68]	; (8001b80 <LCD_WriteByte+0x54>)
 8001b3c:	f001 fc86 	bl	800344c <HAL_GPIO_WritePin>
	LCD_SetDataPort(data >> 4);
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	091b      	lsrs	r3, r3, #4
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ff8e 	bl	8001a68 <LCD_SetDataPort>
	RESET_LCD_E;
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2108      	movs	r1, #8
 8001b50:	480b      	ldr	r0, [pc, #44]	; (8001b80 <LCD_WriteByte+0x54>)
 8001b52:	f001 fc7b 	bl	800344c <HAL_GPIO_WritePin>
#endif
	SET_LCD_E;
 8001b56:	2201      	movs	r2, #1
 8001b58:	2108      	movs	r1, #8
 8001b5a:	4809      	ldr	r0, [pc, #36]	; (8001b80 <LCD_WriteByte+0x54>)
 8001b5c:	f001 fc76 	bl	800344c <HAL_GPIO_WritePin>
	LCD_SetDataPort(data);
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff ff80 	bl	8001a68 <LCD_SetDataPort>
	RESET_LCD_E;
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2108      	movs	r1, #8
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <LCD_WriteByte+0x54>)
 8001b6e:	f001 fc6d 	bl	800344c <HAL_GPIO_WritePin>

#ifdef USE_RW
	while((LCD_CheckBusyFlag() & (1<<7))); // Wait for data processing
#else
//		HAL_Delay(1);
		Delay_us(120); // Wait for data processing
 8001b72:	2078      	movs	r0, #120	; 0x78
 8001b74:	f000 f8c0 	bl	8001cf8 <Delay_us>
#endif
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40020c00 	.word	0x40020c00

08001b84 <LCD_WriteCmd>:

//
//	Write command to LCD
//
void LCD_WriteCmd(uint8_t cmd)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
	RESET_LCD_RS;
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2104      	movs	r1, #4
 8001b92:	4807      	ldr	r0, [pc, #28]	; (8001bb0 <LCD_WriteCmd+0x2c>)
 8001b94:	f001 fc5a 	bl	800344c <HAL_GPIO_WritePin>
	LCD_WriteByte(cmd);
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ffc6 	bl	8001b2c <LCD_WriteByte>
#ifndef USE_RW
	Delay_us(1000); //<<--- wait for command processing
 8001ba0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ba4:	f000 f8a8 	bl	8001cf8 <Delay_us>
#endif
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40020c00 	.word	0x40020c00

08001bb4 <LCD_WriteData>:

//
//	Write data to LCD
//
void LCD_WriteData(uint8_t data)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
	SET_LCD_RS;
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2104      	movs	r1, #4
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <LCD_WriteData+0x24>)
 8001bc4:	f001 fc42 	bl	800344c <HAL_GPIO_WritePin>
	LCD_WriteByte(data);
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ffae 	bl	8001b2c <LCD_WriteByte>
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40020c00 	.word	0x40020c00

08001bdc <LCD_Char>:

//
//	Write one character to LCD
//
void LCD_Char(char c)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
	LCD_WriteData(((c >= 0x80) && (c <= 0x87)) ? (c & 0x07) : c);
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	da07      	bge.n	8001bfe <LCD_Char+0x22>
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	2b87      	cmp	r3, #135	; 0x87
 8001bf2:	d804      	bhi.n	8001bfe <LCD_Char+0x22>
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	e000      	b.n	8001c00 <LCD_Char+0x24>
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ffd7 	bl	8001bb4 <LCD_WriteData>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <LCD_String>:

//
//	Write string to LCD
//
void LCD_String(char* str)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b084      	sub	sp, #16
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
	char c;
	while((c = *(str++)))
 8001c16:	e003      	b.n	8001c20 <LCD_String+0x12>
		LCD_Char(c);
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff ffde 	bl	8001bdc <LCD_Char>
	while((c = *(str++)))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f3      	bne.n	8001c18 <LCD_String+0xa>
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <LCD_Locate>:

//
// Set cursor for x-column, y-row
//
void LCD_Locate(uint8_t x, uint8_t y)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	460a      	mov	r2, r1
 8001c44:	71fb      	strb	r3, [r7, #7]
 8001c46:	4613      	mov	r3, r2
 8001c48:	71bb      	strb	r3, [r7, #6]
	switch(y)
 8001c4a:	79bb      	ldrb	r3, [r7, #6]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <LCD_Locate+0x1c>
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d003      	beq.n	8001c5c <LCD_Locate+0x22>
 8001c54:	e005      	b.n	8001c62 <LCD_Locate+0x28>
	{
		case 0:
			y = LCD_LINE1;
 8001c56:	2300      	movs	r3, #0
 8001c58:	71bb      	strb	r3, [r7, #6]
			break;
 8001c5a:	e002      	b.n	8001c62 <LCD_Locate+0x28>
#if (LCD_Y>1)
		case 1:
			y = LCD_LINE2;
 8001c5c:	2340      	movs	r3, #64	; 0x40
 8001c5e:	71bb      	strb	r3, [r7, #6]
			break;
 8001c60:	bf00      	nop
			y = LCD_LINE4;
			break;
#endif
	}

	LCD_WriteCmd((0x80 + y + x));
 8001c62:	79ba      	ldrb	r2, [r7, #6]
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	4413      	add	r3, r2
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	3b80      	subs	r3, #128	; 0x80
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff88 	bl	8001b84 <LCD_WriteCmd>
}
 8001c74:	bf00      	nop
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <LCD_Cls>:

//
//	Clear LCD
//
void LCD_Cls(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
	LCD_WriteCmd(LCDC_CLS);
 8001c80:	2001      	movs	r0, #1
 8001c82:	f7ff ff7f 	bl	8001b84 <LCD_WriteCmd>
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <LCD_Init>:

//
//	Initialization
//
void LCD_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	RESET_LCD_RS;
 8001c90:	2200      	movs	r2, #0
 8001c92:	2104      	movs	r1, #4
 8001c94:	4817      	ldr	r0, [pc, #92]	; (8001cf4 <LCD_Init+0x68>)
 8001c96:	f001 fbd9 	bl	800344c <HAL_GPIO_WritePin>
	RESET_LCD_E;
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2108      	movs	r1, #8
 8001c9e:	4815      	ldr	r0, [pc, #84]	; (8001cf4 <LCD_Init+0x68>)
 8001ca0:	f001 fbd4 	bl	800344c <HAL_GPIO_WritePin>
#ifdef USE_RW
	RESET_LCD_RW;
#endif
	LCD_DataOut();
 8001ca4:	f7ff ff2c 	bl	8001b00 <LCD_DataOut>

	HAL_Delay(15);
 8001ca8:	200f      	movs	r0, #15
 8001caa:	f001 f85b 	bl	8002d64 <HAL_Delay>

	LCD_SetDataPort(LCDC_FUNC|LCDC_FUNC8B);
 8001cae:	2030      	movs	r0, #48	; 0x30
 8001cb0:	f7ff feda 	bl	8001a68 <LCD_SetDataPort>
	Delay_us(4100);
 8001cb4:	f241 0004 	movw	r0, #4100	; 0x1004
 8001cb8:	f000 f81e 	bl	8001cf8 <Delay_us>
	LCD_SetDataPort(LCDC_FUNC|LCDC_FUNC8B);
 8001cbc:	2030      	movs	r0, #48	; 0x30
 8001cbe:	f7ff fed3 	bl	8001a68 <LCD_SetDataPort>
	Delay_us(100);
 8001cc2:	2064      	movs	r0, #100	; 0x64
 8001cc4:	f000 f818 	bl	8001cf8 <Delay_us>
#ifdef LCD_4BIT
	LCD_SetDataPort(LCDC_FUNC|LCDC_FUNC4B); //4-byte mode
 8001cc8:	2020      	movs	r0, #32
 8001cca:	f7ff fecd 	bl	8001a68 <LCD_SetDataPort>
	Delay_us(100);
 8001cce:	2064      	movs	r0, #100	; 0x64
 8001cd0:	f000 f812 	bl	8001cf8 <Delay_us>
	LCD_WriteCmd(LCDC_FUNC|LCDC_FUNC4B|LCDC_FUNC2L|LCDC_FUNC5x7); // 4-bit, 2 lanes, 5x7 chars
 8001cd4:	2028      	movs	r0, #40	; 0x28
 8001cd6:	f7ff ff55 	bl	8001b84 <LCD_WriteCmd>
	LCD_SetDataPort(LCDC_FUNC|LCDC_FUNC8B);
	Delay_us(100);
	LCD_WriteCmd(LCDC_FUNC|LCDC_FUNC8B|LCDC_FUNC2L|LCDC_FUNC5x7); // 4-bit, 2 lanes, 5x7 chars
#endif

	LCD_WriteCmd(LCDC_ONOFF|LCDC_CURSOROFF); // Cursor off
 8001cda:	2008      	movs	r0, #8
 8001cdc:	f7ff ff52 	bl	8001b84 <LCD_WriteCmd>
	LCD_WriteCmd(LCDC_ONOFF|LCDC_DISPLAYON); // LCD on
 8001ce0:	200c      	movs	r0, #12
 8001ce2:	f7ff ff4f 	bl	8001b84 <LCD_WriteCmd>
	LCD_WriteCmd(LCDC_ENTRY|LCDC_ENTRYR); // Data entry right
 8001ce6:	2006      	movs	r0, #6
 8001ce8:	f7ff ff4c 	bl	8001b84 <LCD_WriteCmd>

	LCD_Cls(); // Clear display
 8001cec:	f7ff ffc6 	bl	8001c7c <LCD_Cls>
}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40020c00 	.word	0x40020c00

08001cf8 <Delay_us>:
#include "delays.h"

extern TIM_HandleTypeDef htim1;

void Delay_us(uint16_t us)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	80fb      	strh	r3, [r7, #6]
	htim1.Instance->CNT = 0;
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <Delay_us+0x30>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2200      	movs	r2, #0
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim1.Instance->CNT <= us);
 8001d0a:	bf00      	nop
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <Delay_us+0x30>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d9f9      	bls.n	8001d0c <Delay_us+0x14>
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	2000027c 	.word	0x2000027c

08001d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d30:	f000 ffbb 	bl	8002caa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d34:	f000 f868 	bl	8001e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d38:	f000 fa6a 	bl	8002210 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001d3c:	f000 fa0a 	bl	8002154 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d40:	f000 fa38 	bl	80021b4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001d44:	f000 f8c8 	bl	8001ed8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001d48:	f000 f9a8 	bl	800209c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001d4c:	f000 f958 	bl	8002000 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001d50:	f000 f902 	bl	8001f58 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_3);
 8001d54:	2108      	movs	r1, #8
 8001d56:	4820      	ldr	r0, [pc, #128]	; (8001dd8 <main+0xac>)
 8001d58:	f003 fd2c 	bl	80057b4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001d5c:	481f      	ldr	r0, [pc, #124]	; (8001ddc <main+0xb0>)
 8001d5e:	f003 fc59 	bl	8005614 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 8001d62:	481f      	ldr	r0, [pc, #124]	; (8001de0 <main+0xb4>)
 8001d64:	f003 fbe6 	bl	8005534 <HAL_TIM_Base_Start>
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001d68:	2301      	movs	r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	481d      	ldr	r0, [pc, #116]	; (8001de4 <main+0xb8>)
 8001d70:	f7ff fa46 	bl	8001200 <BMP280_Init>
  HAL_UART_Receive_IT(&huart3, key, 2);
 8001d74:	2202      	movs	r2, #2
 8001d76:	491c      	ldr	r1, [pc, #112]	; (8001de8 <main+0xbc>)
 8001d78:	481c      	ldr	r0, [pc, #112]	; (8001dec <main+0xc0>)
 8001d7a:	f004 fe76 	bl	8006a6a <HAL_UART_Receive_IT>
  LCD_Init();
 8001d7e:	f7ff ff85 	bl	8001c8c <LCD_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Tworzenie stringów z docelową i odczytaną temperaturą
	sprintf(LCD_target_temperature, "%Docelowa: %2.2f", desired_temperature);
 8001d82:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <main+0xc4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fbfe 	bl	8000588 <__aeabi_f2d>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4918      	ldr	r1, [pc, #96]	; (8001df4 <main+0xc8>)
 8001d92:	4819      	ldr	r0, [pc, #100]	; (8001df8 <main+0xcc>)
 8001d94:	f007 fee0 	bl	8009b58 <siprintf>
	sprintf(LCD_read_temperature, "%Odczyt:   %2.2f", temperature);
 8001d98:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <main+0xd0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fbf3 	bl	8000588 <__aeabi_f2d>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4916      	ldr	r1, [pc, #88]	; (8001e00 <main+0xd4>)
 8001da8:	4816      	ldr	r0, [pc, #88]	; (8001e04 <main+0xd8>)
 8001daa:	f007 fed5 	bl	8009b58 <siprintf>

	// Print na LCD
	LCD_Cls();
 8001dae:	f7ff ff65 	bl	8001c7c <LCD_Cls>
	LCD_Locate(0,0);
 8001db2:	2100      	movs	r1, #0
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7ff ff40 	bl	8001c3a <LCD_Locate>
	LCD_String(LCD_target_temperature);
 8001dba:	480f      	ldr	r0, [pc, #60]	; (8001df8 <main+0xcc>)
 8001dbc:	f7ff ff27 	bl	8001c0e <LCD_String>
	LCD_Locate(0,1);
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f7ff ff39 	bl	8001c3a <LCD_Locate>
	LCD_String(LCD_read_temperature);
 8001dc8:	480e      	ldr	r0, [pc, #56]	; (8001e04 <main+0xd8>)
 8001dca:	f7ff ff20 	bl	8001c0e <LCD_String>
	HAL_Delay(100);
 8001dce:	2064      	movs	r0, #100	; 0x64
 8001dd0:	f000 ffc8 	bl	8002d64 <HAL_Delay>
	sprintf(LCD_target_temperature, "%Docelowa: %2.2f", desired_temperature);
 8001dd4:	e7d5      	b.n	8001d82 <main+0x56>
 8001dd6:	bf00      	nop
 8001dd8:	20000314 	.word	0x20000314
 8001ddc:	200002c8 	.word	0x200002c8
 8001de0:	2000027c 	.word	0x2000027c
 8001de4:	20000228 	.word	0x20000228
 8001de8:	200008f0 	.word	0x200008f0
 8001dec:	20000360 	.word	0x20000360
 8001df0:	20000000 	.word	0x20000000
 8001df4:	0800c770 	.word	0x0800c770
 8001df8:	20000968 	.word	0x20000968
 8001dfc:	20000978 	.word	0x20000978
 8001e00:	0800c784 	.word	0x0800c784
 8001e04:	20000958 	.word	0x20000958

08001e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b094      	sub	sp, #80	; 0x50
 8001e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e0e:	f107 0320 	add.w	r3, r7, #32
 8001e12:	2230      	movs	r2, #48	; 0x30
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f007 ff01 	bl	8009c1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e1c:	f107 030c 	add.w	r3, r7, #12
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e2c:	f002 fa60 	bl	80042f0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e30:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <SystemClock_Config+0xc8>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	4a26      	ldr	r2, [pc, #152]	; (8001ed0 <SystemClock_Config+0xc8>)
 8001e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3c:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <SystemClock_Config+0xc8>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e48:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <SystemClock_Config+0xcc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e50:	4a20      	ldr	r2, [pc, #128]	; (8001ed4 <SystemClock_Config+0xcc>)
 8001e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <SystemClock_Config+0xcc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e64:	2301      	movs	r3, #1
 8001e66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001e68:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e78:	2304      	movs	r3, #4
 8001e7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001e7c:	2348      	movs	r3, #72	; 0x48
 8001e7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e80:	2302      	movs	r3, #2
 8001e82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001e84:	2303      	movs	r3, #3
 8001e86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e88:	f107 0320 	add.w	r3, r7, #32
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f002 fa3f 	bl	8004310 <HAL_RCC_OscConfig>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e98:	f000 fba8 	bl	80025ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e9c:	230f      	movs	r3, #15
 8001e9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eb2:	f107 030c 	add.w	r3, r7, #12
 8001eb6:	2102      	movs	r1, #2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f002 fccd 	bl	8004858 <HAL_RCC_ClockConfig>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ec4:	f000 fb92 	bl	80025ec <Error_Handler>
  }
}
 8001ec8:	bf00      	nop
 8001eca:	3750      	adds	r7, #80	; 0x50
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40007000 	.word	0x40007000

08001ed8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001edc:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <MX_I2C1_Init+0x74>)
 8001ede:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <MX_I2C1_Init+0x78>)
 8001ee0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <MX_I2C1_Init+0x74>)
 8001ee4:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <MX_I2C1_Init+0x7c>)
 8001ee6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ee8:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <MX_I2C1_Init+0x74>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001eee:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <MX_I2C1_Init+0x74>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ef4:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <MX_I2C1_Init+0x74>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001efa:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <MX_I2C1_Init+0x74>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <MX_I2C1_Init+0x74>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <MX_I2C1_Init+0x74>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <MX_I2C1_Init+0x74>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f12:	480e      	ldr	r0, [pc, #56]	; (8001f4c <MX_I2C1_Init+0x74>)
 8001f14:	f001 fab4 	bl	8003480 <HAL_I2C_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f1e:	f000 fb65 	bl	80025ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f22:	2100      	movs	r1, #0
 8001f24:	4809      	ldr	r0, [pc, #36]	; (8001f4c <MX_I2C1_Init+0x74>)
 8001f26:	f002 f803 	bl	8003f30 <HAL_I2CEx_ConfigAnalogFilter>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f30:	f000 fb5c 	bl	80025ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f34:	2100      	movs	r1, #0
 8001f36:	4805      	ldr	r0, [pc, #20]	; (8001f4c <MX_I2C1_Init+0x74>)
 8001f38:	f002 f845 	bl	8003fc6 <HAL_I2CEx_ConfigDigitalFilter>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f42:	f000 fb53 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000228 	.word	0x20000228
 8001f50:	40005400 	.word	0x40005400
 8001f54:	00808cd2 	.word	0x00808cd2

08001f58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f5e:	f107 0310 	add.w	r3, r7, #16
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f76:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <MX_TIM1_Init+0xa0>)
 8001f78:	4a20      	ldr	r2, [pc, #128]	; (8001ffc <MX_TIM1_Init+0xa4>)
 8001f7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 617;
 8001f7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ff8 <MX_TIM1_Init+0xa0>)
 8001f7e:	f240 2269 	movw	r2, #617	; 0x269
 8001f82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f84:	4b1c      	ldr	r3, [pc, #112]	; (8001ff8 <MX_TIM1_Init+0xa0>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <MX_TIM1_Init+0xa0>)
 8001f8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f92:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <MX_TIM1_Init+0xa0>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f98:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <MX_TIM1_Init+0xa0>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <MX_TIM1_Init+0xa0>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fa4:	4814      	ldr	r0, [pc, #80]	; (8001ff8 <MX_TIM1_Init+0xa0>)
 8001fa6:	f003 fa6d 	bl	8005484 <HAL_TIM_Base_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001fb0:	f000 fb1c 	bl	80025ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fba:	f107 0310 	add.w	r3, r7, #16
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	480d      	ldr	r0, [pc, #52]	; (8001ff8 <MX_TIM1_Init+0xa0>)
 8001fc2:	f003 ff25 	bl	8005e10 <HAL_TIM_ConfigClockSource>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001fcc:	f000 fb0e 	bl	80025ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <MX_TIM1_Init+0xa0>)
 8001fe2:	f004 fbc5 	bl	8006770 <HAL_TIMEx_MasterConfigSynchronization>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001fec:	f000 fafe 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ff0:	bf00      	nop
 8001ff2:	3720      	adds	r7, #32
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	2000027c 	.word	0x2000027c
 8001ffc:	40010000 	.word	0x40010000

08002000 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002006:	f107 0310 	add.w	r3, r7, #16
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800201e:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <MX_TIM2_Init+0x94>)
 8002020:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002024:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <MX_TIM2_Init+0x94>)
 8002028:	2247      	movs	r2, #71	; 0x47
 800202a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800202c:	4b19      	ldr	r3, [pc, #100]	; (8002094 <MX_TIM2_Init+0x94>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8002032:	4b18      	ldr	r3, [pc, #96]	; (8002094 <MX_TIM2_Init+0x94>)
 8002034:	4a18      	ldr	r2, [pc, #96]	; (8002098 <MX_TIM2_Init+0x98>)
 8002036:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002038:	4b16      	ldr	r3, [pc, #88]	; (8002094 <MX_TIM2_Init+0x94>)
 800203a:	2200      	movs	r2, #0
 800203c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <MX_TIM2_Init+0x94>)
 8002040:	2280      	movs	r2, #128	; 0x80
 8002042:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002044:	4813      	ldr	r0, [pc, #76]	; (8002094 <MX_TIM2_Init+0x94>)
 8002046:	f003 fa1d 	bl	8005484 <HAL_TIM_Base_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002050:	f000 facc 	bl	80025ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002058:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800205a:	f107 0310 	add.w	r3, r7, #16
 800205e:	4619      	mov	r1, r3
 8002060:	480c      	ldr	r0, [pc, #48]	; (8002094 <MX_TIM2_Init+0x94>)
 8002062:	f003 fed5 	bl	8005e10 <HAL_TIM_ConfigClockSource>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800206c:	f000 fabe 	bl	80025ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002070:	2300      	movs	r3, #0
 8002072:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	4619      	mov	r1, r3
 800207c:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_TIM2_Init+0x94>)
 800207e:	f004 fb77 	bl	8006770 <HAL_TIMEx_MasterConfigSynchronization>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002088:	f000 fab0 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800208c:	bf00      	nop
 800208e:	3720      	adds	r7, #32
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	200002c8 	.word	0x200002c8
 8002098:	000f4240 	.word	0x000f4240

0800209c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a2:	f107 031c 	add.w	r3, r7, #28
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ae:	463b      	mov	r3, r7
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
 80020bc:	615a      	str	r2, [r3, #20]
 80020be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020c0:	4b22      	ldr	r3, [pc, #136]	; (800214c <MX_TIM3_Init+0xb0>)
 80020c2:	4a23      	ldr	r2, [pc, #140]	; (8002150 <MX_TIM3_Init+0xb4>)
 80020c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80020c6:	4b21      	ldr	r3, [pc, #132]	; (800214c <MX_TIM3_Init+0xb0>)
 80020c8:	2247      	movs	r2, #71	; 0x47
 80020ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020cc:	4b1f      	ldr	r3, [pc, #124]	; (800214c <MX_TIM3_Init+0xb0>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80020d2:	4b1e      	ldr	r3, [pc, #120]	; (800214c <MX_TIM3_Init+0xb0>)
 80020d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020da:	4b1c      	ldr	r3, [pc, #112]	; (800214c <MX_TIM3_Init+0xb0>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020e0:	4b1a      	ldr	r3, [pc, #104]	; (800214c <MX_TIM3_Init+0xb0>)
 80020e2:	2280      	movs	r2, #128	; 0x80
 80020e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020e6:	4819      	ldr	r0, [pc, #100]	; (800214c <MX_TIM3_Init+0xb0>)
 80020e8:	f003 fb0c 	bl	8005704 <HAL_TIM_PWM_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80020f2:	f000 fa7b 	bl	80025ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020fe:	f107 031c 	add.w	r3, r7, #28
 8002102:	4619      	mov	r1, r3
 8002104:	4811      	ldr	r0, [pc, #68]	; (800214c <MX_TIM3_Init+0xb0>)
 8002106:	f004 fb33 	bl	8006770 <HAL_TIMEx_MasterConfigSynchronization>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002110:	f000 fa6c 	bl	80025ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002114:	2360      	movs	r3, #96	; 0x60
 8002116:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 900;
 8002118:	f44f 7361 	mov.w	r3, #900	; 0x384
 800211c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002126:	463b      	mov	r3, r7
 8002128:	2208      	movs	r2, #8
 800212a:	4619      	mov	r1, r3
 800212c:	4807      	ldr	r0, [pc, #28]	; (800214c <MX_TIM3_Init+0xb0>)
 800212e:	f003 fd5b 	bl	8005be8 <HAL_TIM_PWM_ConfigChannel>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002138:	f000 fa58 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800213c:	4803      	ldr	r0, [pc, #12]	; (800214c <MX_TIM3_Init+0xb0>)
 800213e:	f000 fb5b 	bl	80027f8 <HAL_TIM_MspPostInit>

}
 8002142:	bf00      	nop
 8002144:	3728      	adds	r7, #40	; 0x28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000314 	.word	0x20000314
 8002150:	40000400 	.word	0x40000400

08002154 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002158:	4b14      	ldr	r3, [pc, #80]	; (80021ac <MX_USART3_UART_Init+0x58>)
 800215a:	4a15      	ldr	r2, [pc, #84]	; (80021b0 <MX_USART3_UART_Init+0x5c>)
 800215c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800215e:	4b13      	ldr	r3, [pc, #76]	; (80021ac <MX_USART3_UART_Init+0x58>)
 8002160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002164:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <MX_USART3_UART_Init+0x58>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800216c:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <MX_USART3_UART_Init+0x58>)
 800216e:	2200      	movs	r2, #0
 8002170:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <MX_USART3_UART_Init+0x58>)
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <MX_USART3_UART_Init+0x58>)
 800217a:	220c      	movs	r2, #12
 800217c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800217e:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <MX_USART3_UART_Init+0x58>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <MX_USART3_UART_Init+0x58>)
 8002186:	2200      	movs	r2, #0
 8002188:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <MX_USART3_UART_Init+0x58>)
 800218c:	2200      	movs	r2, #0
 800218e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <MX_USART3_UART_Init+0x58>)
 8002192:	2200      	movs	r2, #0
 8002194:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002196:	4805      	ldr	r0, [pc, #20]	; (80021ac <MX_USART3_UART_Init+0x58>)
 8002198:	f004 fb96 	bl	80068c8 <HAL_UART_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80021a2:	f000 fa23 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000360 	.word	0x20000360
 80021b0:	40004800 	.word	0x40004800

080021b4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80021b8:	4b14      	ldr	r3, [pc, #80]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80021be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021c2:	2206      	movs	r2, #6
 80021c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80021c6:	4b11      	ldr	r3, [pc, #68]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021c8:	2202      	movs	r2, #2
 80021ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021d4:	2202      	movs	r2, #2
 80021d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021da:	2201      	movs	r2, #1
 80021dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80021e4:	4b09      	ldr	r3, [pc, #36]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80021f6:	4805      	ldr	r0, [pc, #20]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021f8:	f001 ff31 	bl	800405e <HAL_PCD_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002202:	f000 f9f3 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	200003e8 	.word	0x200003e8

08002210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08c      	sub	sp, #48	; 0x30
 8002214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002216:	f107 031c 	add.w	r3, r7, #28
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	60da      	str	r2, [r3, #12]
 8002224:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002226:	4b71      	ldr	r3, [pc, #452]	; (80023ec <MX_GPIO_Init+0x1dc>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a70      	ldr	r2, [pc, #448]	; (80023ec <MX_GPIO_Init+0x1dc>)
 800222c:	f043 0304 	orr.w	r3, r3, #4
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b6e      	ldr	r3, [pc, #440]	; (80023ec <MX_GPIO_Init+0x1dc>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	61bb      	str	r3, [r7, #24]
 800223c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800223e:	4b6b      	ldr	r3, [pc, #428]	; (80023ec <MX_GPIO_Init+0x1dc>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a6a      	ldr	r2, [pc, #424]	; (80023ec <MX_GPIO_Init+0x1dc>)
 8002244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b68      	ldr	r3, [pc, #416]	; (80023ec <MX_GPIO_Init+0x1dc>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	4b65      	ldr	r3, [pc, #404]	; (80023ec <MX_GPIO_Init+0x1dc>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a64      	ldr	r2, [pc, #400]	; (80023ec <MX_GPIO_Init+0x1dc>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b62      	ldr	r3, [pc, #392]	; (80023ec <MX_GPIO_Init+0x1dc>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800226e:	4b5f      	ldr	r3, [pc, #380]	; (80023ec <MX_GPIO_Init+0x1dc>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a5e      	ldr	r2, [pc, #376]	; (80023ec <MX_GPIO_Init+0x1dc>)
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b5c      	ldr	r3, [pc, #368]	; (80023ec <MX_GPIO_Init+0x1dc>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002286:	4b59      	ldr	r3, [pc, #356]	; (80023ec <MX_GPIO_Init+0x1dc>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a58      	ldr	r2, [pc, #352]	; (80023ec <MX_GPIO_Init+0x1dc>)
 800228c:	f043 0308 	orr.w	r3, r3, #8
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b56      	ldr	r3, [pc, #344]	; (80023ec <MX_GPIO_Init+0x1dc>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800229e:	4b53      	ldr	r3, [pc, #332]	; (80023ec <MX_GPIO_Init+0x1dc>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a52      	ldr	r2, [pc, #328]	; (80023ec <MX_GPIO_Init+0x1dc>)
 80022a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b50      	ldr	r3, [pc, #320]	; (80023ec <MX_GPIO_Init+0x1dc>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80022b6:	2200      	movs	r2, #0
 80022b8:	f244 0181 	movw	r1, #16513	; 0x4081
 80022bc:	484c      	ldr	r0, [pc, #304]	; (80023f0 <MX_GPIO_Init+0x1e0>)
 80022be:	f001 f8c5 	bl	800344c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2140      	movs	r1, #64	; 0x40
 80022c6:	484b      	ldr	r0, [pc, #300]	; (80023f4 <MX_GPIO_Init+0x1e4>)
 80022c8:	f001 f8c0 	bl	800344c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 80022cc:	2200      	movs	r2, #0
 80022ce:	21fc      	movs	r1, #252	; 0xfc
 80022d0:	4849      	ldr	r0, [pc, #292]	; (80023f8 <MX_GPIO_Init+0x1e8>)
 80022d2:	f001 f8bb 	bl	800344c <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80022d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80022e6:	f107 031c 	add.w	r3, r7, #28
 80022ea:	4619      	mov	r1, r3
 80022ec:	4843      	ldr	r0, [pc, #268]	; (80023fc <MX_GPIO_Init+0x1ec>)
 80022ee:	f000 ff01 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80022f2:	2332      	movs	r3, #50	; 0x32
 80022f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fe:	2303      	movs	r3, #3
 8002300:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002302:	230b      	movs	r3, #11
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002306:	f107 031c 	add.w	r3, r7, #28
 800230a:	4619      	mov	r1, r3
 800230c:	483b      	ldr	r0, [pc, #236]	; (80023fc <MX_GPIO_Init+0x1ec>)
 800230e:	f000 fef1 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002312:	2386      	movs	r3, #134	; 0x86
 8002314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002322:	230b      	movs	r3, #11
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	f107 031c 	add.w	r3, r7, #28
 800232a:	4619      	mov	r1, r3
 800232c:	4834      	ldr	r0, [pc, #208]	; (8002400 <MX_GPIO_Init+0x1f0>)
 800232e:	f000 fee1 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002332:	f244 0381 	movw	r3, #16513	; 0x4081
 8002336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002338:	2301      	movs	r3, #1
 800233a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002344:	f107 031c 	add.w	r3, r7, #28
 8002348:	4619      	mov	r1, r3
 800234a:	4829      	ldr	r0, [pc, #164]	; (80023f0 <MX_GPIO_Init+0x1e0>)
 800234c:	f000 fed2 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235e:	2303      	movs	r3, #3
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002362:	230b      	movs	r3, #11
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002366:	f107 031c 	add.w	r3, r7, #28
 800236a:	4619      	mov	r1, r3
 800236c:	4820      	ldr	r0, [pc, #128]	; (80023f0 <MX_GPIO_Init+0x1e0>)
 800236e:	f000 fec1 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002372:	2340      	movs	r3, #64	; 0x40
 8002374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002376:	2301      	movs	r3, #1
 8002378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2300      	movs	r3, #0
 8002380:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002382:	f107 031c 	add.w	r3, r7, #28
 8002386:	4619      	mov	r1, r3
 8002388:	481a      	ldr	r0, [pc, #104]	; (80023f4 <MX_GPIO_Init+0x1e4>)
 800238a:	f000 feb3 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800239a:	f107 031c 	add.w	r3, r7, #28
 800239e:	4619      	mov	r1, r3
 80023a0:	4814      	ldr	r0, [pc, #80]	; (80023f4 <MX_GPIO_Init+0x1e4>)
 80023a2:	f000 fea7 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin
 80023a6:	23fc      	movs	r3, #252	; 0xfc
 80023a8:	61fb      	str	r3, [r7, #28]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023aa:	2301      	movs	r3, #1
 80023ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023b6:	f107 031c 	add.w	r3, r7, #28
 80023ba:	4619      	mov	r1, r3
 80023bc:	480e      	ldr	r0, [pc, #56]	; (80023f8 <MX_GPIO_Init+0x1e8>)
 80023be:	f000 fe99 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80023c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80023c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d0:	2303      	movs	r3, #3
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023d4:	230b      	movs	r3, #11
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	4619      	mov	r1, r3
 80023de:	4805      	ldr	r0, [pc, #20]	; (80023f4 <MX_GPIO_Init+0x1e4>)
 80023e0:	f000 fe88 	bl	80030f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023e4:	bf00      	nop
 80023e6:	3730      	adds	r7, #48	; 0x30
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40020400 	.word	0x40020400
 80023f4:	40021800 	.word	0x40021800
 80023f8:	40020c00 	.word	0x40020c00
 80023fc:	40020800 	.word	0x40020800
 8002400:	40020000 	.word	0x40020000

08002404 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	// Odczyt docelowej temperatury
	desired_temperature = atof(key);
 800240c:	480a      	ldr	r0, [pc, #40]	; (8002438 <HAL_UART_RxCpltCallback+0x34>)
 800240e:	f006 f82b 	bl	8008468 <atof>
 8002412:	ec53 2b10 	vmov	r2, r3, d0
 8002416:	4610      	mov	r0, r2
 8002418:	4619      	mov	r1, r3
 800241a:	f7fe fc05 	bl	8000c28 <__aeabi_d2f>
 800241e:	4603      	mov	r3, r0
 8002420:	4a06      	ldr	r2, [pc, #24]	; (800243c <HAL_UART_RxCpltCallback+0x38>)
 8002422:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(&huart3, key, 2);
 8002424:	2202      	movs	r2, #2
 8002426:	4904      	ldr	r1, [pc, #16]	; (8002438 <HAL_UART_RxCpltCallback+0x34>)
 8002428:	4805      	ldr	r0, [pc, #20]	; (8002440 <HAL_UART_RxCpltCallback+0x3c>)
 800242a:	f004 fb1e 	bl	8006a6a <HAL_UART_Receive_IT>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200008f0 	.word	0x200008f0
 800243c:	20000000 	.word	0x20000000
 8002440:	20000360 	.word	0x20000360

08002444 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	; 0x28
 8002448:	af02      	add	r7, sp, #8
 800244a:	6078      	str	r0, [r7, #4]
	float uPid, derivative, P, I, D;

	// Pomiar temperatury
	BMP280_ReadTemperatureAndPressure(&temperature, NULL);
 800244c:	2100      	movs	r1, #0
 800244e:	4858      	ldr	r0, [pc, #352]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002450:	f7ff f820 	bl	8001494 <BMP280_ReadTemperatureAndPressure>

	// Wyznaczenie uchybu, błędu całkowania i pochodnej
	error = desired_temperature - temperature;
 8002454:	4b57      	ldr	r3, [pc, #348]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002456:	ed93 7a00 	vldr	s14, [r3]
 800245a:	4b55      	ldr	r3, [pc, #340]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002464:	4b54      	ldr	r3, [pc, #336]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002466:	edc3 7a00 	vstr	s15, [r3]
	integral_error += (error + previous_error);
 800246a:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800246c:	ed93 7a00 	vldr	s14, [r3]
 8002470:	4b52      	ldr	r3, [pc, #328]	; (80025bc <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002472:	edd3 7a00 	vldr	s15, [r3]
 8002476:	ee37 7a27 	vadd.f32	s14, s14, s15
 800247a:	4b51      	ldr	r3, [pc, #324]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800247c:	edd3 7a00 	vldr	s15, [r3]
 8002480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002484:	4b4e      	ldr	r3, [pc, #312]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002486:	edc3 7a00 	vstr	s15, [r3]
	derivative = (error - previous_error) / dt;
 800248a:	4b4b      	ldr	r3, [pc, #300]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800248c:	ed93 7a00 	vldr	s14, [r3]
 8002490:	4b4a      	ldr	r3, [pc, #296]	; (80025bc <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002492:	edd3 7a00 	vldr	s15, [r3]
 8002496:	ee77 6a67 	vsub.f32	s13, s14, s15
 800249a:	4b4a      	ldr	r3, [pc, #296]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800249c:	ed93 7a00 	vldr	s14, [r3]
 80024a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024a4:	edc7 7a06 	vstr	s15, [r7, #24]

	// Wyliczenie członów
	P = Kp * error;
 80024a8:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80024aa:	ed93 7a00 	vldr	s14, [r3]
 80024ae:	4b42      	ldr	r3, [pc, #264]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80024b0:	edd3 7a00 	vldr	s15, [r3]
 80024b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b8:	edc7 7a05 	vstr	s15, [r7, #20]
	I = Ki * integral_error * (dt / 2.0f);
 80024bc:	4b43      	ldr	r3, [pc, #268]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0x188>)
 80024be:	ed93 7a00 	vldr	s14, [r3]
 80024c2:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024cc:	4b3d      	ldr	r3, [pc, #244]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80024ce:	edd3 6a00 	vldr	s13, [r3]
 80024d2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80024d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80024da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024de:	edc7 7a04 	vstr	s15, [r7, #16]
	D = Kd * derivative;
 80024e2:	4b3b      	ldr	r3, [pc, #236]	; (80025d0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80024e4:	edd3 7a00 	vldr	s15, [r3]
 80024e8:	ed97 7a06 	vldr	s14, [r7, #24]
 80024ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f0:	edc7 7a03 	vstr	s15, [r7, #12]

	// Wyznaczenie sygnał sterującego
	uPid = P + I + D;
 80024f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80024f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80024fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002500:	ed97 7a03 	vldr	s14, [r7, #12]
 8002504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002508:	edc7 7a07 	vstr	s15, [r7, #28]

	// Saturacja
	if(uPid > 1.0)
 800250c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002510:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251c:	dd03      	ble.n	8002526 <HAL_TIM_PeriodElapsedCallback+0xe2>
		uPid = 1.0;
 800251e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002522:	61fb      	str	r3, [r7, #28]
 8002524:	e009      	b.n	800253a <HAL_TIM_PeriodElapsedCallback+0xf6>
	else if(uPid < 0.0)
 8002526:	edd7 7a07 	vldr	s15, [r7, #28]
 800252a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800252e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002532:	d502      	bpl.n	800253a <HAL_TIM_PeriodElapsedCallback+0xf6>
		uPid = 0.0;
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]

	// Konwersja sygnału sterującego na wypełnienie PWM
	pwm_duty = (int)(uPid * 1000.0);
 800253a:	69f8      	ldr	r0, [r7, #28]
 800253c:	f7fe f824 	bl	8000588 <__aeabi_f2d>
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002546:	f7fe f877 	bl	8000638 <__aeabi_dmul>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	f7fe fb21 	bl	8000b98 <__aeabi_d2iz>
 8002556:	4603      	mov	r3, r0
 8002558:	4a1f      	ldr	r2, [pc, #124]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800255a:	6013      	str	r3, [r2, #0]

	// Nadpisanie wypełnienia
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_duty);
 800255c:	4b1e      	ldr	r3, [pc, #120]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b1e      	ldr	r3, [pc, #120]	; (80025dc <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	63da      	str	r2, [r3, #60]	; 0x3c

	// Logging
	snprintf(text, sizeof(text), "{\"temperature\":%.2f}\n", temperature);
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe f80c 	bl	8000588 <__aeabi_f2d>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	e9cd 2300 	strd	r2, r3, [sp]
 8002578:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800257a:	2164      	movs	r1, #100	; 0x64
 800257c:	4819      	ldr	r0, [pc, #100]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800257e:	f007 fab7 	bl	8009af0 <sniprintf>
	//snprintf(text, sizeof(text), "{Odczyt:%.2f, Docelowa:%.2f}", temperature, desired_temperature);
	HAL_UART_Transmit(&huart3, (uint8_t*)text, strlen(text), 1000);
 8002582:	4818      	ldr	r0, [pc, #96]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002584:	f7fd fe94 	bl	80002b0 <strlen>
 8002588:	4603      	mov	r3, r0
 800258a:	b29a      	uxth	r2, r3
 800258c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002590:	4914      	ldr	r1, [pc, #80]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002592:	4815      	ldr	r0, [pc, #84]	; (80025e8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002594:	f004 f9e6 	bl	8006964 <HAL_UART_Transmit>
	text[0] = 0;
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]

	// Zapamiętanie starego uchybu
	previous_error = error;
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a06      	ldr	r2, [pc, #24]	; (80025bc <HAL_TIM_PeriodElapsedCallback+0x178>)
 80025a4:	6013      	str	r3, [r2, #0]
}
 80025a6:	bf00      	nop
 80025a8:	3720      	adds	r7, #32
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000978 	.word	0x20000978
 80025b4:	20000000 	.word	0x20000000
 80025b8:	2000097c 	.word	0x2000097c
 80025bc:	20000980 	.word	0x20000980
 80025c0:	20000984 	.word	0x20000984
 80025c4:	20000010 	.word	0x20000010
 80025c8:	20000004 	.word	0x20000004
 80025cc:	20000008 	.word	0x20000008
 80025d0:	2000000c 	.word	0x2000000c
 80025d4:	408f4000 	.word	0x408f4000
 80025d8:	20000988 	.word	0x20000988
 80025dc:	20000314 	.word	0x20000314
 80025e0:	0800c798 	.word	0x0800c798
 80025e4:	200008f4 	.word	0x200008f4
 80025e8:	20000360 	.word	0x20000360

080025ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025f0:	b672      	cpsid	i
}
 80025f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <Error_Handler+0x8>
	...

080025f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	4b0f      	ldr	r3, [pc, #60]	; (800263c <HAL_MspInit+0x44>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	4a0e      	ldr	r2, [pc, #56]	; (800263c <HAL_MspInit+0x44>)
 8002604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002608:	6413      	str	r3, [r2, #64]	; 0x40
 800260a:	4b0c      	ldr	r3, [pc, #48]	; (800263c <HAL_MspInit+0x44>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_MspInit+0x44>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	4a08      	ldr	r2, [pc, #32]	; (800263c <HAL_MspInit+0x44>)
 800261c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002620:	6453      	str	r3, [r2, #68]	; 0x44
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_MspInit+0x44>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800

08002640 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b0aa      	sub	sp, #168	; 0xa8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002658:	f107 0310 	add.w	r3, r7, #16
 800265c:	2284      	movs	r2, #132	; 0x84
 800265e:	2100      	movs	r1, #0
 8002660:	4618      	mov	r0, r3
 8002662:	f007 fadc 	bl	8009c1e <memset>
  if(hi2c->Instance==I2C1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a22      	ldr	r2, [pc, #136]	; (80026f4 <HAL_I2C_MspInit+0xb4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d13c      	bne.n	80026ea <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002670:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002674:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002676:	2300      	movs	r3, #0
 8002678:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800267a:	f107 0310 	add.w	r3, r7, #16
 800267e:	4618      	mov	r0, r3
 8002680:	f002 fb10 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800268a:	f7ff ffaf 	bl	80025ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800268e:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <HAL_I2C_MspInit+0xb8>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4a19      	ldr	r2, [pc, #100]	; (80026f8 <HAL_I2C_MspInit+0xb8>)
 8002694:	f043 0302 	orr.w	r3, r3, #2
 8002698:	6313      	str	r3, [r2, #48]	; 0x30
 800269a:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <HAL_I2C_MspInit+0xb8>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80026a6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80026aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ae:	2312      	movs	r3, #18
 80026b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ba:	2303      	movs	r3, #3
 80026bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026c0:	2304      	movs	r3, #4
 80026c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80026ca:	4619      	mov	r1, r3
 80026cc:	480b      	ldr	r0, [pc, #44]	; (80026fc <HAL_I2C_MspInit+0xbc>)
 80026ce:	f000 fd11 	bl	80030f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_I2C_MspInit+0xb8>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4a08      	ldr	r2, [pc, #32]	; (80026f8 <HAL_I2C_MspInit+0xb8>)
 80026d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026dc:	6413      	str	r3, [r2, #64]	; 0x40
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_I2C_MspInit+0xb8>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026ea:	bf00      	nop
 80026ec:	37a8      	adds	r7, #168	; 0xa8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40005400 	.word	0x40005400
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40020400 	.word	0x40020400

08002700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a16      	ldr	r2, [pc, #88]	; (8002768 <HAL_TIM_Base_MspInit+0x68>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d10c      	bne.n	800272c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002712:	4b16      	ldr	r3, [pc, #88]	; (800276c <HAL_TIM_Base_MspInit+0x6c>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	4a15      	ldr	r2, [pc, #84]	; (800276c <HAL_TIM_Base_MspInit+0x6c>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6453      	str	r3, [r2, #68]	; 0x44
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <HAL_TIM_Base_MspInit+0x6c>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800272a:	e018      	b.n	800275e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002734:	d113      	bne.n	800275e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <HAL_TIM_Base_MspInit+0x6c>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	4a0c      	ldr	r2, [pc, #48]	; (800276c <HAL_TIM_Base_MspInit+0x6c>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6413      	str	r3, [r2, #64]	; 0x40
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_TIM_Base_MspInit+0x6c>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	2100      	movs	r1, #0
 8002752:	201c      	movs	r0, #28
 8002754:	f000 fc05 	bl	8002f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002758:	201c      	movs	r0, #28
 800275a:	f000 fc1e 	bl	8002f9a <HAL_NVIC_EnableIRQ>
}
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40010000 	.word	0x40010000
 800276c:	40023800 	.word	0x40023800

08002770 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM3)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a17      	ldr	r2, [pc, #92]	; (80027ec <HAL_TIM_PWM_MspInit+0x7c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d127      	bne.n	80027e2 <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002792:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <HAL_TIM_PWM_MspInit+0x80>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	4a16      	ldr	r2, [pc, #88]	; (80027f0 <HAL_TIM_PWM_MspInit+0x80>)
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	6413      	str	r3, [r2, #64]	; 0x40
 800279e:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <HAL_TIM_PWM_MspInit+0x80>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027aa:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <HAL_TIM_PWM_MspInit+0x80>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	4a10      	ldr	r2, [pc, #64]	; (80027f0 <HAL_TIM_PWM_MspInit+0x80>)
 80027b0:	f043 0304 	orr.w	r3, r3, #4
 80027b4:	6313      	str	r3, [r2, #48]	; 0x30
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <HAL_TIM_PWM_MspInit+0x80>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027c2:	2340      	movs	r3, #64	; 0x40
 80027c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c6:	2302      	movs	r3, #2
 80027c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ce:	2300      	movs	r3, #0
 80027d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027d2:	2302      	movs	r3, #2
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	4805      	ldr	r0, [pc, #20]	; (80027f4 <HAL_TIM_PWM_MspInit+0x84>)
 80027de:	f000 fc89 	bl	80030f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80027e2:	bf00      	nop
 80027e4:	3728      	adds	r7, #40	; 0x28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40000400 	.word	0x40000400
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40020800 	.word	0x40020800

080027f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	f107 030c 	add.w	r3, r7, #12
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a11      	ldr	r2, [pc, #68]	; (800285c <HAL_TIM_MspPostInit+0x64>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d11c      	bne.n	8002854 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <HAL_TIM_MspPostInit+0x68>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a10      	ldr	r2, [pc, #64]	; (8002860 <HAL_TIM_MspPostInit+0x68>)
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <HAL_TIM_MspPostInit+0x68>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002832:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002836:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002840:	2300      	movs	r3, #0
 8002842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002844:	2302      	movs	r3, #2
 8002846:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002848:	f107 030c 	add.w	r3, r7, #12
 800284c:	4619      	mov	r1, r3
 800284e:	4805      	ldr	r0, [pc, #20]	; (8002864 <HAL_TIM_MspPostInit+0x6c>)
 8002850:	f000 fc50 	bl	80030f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002854:	bf00      	nop
 8002856:	3720      	adds	r7, #32
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40000400 	.word	0x40000400
 8002860:	40023800 	.word	0x40023800
 8002864:	40020800 	.word	0x40020800

08002868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b0aa      	sub	sp, #168	; 0xa8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002880:	f107 0310 	add.w	r3, r7, #16
 8002884:	2284      	movs	r2, #132	; 0x84
 8002886:	2100      	movs	r1, #0
 8002888:	4618      	mov	r0, r3
 800288a:	f007 f9c8 	bl	8009c1e <memset>
  if(huart->Instance==USART3)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a26      	ldr	r2, [pc, #152]	; (800292c <HAL_UART_MspInit+0xc4>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d144      	bne.n	8002922 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800289c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800289e:	2300      	movs	r3, #0
 80028a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028a2:	f107 0310 	add.w	r3, r7, #16
 80028a6:	4618      	mov	r0, r3
 80028a8:	f002 f9fc 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80028b2:	f7ff fe9b 	bl	80025ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80028b6:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <HAL_UART_MspInit+0xc8>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	4a1d      	ldr	r2, [pc, #116]	; (8002930 <HAL_UART_MspInit+0xc8>)
 80028bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c0:	6413      	str	r3, [r2, #64]	; 0x40
 80028c2:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <HAL_UART_MspInit+0xc8>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_UART_MspInit+0xc8>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a17      	ldr	r2, [pc, #92]	; (8002930 <HAL_UART_MspInit+0xc8>)
 80028d4:	f043 0308 	orr.w	r3, r3, #8
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <HAL_UART_MspInit+0xc8>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80028e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ee:	2302      	movs	r3, #2
 80028f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028f4:	2301      	movs	r3, #1
 80028f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fa:	2303      	movs	r3, #3
 80028fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002900:	2307      	movs	r3, #7
 8002902:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002906:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800290a:	4619      	mov	r1, r3
 800290c:	4809      	ldr	r0, [pc, #36]	; (8002934 <HAL_UART_MspInit+0xcc>)
 800290e:	f000 fbf1 	bl	80030f4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	2100      	movs	r1, #0
 8002916:	2027      	movs	r0, #39	; 0x27
 8002918:	f000 fb23 	bl	8002f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800291c:	2027      	movs	r0, #39	; 0x27
 800291e:	f000 fb3c 	bl	8002f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002922:	bf00      	nop
 8002924:	37a8      	adds	r7, #168	; 0xa8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40004800 	.word	0x40004800
 8002930:	40023800 	.word	0x40023800
 8002934:	40020c00 	.word	0x40020c00

08002938 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b0ac      	sub	sp, #176	; 0xb0
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002950:	f107 0318 	add.w	r3, r7, #24
 8002954:	2284      	movs	r2, #132	; 0x84
 8002956:	2100      	movs	r1, #0
 8002958:	4618      	mov	r0, r3
 800295a:	f007 f960 	bl	8009c1e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002966:	d159      	bne.n	8002a1c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002968:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800296c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800296e:	2300      	movs	r3, #0
 8002970:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002974:	f107 0318 	add.w	r3, r7, #24
 8002978:	4618      	mov	r0, r3
 800297a:	f002 f993 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002984:	f7ff fe32 	bl	80025ec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002988:	4b26      	ldr	r3, [pc, #152]	; (8002a24 <HAL_PCD_MspInit+0xec>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	4a25      	ldr	r2, [pc, #148]	; (8002a24 <HAL_PCD_MspInit+0xec>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6313      	str	r3, [r2, #48]	; 0x30
 8002994:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <HAL_PCD_MspInit+0xec>)
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80029a0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80029a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a8:	2302      	movs	r3, #2
 80029aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b4:	2303      	movs	r3, #3
 80029b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80029ba:	230a      	movs	r3, #10
 80029bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029c4:	4619      	mov	r1, r3
 80029c6:	4818      	ldr	r0, [pc, #96]	; (8002a28 <HAL_PCD_MspInit+0xf0>)
 80029c8:	f000 fb94 	bl	80030f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80029cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80029e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029e4:	4619      	mov	r1, r3
 80029e6:	4810      	ldr	r0, [pc, #64]	; (8002a28 <HAL_PCD_MspInit+0xf0>)
 80029e8:	f000 fb84 	bl	80030f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80029ec:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <HAL_PCD_MspInit+0xec>)
 80029ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f0:	4a0c      	ldr	r2, [pc, #48]	; (8002a24 <HAL_PCD_MspInit+0xec>)
 80029f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f6:	6353      	str	r3, [r2, #52]	; 0x34
 80029f8:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <HAL_PCD_MspInit+0xec>)
 80029fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <HAL_PCD_MspInit+0xec>)
 8002a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a08:	4a06      	ldr	r2, [pc, #24]	; (8002a24 <HAL_PCD_MspInit+0xec>)
 8002a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a0e:	6453      	str	r3, [r2, #68]	; 0x44
 8002a10:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <HAL_PCD_MspInit+0xec>)
 8002a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002a1c:	bf00      	nop
 8002a1e:	37b0      	adds	r7, #176	; 0xb0
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40020000 	.word	0x40020000

08002a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a30:	e7fe      	b.n	8002a30 <NMI_Handler+0x4>

08002a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a36:	e7fe      	b.n	8002a36 <HardFault_Handler+0x4>

08002a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a3c:	e7fe      	b.n	8002a3c <MemManage_Handler+0x4>

08002a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a42:	e7fe      	b.n	8002a42 <BusFault_Handler+0x4>

08002a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a48:	e7fe      	b.n	8002a48 <UsageFault_Handler+0x4>

08002a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a78:	f000 f954 	bl	8002d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a84:	4802      	ldr	r0, [pc, #8]	; (8002a90 <TIM2_IRQHandler+0x10>)
 8002a86:	f002 ff8f 	bl	80059a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	200002c8 	.word	0x200002c8

08002a94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a98:	4802      	ldr	r0, [pc, #8]	; (8002aa4 <USART3_IRQHandler+0x10>)
 8002a9a:	f004 f82b 	bl	8006af4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000360 	.word	0x20000360

08002aa8 <_getpid>:
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	2301      	movs	r3, #1
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <_kill>:
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
 8002ac2:	f007 f911 	bl	8009ce8 <__errno>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2216      	movs	r2, #22
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <_exit>:
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff ffe7 	bl	8002ab8 <_kill>
 8002aea:	e7fe      	b.n	8002aea <_exit+0x12>

08002aec <_read>:
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	e00a      	b.n	8002b14 <_read+0x28>
 8002afe:	f3af 8000 	nop.w
 8002b02:	4601      	mov	r1, r0
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	60ba      	str	r2, [r7, #8]
 8002b0a:	b2ca      	uxtb	r2, r1
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	3301      	adds	r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	dbf0      	blt.n	8002afe <_read+0x12>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <_write>:
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b086      	sub	sp, #24
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	e009      	b.n	8002b4c <_write+0x26>
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	60ba      	str	r2, [r7, #8]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f3af 8000 	nop.w
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	dbf1      	blt.n	8002b38 <_write+0x12>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <_close>:
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <_fstat>:
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	6039      	str	r1, [r7, #0]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b86:	605a      	str	r2, [r3, #4]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <_isatty>:
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <_lseek>:
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <_sbrk>:
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	4a14      	ldr	r2, [pc, #80]	; (8002c24 <_sbrk+0x5c>)
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <_sbrk+0x60>)
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <_sbrk+0x64>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <_sbrk+0x22>
 8002be4:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <_sbrk+0x64>)
 8002be6:	4a12      	ldr	r2, [pc, #72]	; (8002c30 <_sbrk+0x68>)
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <_sbrk+0x64>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d207      	bcs.n	8002c08 <_sbrk+0x40>
 8002bf8:	f007 f876 	bl	8009ce8 <__errno>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	220c      	movs	r2, #12
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295
 8002c06:	e009      	b.n	8002c1c <_sbrk+0x54>
 8002c08:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <_sbrk+0x64>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <_sbrk+0x64>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4413      	add	r3, r2
 8002c16:	4a05      	ldr	r2, [pc, #20]	; (8002c2c <_sbrk+0x64>)
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	20050000 	.word	0x20050000
 8002c28:	00000400 	.word	0x00000400
 8002c2c:	2000098c 	.word	0x2000098c
 8002c30:	20000ae0 	.word	0x20000ae0

08002c34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <SystemInit+0x20>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3e:	4a05      	ldr	r2, [pc, #20]	; (8002c54 <SystemInit+0x20>)
 8002c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <Reset_Handler>:
 8002c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c90 <LoopFillZerobss+0x12>
 8002c5c:	480d      	ldr	r0, [pc, #52]	; (8002c94 <LoopFillZerobss+0x16>)
 8002c5e:	490e      	ldr	r1, [pc, #56]	; (8002c98 <LoopFillZerobss+0x1a>)
 8002c60:	4a0e      	ldr	r2, [pc, #56]	; (8002c9c <LoopFillZerobss+0x1e>)
 8002c62:	2300      	movs	r3, #0
 8002c64:	e002      	b.n	8002c6c <LoopCopyDataInit>

08002c66 <CopyDataInit>:
 8002c66:	58d4      	ldr	r4, [r2, r3]
 8002c68:	50c4      	str	r4, [r0, r3]
 8002c6a:	3304      	adds	r3, #4

08002c6c <LoopCopyDataInit>:
 8002c6c:	18c4      	adds	r4, r0, r3
 8002c6e:	428c      	cmp	r4, r1
 8002c70:	d3f9      	bcc.n	8002c66 <CopyDataInit>
 8002c72:	4a0b      	ldr	r2, [pc, #44]	; (8002ca0 <LoopFillZerobss+0x22>)
 8002c74:	4c0b      	ldr	r4, [pc, #44]	; (8002ca4 <LoopFillZerobss+0x26>)
 8002c76:	2300      	movs	r3, #0
 8002c78:	e001      	b.n	8002c7e <LoopFillZerobss>

08002c7a <FillZerobss>:
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	3204      	adds	r2, #4

08002c7e <LoopFillZerobss>:
 8002c7e:	42a2      	cmp	r2, r4
 8002c80:	d3fb      	bcc.n	8002c7a <FillZerobss>
 8002c82:	f7ff ffd7 	bl	8002c34 <SystemInit>
 8002c86:	f007 f835 	bl	8009cf4 <__libc_init_array>
 8002c8a:	f7ff f84f 	bl	8001d2c <main>
 8002c8e:	4770      	bx	lr
 8002c90:	20050000 	.word	0x20050000
 8002c94:	20000000 	.word	0x20000000
 8002c98:	200001e8 	.word	0x200001e8
 8002c9c:	0800cc04 	.word	0x0800cc04
 8002ca0:	200001e8 	.word	0x200001e8
 8002ca4:	20000ae0 	.word	0x20000ae0

08002ca8 <ADC_IRQHandler>:
 8002ca8:	e7fe      	b.n	8002ca8 <ADC_IRQHandler>

08002caa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cae:	2003      	movs	r0, #3
 8002cb0:	f000 f94c 	bl	8002f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f000 f805 	bl	8002cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cba:	f7ff fc9d 	bl	80025f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ccc:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <HAL_InitTick+0x54>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_InitTick+0x58>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 f967 	bl	8002fb6 <HAL_SYSTICK_Config>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e00e      	b.n	8002d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b0f      	cmp	r3, #15
 8002cf6:	d80a      	bhi.n	8002d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002d00:	f000 f92f 	bl	8002f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d04:	4a06      	ldr	r2, [pc, #24]	; (8002d20 <HAL_InitTick+0x5c>)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e000      	b.n	8002d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20000014 	.word	0x20000014
 8002d1c:	2000001c 	.word	0x2000001c
 8002d20:	20000018 	.word	0x20000018

08002d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_IncTick+0x20>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_IncTick+0x24>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4413      	add	r3, r2
 8002d34:	4a04      	ldr	r2, [pc, #16]	; (8002d48 <HAL_IncTick+0x24>)
 8002d36:	6013      	str	r3, [r2, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	2000001c 	.word	0x2000001c
 8002d48:	20000990 	.word	0x20000990

08002d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d50:	4b03      	ldr	r3, [pc, #12]	; (8002d60 <HAL_GetTick+0x14>)
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000990 	.word	0x20000990

08002d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d6c:	f7ff ffee 	bl	8002d4c <HAL_GetTick>
 8002d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d005      	beq.n	8002d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_Delay+0x44>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4413      	add	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d8a:	bf00      	nop
 8002d8c:	f7ff ffde 	bl	8002d4c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d8f7      	bhi.n	8002d8c <HAL_Delay+0x28>
  {
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	2000001c 	.word	0x2000001c

08002dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <__NVIC_SetPriorityGrouping+0x40>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dc8:	4013      	ands	r3, r2
 8002dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dda:	4a04      	ldr	r2, [pc, #16]	; (8002dec <__NVIC_SetPriorityGrouping+0x40>)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	60d3      	str	r3, [r2, #12]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000ed00 	.word	0xe000ed00
 8002df0:	05fa0000 	.word	0x05fa0000

08002df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df8:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <__NVIC_GetPriorityGrouping+0x18>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	0a1b      	lsrs	r3, r3, #8
 8002dfe:	f003 0307 	and.w	r3, r3, #7
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	db0b      	blt.n	8002e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	f003 021f 	and.w	r2, r3, #31
 8002e28:	4907      	ldr	r1, [pc, #28]	; (8002e48 <__NVIC_EnableIRQ+0x38>)
 8002e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	2001      	movs	r0, #1
 8002e32:	fa00 f202 	lsl.w	r2, r0, r2
 8002e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	e000e100 	.word	0xe000e100

08002e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	6039      	str	r1, [r7, #0]
 8002e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	db0a      	blt.n	8002e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	490c      	ldr	r1, [pc, #48]	; (8002e98 <__NVIC_SetPriority+0x4c>)
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	0112      	lsls	r2, r2, #4
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	440b      	add	r3, r1
 8002e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e74:	e00a      	b.n	8002e8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	4908      	ldr	r1, [pc, #32]	; (8002e9c <__NVIC_SetPriority+0x50>)
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	3b04      	subs	r3, #4
 8002e84:	0112      	lsls	r2, r2, #4
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	440b      	add	r3, r1
 8002e8a:	761a      	strb	r2, [r3, #24]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	e000e100 	.word	0xe000e100
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b089      	sub	sp, #36	; 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f1c3 0307 	rsb	r3, r3, #7
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	bf28      	it	cs
 8002ebe:	2304      	movcs	r3, #4
 8002ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	2b06      	cmp	r3, #6
 8002ec8:	d902      	bls.n	8002ed0 <NVIC_EncodePriority+0x30>
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3b03      	subs	r3, #3
 8002ece:	e000      	b.n	8002ed2 <NVIC_EncodePriority+0x32>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	43d9      	mvns	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef8:	4313      	orrs	r3, r2
         );
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3724      	adds	r7, #36	; 0x24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f18:	d301      	bcc.n	8002f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e00f      	b.n	8002f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <SysTick_Config+0x40>)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f26:	210f      	movs	r1, #15
 8002f28:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2c:	f7ff ff8e 	bl	8002e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f30:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <SysTick_Config+0x40>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f36:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <SysTick_Config+0x40>)
 8002f38:	2207      	movs	r2, #7
 8002f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	e000e010 	.word	0xe000e010

08002f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff ff29 	bl	8002dac <__NVIC_SetPriorityGrouping>
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b086      	sub	sp, #24
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	4603      	mov	r3, r0
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f74:	f7ff ff3e 	bl	8002df4 <__NVIC_GetPriorityGrouping>
 8002f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68b9      	ldr	r1, [r7, #8]
 8002f7e:	6978      	ldr	r0, [r7, #20]
 8002f80:	f7ff ff8e 	bl	8002ea0 <NVIC_EncodePriority>
 8002f84:	4602      	mov	r2, r0
 8002f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff5d 	bl	8002e4c <__NVIC_SetPriority>
}
 8002f92:	bf00      	nop
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff31 	bl	8002e10 <__NVIC_EnableIRQ>
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7ff ffa2 	bl	8002f08 <SysTick_Config>
 8002fc4:	4603      	mov	r3, r0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fda:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fdc:	f7ff feb6 	bl	8002d4c <HAL_GetTick>
 8002fe0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d008      	beq.n	8003000 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2280      	movs	r2, #128	; 0x80
 8002ff2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e052      	b.n	80030a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0216 	bic.w	r2, r2, #22
 800300e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800301e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	2b00      	cmp	r3, #0
 8003026:	d103      	bne.n	8003030 <HAL_DMA_Abort+0x62>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800302c:	2b00      	cmp	r3, #0
 800302e:	d007      	beq.n	8003040 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0208 	bic.w	r2, r2, #8
 800303e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003050:	e013      	b.n	800307a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003052:	f7ff fe7b 	bl	8002d4c <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b05      	cmp	r3, #5
 800305e:	d90c      	bls.n	800307a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2203      	movs	r2, #3
 800306a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e015      	b.n	80030a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e4      	bne.n	8003052 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308c:	223f      	movs	r2, #63	; 0x3f
 800308e:	409a      	lsls	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d004      	beq.n	80030cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2280      	movs	r2, #128	; 0x80
 80030c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e00c      	b.n	80030e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2205      	movs	r2, #5
 80030d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0201 	bic.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b089      	sub	sp, #36	; 0x24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003106:	2300      	movs	r3, #0
 8003108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800310a:	2300      	movs	r3, #0
 800310c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	e175      	b.n	8003400 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003114:	2201      	movs	r2, #1
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	4013      	ands	r3, r2
 8003126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	429a      	cmp	r2, r3
 800312e:	f040 8164 	bne.w	80033fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	2b01      	cmp	r3, #1
 800313c:	d005      	beq.n	800314a <HAL_GPIO_Init+0x56>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d130      	bne.n	80031ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	2203      	movs	r2, #3
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4013      	ands	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4313      	orrs	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003180:	2201      	movs	r2, #1
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	f003 0201 	and.w	r2, r3, #1
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d017      	beq.n	80031e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	2203      	movs	r2, #3
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d123      	bne.n	800323c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	08da      	lsrs	r2, r3, #3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3208      	adds	r2, #8
 80031fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	220f      	movs	r2, #15
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	08da      	lsrs	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3208      	adds	r2, #8
 8003236:	69b9      	ldr	r1, [r7, #24]
 8003238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	2203      	movs	r2, #3
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 0203 	and.w	r2, r3, #3
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 80be 	beq.w	80033fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327e:	4b66      	ldr	r3, [pc, #408]	; (8003418 <HAL_GPIO_Init+0x324>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	4a65      	ldr	r2, [pc, #404]	; (8003418 <HAL_GPIO_Init+0x324>)
 8003284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003288:	6453      	str	r3, [r2, #68]	; 0x44
 800328a:	4b63      	ldr	r3, [pc, #396]	; (8003418 <HAL_GPIO_Init+0x324>)
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003296:	4a61      	ldr	r2, [pc, #388]	; (800341c <HAL_GPIO_Init+0x328>)
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	089b      	lsrs	r3, r3, #2
 800329c:	3302      	adds	r3, #2
 800329e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	220f      	movs	r2, #15
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a58      	ldr	r2, [pc, #352]	; (8003420 <HAL_GPIO_Init+0x32c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d037      	beq.n	8003332 <HAL_GPIO_Init+0x23e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a57      	ldr	r2, [pc, #348]	; (8003424 <HAL_GPIO_Init+0x330>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d031      	beq.n	800332e <HAL_GPIO_Init+0x23a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a56      	ldr	r2, [pc, #344]	; (8003428 <HAL_GPIO_Init+0x334>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d02b      	beq.n	800332a <HAL_GPIO_Init+0x236>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a55      	ldr	r2, [pc, #340]	; (800342c <HAL_GPIO_Init+0x338>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d025      	beq.n	8003326 <HAL_GPIO_Init+0x232>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a54      	ldr	r2, [pc, #336]	; (8003430 <HAL_GPIO_Init+0x33c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01f      	beq.n	8003322 <HAL_GPIO_Init+0x22e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a53      	ldr	r2, [pc, #332]	; (8003434 <HAL_GPIO_Init+0x340>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d019      	beq.n	800331e <HAL_GPIO_Init+0x22a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a52      	ldr	r2, [pc, #328]	; (8003438 <HAL_GPIO_Init+0x344>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <HAL_GPIO_Init+0x226>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a51      	ldr	r2, [pc, #324]	; (800343c <HAL_GPIO_Init+0x348>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00d      	beq.n	8003316 <HAL_GPIO_Init+0x222>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a50      	ldr	r2, [pc, #320]	; (8003440 <HAL_GPIO_Init+0x34c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d007      	beq.n	8003312 <HAL_GPIO_Init+0x21e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a4f      	ldr	r2, [pc, #316]	; (8003444 <HAL_GPIO_Init+0x350>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d101      	bne.n	800330e <HAL_GPIO_Init+0x21a>
 800330a:	2309      	movs	r3, #9
 800330c:	e012      	b.n	8003334 <HAL_GPIO_Init+0x240>
 800330e:	230a      	movs	r3, #10
 8003310:	e010      	b.n	8003334 <HAL_GPIO_Init+0x240>
 8003312:	2308      	movs	r3, #8
 8003314:	e00e      	b.n	8003334 <HAL_GPIO_Init+0x240>
 8003316:	2307      	movs	r3, #7
 8003318:	e00c      	b.n	8003334 <HAL_GPIO_Init+0x240>
 800331a:	2306      	movs	r3, #6
 800331c:	e00a      	b.n	8003334 <HAL_GPIO_Init+0x240>
 800331e:	2305      	movs	r3, #5
 8003320:	e008      	b.n	8003334 <HAL_GPIO_Init+0x240>
 8003322:	2304      	movs	r3, #4
 8003324:	e006      	b.n	8003334 <HAL_GPIO_Init+0x240>
 8003326:	2303      	movs	r3, #3
 8003328:	e004      	b.n	8003334 <HAL_GPIO_Init+0x240>
 800332a:	2302      	movs	r3, #2
 800332c:	e002      	b.n	8003334 <HAL_GPIO_Init+0x240>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <HAL_GPIO_Init+0x240>
 8003332:	2300      	movs	r3, #0
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	f002 0203 	and.w	r2, r2, #3
 800333a:	0092      	lsls	r2, r2, #2
 800333c:	4093      	lsls	r3, r2
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4313      	orrs	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003344:	4935      	ldr	r1, [pc, #212]	; (800341c <HAL_GPIO_Init+0x328>)
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	089b      	lsrs	r3, r3, #2
 800334a:	3302      	adds	r3, #2
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003352:	4b3d      	ldr	r3, [pc, #244]	; (8003448 <HAL_GPIO_Init+0x354>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003376:	4a34      	ldr	r2, [pc, #208]	; (8003448 <HAL_GPIO_Init+0x354>)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800337c:	4b32      	ldr	r3, [pc, #200]	; (8003448 <HAL_GPIO_Init+0x354>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	43db      	mvns	r3, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4013      	ands	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033a0:	4a29      	ldr	r2, [pc, #164]	; (8003448 <HAL_GPIO_Init+0x354>)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033a6:	4b28      	ldr	r3, [pc, #160]	; (8003448 <HAL_GPIO_Init+0x354>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033ca:	4a1f      	ldr	r2, [pc, #124]	; (8003448 <HAL_GPIO_Init+0x354>)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033d0:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_GPIO_Init+0x354>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033f4:	4a14      	ldr	r2, [pc, #80]	; (8003448 <HAL_GPIO_Init+0x354>)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	3301      	adds	r3, #1
 80033fe:	61fb      	str	r3, [r7, #28]
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	2b0f      	cmp	r3, #15
 8003404:	f67f ae86 	bls.w	8003114 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003408:	bf00      	nop
 800340a:	bf00      	nop
 800340c:	3724      	adds	r7, #36	; 0x24
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800
 800341c:	40013800 	.word	0x40013800
 8003420:	40020000 	.word	0x40020000
 8003424:	40020400 	.word	0x40020400
 8003428:	40020800 	.word	0x40020800
 800342c:	40020c00 	.word	0x40020c00
 8003430:	40021000 	.word	0x40021000
 8003434:	40021400 	.word	0x40021400
 8003438:	40021800 	.word	0x40021800
 800343c:	40021c00 	.word	0x40021c00
 8003440:	40022000 	.word	0x40022000
 8003444:	40022400 	.word	0x40022400
 8003448:	40013c00 	.word	0x40013c00

0800344c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	807b      	strh	r3, [r7, #2]
 8003458:	4613      	mov	r3, r2
 800345a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800345c:	787b      	ldrb	r3, [r7, #1]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003462:	887a      	ldrh	r2, [r7, #2]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003468:	e003      	b.n	8003472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800346a:	887b      	ldrh	r3, [r7, #2]
 800346c:	041a      	lsls	r2, r3, #16
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	619a      	str	r2, [r3, #24]
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e07f      	b.n	8003592 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff f8ca 	bl	8002640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2224      	movs	r2, #36	; 0x24
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0201 	bic.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d107      	bne.n	80034fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034f6:	609a      	str	r2, [r3, #8]
 80034f8:	e006      	b.n	8003508 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003506:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	2b02      	cmp	r3, #2
 800350e:	d104      	bne.n	800351a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003518:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6859      	ldr	r1, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4b1d      	ldr	r3, [pc, #116]	; (800359c <HAL_I2C_Init+0x11c>)
 8003526:	430b      	orrs	r3, r1
 8003528:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003538:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69d9      	ldr	r1, [r3, #28]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1a      	ldr	r2, [r3, #32]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	02008000 	.word	0x02008000

080035a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	4608      	mov	r0, r1
 80035aa:	4611      	mov	r1, r2
 80035ac:	461a      	mov	r2, r3
 80035ae:	4603      	mov	r3, r0
 80035b0:	817b      	strh	r3, [r7, #10]
 80035b2:	460b      	mov	r3, r1
 80035b4:	813b      	strh	r3, [r7, #8]
 80035b6:	4613      	mov	r3, r2
 80035b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	f040 80f9 	bne.w	80037ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_I2C_Mem_Write+0x34>
 80035ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d105      	bne.n	80035e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0ed      	b.n	80037bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_I2C_Mem_Write+0x4e>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e0e6      	b.n	80037bc <HAL_I2C_Mem_Write+0x21c>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035f6:	f7ff fba9 	bl	8002d4c <HAL_GetTick>
 80035fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	2319      	movs	r3, #25
 8003602:	2201      	movs	r2, #1
 8003604:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 fac3 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0d1      	b.n	80037bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2221      	movs	r2, #33	; 0x21
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2240      	movs	r2, #64	; 0x40
 8003624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a3a      	ldr	r2, [r7, #32]
 8003632:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003638:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003640:	88f8      	ldrh	r0, [r7, #6]
 8003642:	893a      	ldrh	r2, [r7, #8]
 8003644:	8979      	ldrh	r1, [r7, #10]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	4603      	mov	r3, r0
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f9d3 	bl	80039fc <I2C_RequestMemoryWrite>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0a9      	b.n	80037bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	2bff      	cmp	r3, #255	; 0xff
 8003670:	d90e      	bls.n	8003690 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	22ff      	movs	r2, #255	; 0xff
 8003676:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367c:	b2da      	uxtb	r2, r3
 800367e:	8979      	ldrh	r1, [r7, #10]
 8003680:	2300      	movs	r3, #0
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 fc1f 	bl	8003ecc <I2C_TransferConfig>
 800368e:	e00f      	b.n	80036b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	8979      	ldrh	r1, [r7, #10]
 80036a2:	2300      	movs	r3, #0
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 fc0e 	bl	8003ecc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 faad 	bl	8003c14 <I2C_WaitOnTXISFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e07b      	b.n	80037bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	781a      	ldrb	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d034      	beq.n	8003768 <HAL_I2C_Mem_Write+0x1c8>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003702:	2b00      	cmp	r3, #0
 8003704:	d130      	bne.n	8003768 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370c:	2200      	movs	r2, #0
 800370e:	2180      	movs	r1, #128	; 0x80
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 fa3f 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e04d      	b.n	80037bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003724:	b29b      	uxth	r3, r3
 8003726:	2bff      	cmp	r3, #255	; 0xff
 8003728:	d90e      	bls.n	8003748 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	22ff      	movs	r2, #255	; 0xff
 800372e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003734:	b2da      	uxtb	r2, r3
 8003736:	8979      	ldrh	r1, [r7, #10]
 8003738:	2300      	movs	r3, #0
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 fbc3 	bl	8003ecc <I2C_TransferConfig>
 8003746:	e00f      	b.n	8003768 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003756:	b2da      	uxtb	r2, r3
 8003758:	8979      	ldrh	r1, [r7, #10]
 800375a:	2300      	movs	r3, #0
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 fbb2 	bl	8003ecc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d19e      	bne.n	80036b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 fa8c 	bl	8003c94 <I2C_WaitOnSTOPFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e01a      	b.n	80037bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2220      	movs	r2, #32
 800378c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6859      	ldr	r1, [r3, #4]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <HAL_I2C_Mem_Write+0x224>)
 800379a:	400b      	ands	r3, r1
 800379c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e000      	b.n	80037bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80037ba:	2302      	movs	r3, #2
  }
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	fe00e800 	.word	0xfe00e800

080037c8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	4608      	mov	r0, r1
 80037d2:	4611      	mov	r1, r2
 80037d4:	461a      	mov	r2, r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	817b      	strh	r3, [r7, #10]
 80037da:	460b      	mov	r3, r1
 80037dc:	813b      	strh	r3, [r7, #8]
 80037de:	4613      	mov	r3, r2
 80037e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	f040 80fd 	bne.w	80039ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <HAL_I2C_Mem_Read+0x34>
 80037f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d105      	bne.n	8003808 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003802:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0f1      	b.n	80039ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_I2C_Mem_Read+0x4e>
 8003812:	2302      	movs	r3, #2
 8003814:	e0ea      	b.n	80039ec <HAL_I2C_Mem_Read+0x224>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800381e:	f7ff fa95 	bl	8002d4c <HAL_GetTick>
 8003822:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	2319      	movs	r3, #25
 800382a:	2201      	movs	r2, #1
 800382c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f9af 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0d5      	b.n	80039ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2222      	movs	r2, #34	; 0x22
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2240      	movs	r2, #64	; 0x40
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a3a      	ldr	r2, [r7, #32]
 800385a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003860:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003868:	88f8      	ldrh	r0, [r7, #6]
 800386a:	893a      	ldrh	r2, [r7, #8]
 800386c:	8979      	ldrh	r1, [r7, #10]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	4603      	mov	r3, r0
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f913 	bl	8003aa4 <I2C_RequestMemoryRead>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0ad      	b.n	80039ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	2bff      	cmp	r3, #255	; 0xff
 8003898:	d90e      	bls.n	80038b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	22ff      	movs	r2, #255	; 0xff
 800389e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	8979      	ldrh	r1, [r7, #10]
 80038a8:	4b52      	ldr	r3, [pc, #328]	; (80039f4 <HAL_I2C_Mem_Read+0x22c>)
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 fb0b 	bl	8003ecc <I2C_TransferConfig>
 80038b6:	e00f      	b.n	80038d8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	8979      	ldrh	r1, [r7, #10]
 80038ca:	4b4a      	ldr	r3, [pc, #296]	; (80039f4 <HAL_I2C_Mem_Read+0x22c>)
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 fafa 	bl	8003ecc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	2200      	movs	r2, #0
 80038e0:	2104      	movs	r1, #4
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f956 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e07c      	b.n	80039ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d034      	beq.n	8003998 <HAL_I2C_Mem_Read+0x1d0>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003932:	2b00      	cmp	r3, #0
 8003934:	d130      	bne.n	8003998 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	2200      	movs	r2, #0
 800393e:	2180      	movs	r1, #128	; 0x80
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f927 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e04d      	b.n	80039ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	2bff      	cmp	r3, #255	; 0xff
 8003958:	d90e      	bls.n	8003978 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	22ff      	movs	r2, #255	; 0xff
 800395e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003964:	b2da      	uxtb	r2, r3
 8003966:	8979      	ldrh	r1, [r7, #10]
 8003968:	2300      	movs	r3, #0
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 faab 	bl	8003ecc <I2C_TransferConfig>
 8003976:	e00f      	b.n	8003998 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003986:	b2da      	uxtb	r2, r3
 8003988:	8979      	ldrh	r1, [r7, #10]
 800398a:	2300      	movs	r3, #0
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fa9a 	bl	8003ecc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d19a      	bne.n	80038d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f974 	bl	8003c94 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e01a      	b.n	80039ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2220      	movs	r2, #32
 80039bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6859      	ldr	r1, [r3, #4]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_I2C_Mem_Read+0x230>)
 80039ca:	400b      	ands	r3, r1
 80039cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e000      	b.n	80039ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80039ea:	2302      	movs	r3, #2
  }
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	80002400 	.word	0x80002400
 80039f8:	fe00e800 	.word	0xfe00e800

080039fc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	4608      	mov	r0, r1
 8003a06:	4611      	mov	r1, r2
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	817b      	strh	r3, [r7, #10]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	813b      	strh	r3, [r7, #8]
 8003a12:	4613      	mov	r3, r2
 8003a14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	8979      	ldrh	r1, [r7, #10]
 8003a1c:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <I2C_RequestMemoryWrite+0xa4>)
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 fa51 	bl	8003ecc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a2a:	69fa      	ldr	r2, [r7, #28]
 8003a2c:	69b9      	ldr	r1, [r7, #24]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f8f0 	bl	8003c14 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e02c      	b.n	8003a98 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a3e:	88fb      	ldrh	r3, [r7, #6]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d105      	bne.n	8003a50 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a44:	893b      	ldrh	r3, [r7, #8]
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	629a      	str	r2, [r3, #40]	; 0x28
 8003a4e:	e015      	b.n	8003a7c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a50:	893b      	ldrh	r3, [r7, #8]
 8003a52:	0a1b      	lsrs	r3, r3, #8
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a5e:	69fa      	ldr	r2, [r7, #28]
 8003a60:	69b9      	ldr	r1, [r7, #24]
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f8d6 	bl	8003c14 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e012      	b.n	8003a98 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a72:	893b      	ldrh	r3, [r7, #8]
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	2200      	movs	r2, #0
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f884 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	80002000 	.word	0x80002000

08003aa4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	4608      	mov	r0, r1
 8003aae:	4611      	mov	r1, r2
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	817b      	strh	r3, [r7, #10]
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	813b      	strh	r3, [r7, #8]
 8003aba:	4613      	mov	r3, r2
 8003abc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	8979      	ldrh	r1, [r7, #10]
 8003ac4:	4b20      	ldr	r3, [pc, #128]	; (8003b48 <I2C_RequestMemoryRead+0xa4>)
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f9fe 	bl	8003ecc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad0:	69fa      	ldr	r2, [r7, #28]
 8003ad2:	69b9      	ldr	r1, [r7, #24]
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f89d 	bl	8003c14 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e02c      	b.n	8003b3e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d105      	bne.n	8003af6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003aea:	893b      	ldrh	r3, [r7, #8]
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	629a      	str	r2, [r3, #40]	; 0x28
 8003af4:	e015      	b.n	8003b22 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003af6:	893b      	ldrh	r3, [r7, #8]
 8003af8:	0a1b      	lsrs	r3, r3, #8
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	69b9      	ldr	r1, [r7, #24]
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 f883 	bl	8003c14 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e012      	b.n	8003b3e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b18:	893b      	ldrh	r3, [r7, #8]
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	2140      	movs	r1, #64	; 0x40
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f831 	bl	8003b94 <I2C_WaitOnFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	80002000 	.word	0x80002000

08003b4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d103      	bne.n	8003b6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2200      	movs	r2, #0
 8003b68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d007      	beq.n	8003b88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	619a      	str	r2, [r3, #24]
  }
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ba4:	e022      	b.n	8003bec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d01e      	beq.n	8003bec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bae:	f7ff f8cd 	bl	8002d4c <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d302      	bcc.n	8003bc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d113      	bne.n	8003bec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	f043 0220 	orr.w	r2, r3, #32
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e00f      	b.n	8003c0c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2301      	moveq	r3, #1
 8003bfe:	2300      	movne	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d0cd      	beq.n	8003ba6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c20:	e02c      	b.n	8003c7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 f870 	bl	8003d0c <I2C_IsErrorOccurred>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e02a      	b.n	8003c8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3c:	d01e      	beq.n	8003c7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3e:	f7ff f885 	bl	8002d4c <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d302      	bcc.n	8003c54 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d113      	bne.n	8003c7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	f043 0220 	orr.w	r2, r3, #32
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e007      	b.n	8003c8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d1cb      	bne.n	8003c22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ca0:	e028      	b.n	8003cf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f830 	bl	8003d0c <I2C_IsErrorOccurred>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e026      	b.n	8003d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb6:	f7ff f849 	bl	8002d4c <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d302      	bcc.n	8003ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d113      	bne.n	8003cf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd0:	f043 0220 	orr.w	r2, r3, #32
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e007      	b.n	8003d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	d1cf      	bne.n	8003ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08a      	sub	sp, #40	; 0x28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	f003 0310 	and.w	r3, r3, #16
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d068      	beq.n	8003e0a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2210      	movs	r2, #16
 8003d3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d40:	e049      	b.n	8003dd6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d045      	beq.n	8003dd6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d4a:	f7fe ffff 	bl	8002d4c <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d302      	bcc.n	8003d60 <I2C_IsErrorOccurred+0x54>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d13a      	bne.n	8003dd6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d82:	d121      	bne.n	8003dc8 <I2C_IsErrorOccurred+0xbc>
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d8a:	d01d      	beq.n	8003dc8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003d8c:	7cfb      	ldrb	r3, [r7, #19]
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d01a      	beq.n	8003dc8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003da0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003da2:	f7fe ffd3 	bl	8002d4c <HAL_GetTick>
 8003da6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003da8:	e00e      	b.n	8003dc8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003daa:	f7fe ffcf 	bl	8002d4c <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b19      	cmp	r3, #25
 8003db6:	d907      	bls.n	8003dc8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	f043 0320 	orr.w	r3, r3, #32
 8003dbe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003dc6:	e006      	b.n	8003dd6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d1e9      	bne.n	8003daa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d003      	beq.n	8003dec <I2C_IsErrorOccurred+0xe0>
 8003de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0aa      	beq.n	8003d42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003dec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d103      	bne.n	8003dfc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	f043 0304 	orr.w	r3, r3, #4
 8003e02:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00b      	beq.n	8003e34 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00b      	beq.n	8003e56 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	f043 0308 	orr.w	r3, r3, #8
 8003e44:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00b      	beq.n	8003e78 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	f043 0302 	orr.w	r3, r3, #2
 8003e66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01c      	beq.n	8003eba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7ff fe63 	bl	8003b4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6859      	ldr	r1, [r3, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4b0d      	ldr	r3, [pc, #52]	; (8003ec8 <I2C_IsErrorOccurred+0x1bc>)
 8003e92:	400b      	ands	r3, r1
 8003e94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003eba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3728      	adds	r7, #40	; 0x28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	fe00e800 	.word	0xfe00e800

08003ecc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	607b      	str	r3, [r7, #4]
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	817b      	strh	r3, [r7, #10]
 8003eda:	4613      	mov	r3, r2
 8003edc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ede:	897b      	ldrh	r3, [r7, #10]
 8003ee0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ee4:	7a7b      	ldrb	r3, [r7, #9]
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003efa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	0d5b      	lsrs	r3, r3, #21
 8003f06:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <I2C_TransferConfig+0x60>)
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	ea02 0103 	and.w	r1, r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	03ff63ff 	.word	0x03ff63ff

08003f30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	d138      	bne.n	8003fb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e032      	b.n	8003fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2224      	movs	r2, #36	; 0x24
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0201 	bic.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6819      	ldr	r1, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e000      	b.n	8003fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fb8:	2302      	movs	r3, #2
  }
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b085      	sub	sp, #20
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d139      	bne.n	8004050 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e033      	b.n	8004052 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2224      	movs	r2, #36	; 0x24
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0201 	bic.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004018:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	e000      	b.n	8004052 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004050:	2302      	movs	r3, #2
  }
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800405e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004060:	b08f      	sub	sp, #60	; 0x3c
 8004062:	af0a      	add	r7, sp, #40	; 0x28
 8004064:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e116      	b.n	800429e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fe fc54 	bl	8002938 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2203      	movs	r2, #3
 8004094:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d102      	bne.n	80040aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f003 ff3e 	bl	8007f30 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	603b      	str	r3, [r7, #0]
 80040ba:	687e      	ldr	r6, [r7, #4]
 80040bc:	466d      	mov	r5, sp
 80040be:	f106 0410 	add.w	r4, r6, #16
 80040c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80040d2:	1d33      	adds	r3, r6, #4
 80040d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040d6:	6838      	ldr	r0, [r7, #0]
 80040d8:	f003 fed2 	bl	8007e80 <USB_CoreInit>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d005      	beq.n	80040ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2202      	movs	r2, #2
 80040e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e0d7      	b.n	800429e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2100      	movs	r1, #0
 80040f4:	4618      	mov	r0, r3
 80040f6:	f003 ff2c 	bl	8007f52 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040fa:	2300      	movs	r3, #0
 80040fc:	73fb      	strb	r3, [r7, #15]
 80040fe:	e04a      	b.n	8004196 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004100:	7bfa      	ldrb	r2, [r7, #15]
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	333d      	adds	r3, #61	; 0x3d
 8004110:	2201      	movs	r2, #1
 8004112:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004114:	7bfa      	ldrb	r2, [r7, #15]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	333c      	adds	r3, #60	; 0x3c
 8004124:	7bfa      	ldrb	r2, [r7, #15]
 8004126:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004128:	7bfa      	ldrb	r2, [r7, #15]
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	b298      	uxth	r0, r3
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	3344      	adds	r3, #68	; 0x44
 800413c:	4602      	mov	r2, r0
 800413e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004140:	7bfa      	ldrb	r2, [r7, #15]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	4413      	add	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	3340      	adds	r3, #64	; 0x40
 8004150:	2200      	movs	r2, #0
 8004152:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004154:	7bfa      	ldrb	r2, [r7, #15]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	3348      	adds	r3, #72	; 0x48
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004168:	7bfa      	ldrb	r2, [r7, #15]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	334c      	adds	r3, #76	; 0x4c
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800417c:	7bfa      	ldrb	r2, [r7, #15]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	3354      	adds	r3, #84	; 0x54
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	3301      	adds	r3, #1
 8004194:	73fb      	strb	r3, [r7, #15]
 8004196:	7bfa      	ldrb	r2, [r7, #15]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	429a      	cmp	r2, r3
 800419e:	d3af      	bcc.n	8004100 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041a0:	2300      	movs	r3, #0
 80041a2:	73fb      	strb	r3, [r7, #15]
 80041a4:	e044      	b.n	8004230 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041a6:	7bfa      	ldrb	r2, [r7, #15]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80041b8:	2200      	movs	r2, #0
 80041ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041bc:	7bfa      	ldrb	r2, [r7, #15]
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80041ce:	7bfa      	ldrb	r2, [r7, #15]
 80041d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041d2:	7bfa      	ldrb	r2, [r7, #15]
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	4613      	mov	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041e8:	7bfa      	ldrb	r2, [r7, #15]
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041fe:	7bfa      	ldrb	r2, [r7, #15]
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	4613      	mov	r3, r2
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	4413      	add	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	440b      	add	r3, r1
 800420c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004214:	7bfa      	ldrb	r2, [r7, #15]
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	4613      	mov	r3, r2
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800422a:	7bfb      	ldrb	r3, [r7, #15]
 800422c:	3301      	adds	r3, #1
 800422e:	73fb      	strb	r3, [r7, #15]
 8004230:	7bfa      	ldrb	r2, [r7, #15]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	429a      	cmp	r2, r3
 8004238:	d3b5      	bcc.n	80041a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	687e      	ldr	r6, [r7, #4]
 8004242:	466d      	mov	r5, sp
 8004244:	f106 0410 	add.w	r4, r6, #16
 8004248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800424a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800424c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800424e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004250:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004254:	e885 0003 	stmia.w	r5, {r0, r1}
 8004258:	1d33      	adds	r3, r6, #4
 800425a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800425c:	6838      	ldr	r0, [r7, #0]
 800425e:	f003 fec5 	bl	8007fec <USB_DevInit>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e014      	b.n	800429e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	2b01      	cmp	r3, #1
 800428a:	d102      	bne.n	8004292 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f80b 	bl	80042a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f004 f883 	bl	80083a2 <USB_DevDisconnect>

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080042a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042d6:	4b05      	ldr	r3, [pc, #20]	; (80042ec <HAL_PCDEx_ActivateLPM+0x44>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	10000003 	.word	0x10000003

080042f0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a04      	ldr	r2, [pc, #16]	; (800430c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fe:	6013      	str	r3, [r2, #0]
}
 8004300:	bf00      	nop
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40007000 	.word	0x40007000

08004310 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004318:	2300      	movs	r3, #0
 800431a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e291      	b.n	800484a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 8087 	beq.w	8004442 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004334:	4b96      	ldr	r3, [pc, #600]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 030c 	and.w	r3, r3, #12
 800433c:	2b04      	cmp	r3, #4
 800433e:	d00c      	beq.n	800435a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004340:	4b93      	ldr	r3, [pc, #588]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 030c 	and.w	r3, r3, #12
 8004348:	2b08      	cmp	r3, #8
 800434a:	d112      	bne.n	8004372 <HAL_RCC_OscConfig+0x62>
 800434c:	4b90      	ldr	r3, [pc, #576]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004354:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004358:	d10b      	bne.n	8004372 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800435a:	4b8d      	ldr	r3, [pc, #564]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d06c      	beq.n	8004440 <HAL_RCC_OscConfig+0x130>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d168      	bne.n	8004440 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e26b      	b.n	800484a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800437a:	d106      	bne.n	800438a <HAL_RCC_OscConfig+0x7a>
 800437c:	4b84      	ldr	r3, [pc, #528]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a83      	ldr	r2, [pc, #524]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 8004382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	e02e      	b.n	80043e8 <HAL_RCC_OscConfig+0xd8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10c      	bne.n	80043ac <HAL_RCC_OscConfig+0x9c>
 8004392:	4b7f      	ldr	r3, [pc, #508]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a7e      	ldr	r2, [pc, #504]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 8004398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	4b7c      	ldr	r3, [pc, #496]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a7b      	ldr	r2, [pc, #492]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 80043a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e01d      	b.n	80043e8 <HAL_RCC_OscConfig+0xd8>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043b4:	d10c      	bne.n	80043d0 <HAL_RCC_OscConfig+0xc0>
 80043b6:	4b76      	ldr	r3, [pc, #472]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a75      	ldr	r2, [pc, #468]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 80043bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	4b73      	ldr	r3, [pc, #460]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a72      	ldr	r2, [pc, #456]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 80043c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	e00b      	b.n	80043e8 <HAL_RCC_OscConfig+0xd8>
 80043d0:	4b6f      	ldr	r3, [pc, #444]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a6e      	ldr	r2, [pc, #440]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 80043d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	4b6c      	ldr	r3, [pc, #432]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a6b      	ldr	r2, [pc, #428]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 80043e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d013      	beq.n	8004418 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fe fcac 	bl	8002d4c <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f8:	f7fe fca8 	bl	8002d4c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b64      	cmp	r3, #100	; 0x64
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e21f      	b.n	800484a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440a:	4b61      	ldr	r3, [pc, #388]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCC_OscConfig+0xe8>
 8004416:	e014      	b.n	8004442 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004418:	f7fe fc98 	bl	8002d4c <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004420:	f7fe fc94 	bl	8002d4c <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b64      	cmp	r3, #100	; 0x64
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e20b      	b.n	800484a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004432:	4b57      	ldr	r3, [pc, #348]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0x110>
 800443e:	e000      	b.n	8004442 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d069      	beq.n	8004522 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800444e:	4b50      	ldr	r3, [pc, #320]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00b      	beq.n	8004472 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800445a:	4b4d      	ldr	r3, [pc, #308]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 030c 	and.w	r3, r3, #12
 8004462:	2b08      	cmp	r3, #8
 8004464:	d11c      	bne.n	80044a0 <HAL_RCC_OscConfig+0x190>
 8004466:	4b4a      	ldr	r3, [pc, #296]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d116      	bne.n	80044a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004472:	4b47      	ldr	r3, [pc, #284]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <HAL_RCC_OscConfig+0x17a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d001      	beq.n	800448a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e1df      	b.n	800484a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448a:	4b41      	ldr	r3, [pc, #260]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	493d      	ldr	r1, [pc, #244]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 800449a:	4313      	orrs	r3, r2
 800449c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800449e:	e040      	b.n	8004522 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d023      	beq.n	80044f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044a8:	4b39      	ldr	r3, [pc, #228]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a38      	ldr	r2, [pc, #224]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b4:	f7fe fc4a 	bl	8002d4c <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044bc:	f7fe fc46 	bl	8002d4c <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e1bd      	b.n	800484a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ce:	4b30      	ldr	r3, [pc, #192]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044da:	4b2d      	ldr	r3, [pc, #180]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	4929      	ldr	r1, [pc, #164]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	600b      	str	r3, [r1, #0]
 80044ee:	e018      	b.n	8004522 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044f0:	4b27      	ldr	r3, [pc, #156]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a26      	ldr	r2, [pc, #152]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 80044f6:	f023 0301 	bic.w	r3, r3, #1
 80044fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fe fc26 	bl	8002d4c <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004504:	f7fe fc22 	bl	8002d4c <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e199      	b.n	800484a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004516:	4b1e      	ldr	r3, [pc, #120]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d038      	beq.n	80045a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d019      	beq.n	800456a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004536:	4b16      	ldr	r3, [pc, #88]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 8004538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453a:	4a15      	ldr	r2, [pc, #84]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 800453c:	f043 0301 	orr.w	r3, r3, #1
 8004540:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004542:	f7fe fc03 	bl	8002d4c <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800454a:	f7fe fbff 	bl	8002d4c <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e176      	b.n	800484a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 800455e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0f0      	beq.n	800454a <HAL_RCC_OscConfig+0x23a>
 8004568:	e01a      	b.n	80045a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800456a:	4b09      	ldr	r3, [pc, #36]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 800456c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800456e:	4a08      	ldr	r2, [pc, #32]	; (8004590 <HAL_RCC_OscConfig+0x280>)
 8004570:	f023 0301 	bic.w	r3, r3, #1
 8004574:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004576:	f7fe fbe9 	bl	8002d4c <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800457c:	e00a      	b.n	8004594 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800457e:	f7fe fbe5 	bl	8002d4c <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d903      	bls.n	8004594 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e15c      	b.n	800484a <HAL_RCC_OscConfig+0x53a>
 8004590:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004594:	4b91      	ldr	r3, [pc, #580]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 8004596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1ee      	bne.n	800457e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 80a4 	beq.w	80046f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ae:	4b8b      	ldr	r3, [pc, #556]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10d      	bne.n	80045d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ba:	4b88      	ldr	r3, [pc, #544]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	4a87      	ldr	r2, [pc, #540]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 80045c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c4:	6413      	str	r3, [r2, #64]	; 0x40
 80045c6:	4b85      	ldr	r3, [pc, #532]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ce:	60bb      	str	r3, [r7, #8]
 80045d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045d2:	2301      	movs	r3, #1
 80045d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045d6:	4b82      	ldr	r3, [pc, #520]	; (80047e0 <HAL_RCC_OscConfig+0x4d0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d118      	bne.n	8004614 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80045e2:	4b7f      	ldr	r3, [pc, #508]	; (80047e0 <HAL_RCC_OscConfig+0x4d0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a7e      	ldr	r2, [pc, #504]	; (80047e0 <HAL_RCC_OscConfig+0x4d0>)
 80045e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ee:	f7fe fbad 	bl	8002d4c <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f6:	f7fe fba9 	bl	8002d4c <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b64      	cmp	r3, #100	; 0x64
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e120      	b.n	800484a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004608:	4b75      	ldr	r3, [pc, #468]	; (80047e0 <HAL_RCC_OscConfig+0x4d0>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0f0      	beq.n	80045f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d106      	bne.n	800462a <HAL_RCC_OscConfig+0x31a>
 800461c:	4b6f      	ldr	r3, [pc, #444]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 800461e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004620:	4a6e      	ldr	r2, [pc, #440]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 8004622:	f043 0301 	orr.w	r3, r3, #1
 8004626:	6713      	str	r3, [r2, #112]	; 0x70
 8004628:	e02d      	b.n	8004686 <HAL_RCC_OscConfig+0x376>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10c      	bne.n	800464c <HAL_RCC_OscConfig+0x33c>
 8004632:	4b6a      	ldr	r3, [pc, #424]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004636:	4a69      	ldr	r2, [pc, #420]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 8004638:	f023 0301 	bic.w	r3, r3, #1
 800463c:	6713      	str	r3, [r2, #112]	; 0x70
 800463e:	4b67      	ldr	r3, [pc, #412]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004642:	4a66      	ldr	r2, [pc, #408]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 8004644:	f023 0304 	bic.w	r3, r3, #4
 8004648:	6713      	str	r3, [r2, #112]	; 0x70
 800464a:	e01c      	b.n	8004686 <HAL_RCC_OscConfig+0x376>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	2b05      	cmp	r3, #5
 8004652:	d10c      	bne.n	800466e <HAL_RCC_OscConfig+0x35e>
 8004654:	4b61      	ldr	r3, [pc, #388]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 8004656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004658:	4a60      	ldr	r2, [pc, #384]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 800465a:	f043 0304 	orr.w	r3, r3, #4
 800465e:	6713      	str	r3, [r2, #112]	; 0x70
 8004660:	4b5e      	ldr	r3, [pc, #376]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 8004662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004664:	4a5d      	ldr	r2, [pc, #372]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	6713      	str	r3, [r2, #112]	; 0x70
 800466c:	e00b      	b.n	8004686 <HAL_RCC_OscConfig+0x376>
 800466e:	4b5b      	ldr	r3, [pc, #364]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 8004670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004672:	4a5a      	ldr	r2, [pc, #360]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 8004674:	f023 0301 	bic.w	r3, r3, #1
 8004678:	6713      	str	r3, [r2, #112]	; 0x70
 800467a:	4b58      	ldr	r3, [pc, #352]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 800467c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467e:	4a57      	ldr	r2, [pc, #348]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 8004680:	f023 0304 	bic.w	r3, r3, #4
 8004684:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d015      	beq.n	80046ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468e:	f7fe fb5d 	bl	8002d4c <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004694:	e00a      	b.n	80046ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004696:	f7fe fb59 	bl	8002d4c <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e0ce      	b.n	800484a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ac:	4b4b      	ldr	r3, [pc, #300]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0ee      	beq.n	8004696 <HAL_RCC_OscConfig+0x386>
 80046b8:	e014      	b.n	80046e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ba:	f7fe fb47 	bl	8002d4c <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c0:	e00a      	b.n	80046d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c2:	f7fe fb43 	bl	8002d4c <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e0b8      	b.n	800484a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d8:	4b40      	ldr	r3, [pc, #256]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 80046da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1ee      	bne.n	80046c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046e4:	7dfb      	ldrb	r3, [r7, #23]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d105      	bne.n	80046f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ea:	4b3c      	ldr	r3, [pc, #240]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	4a3b      	ldr	r2, [pc, #236]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 80046f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 80a4 	beq.w	8004848 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004700:	4b36      	ldr	r3, [pc, #216]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 030c 	and.w	r3, r3, #12
 8004708:	2b08      	cmp	r3, #8
 800470a:	d06b      	beq.n	80047e4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d149      	bne.n	80047a8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004714:	4b31      	ldr	r3, [pc, #196]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a30      	ldr	r2, [pc, #192]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 800471a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800471e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004720:	f7fe fb14 	bl	8002d4c <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004728:	f7fe fb10 	bl	8002d4c <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e087      	b.n	800484a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473a:	4b28      	ldr	r3, [pc, #160]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1f0      	bne.n	8004728 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69da      	ldr	r2, [r3, #28]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	019b      	lsls	r3, r3, #6
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475c:	085b      	lsrs	r3, r3, #1
 800475e:	3b01      	subs	r3, #1
 8004760:	041b      	lsls	r3, r3, #16
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	061b      	lsls	r3, r3, #24
 800476a:	4313      	orrs	r3, r2
 800476c:	4a1b      	ldr	r2, [pc, #108]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 800476e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004772:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004774:	4b19      	ldr	r3, [pc, #100]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a18      	ldr	r2, [pc, #96]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 800477a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800477e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004780:	f7fe fae4 	bl	8002d4c <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004788:	f7fe fae0 	bl	8002d4c <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e057      	b.n	800484a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800479a:	4b10      	ldr	r3, [pc, #64]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0f0      	beq.n	8004788 <HAL_RCC_OscConfig+0x478>
 80047a6:	e04f      	b.n	8004848 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a8:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a0b      	ldr	r2, [pc, #44]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 80047ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b4:	f7fe faca 	bl	8002d4c <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047bc:	f7fe fac6 	bl	8002d4c <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e03d      	b.n	800484a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ce:	4b03      	ldr	r3, [pc, #12]	; (80047dc <HAL_RCC_OscConfig+0x4cc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0x4ac>
 80047da:	e035      	b.n	8004848 <HAL_RCC_OscConfig+0x538>
 80047dc:	40023800 	.word	0x40023800
 80047e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80047e4:	4b1b      	ldr	r3, [pc, #108]	; (8004854 <HAL_RCC_OscConfig+0x544>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d028      	beq.n	8004844 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d121      	bne.n	8004844 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800480a:	429a      	cmp	r2, r3
 800480c:	d11a      	bne.n	8004844 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004814:	4013      	ands	r3, r2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800481a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800481c:	4293      	cmp	r3, r2
 800481e:	d111      	bne.n	8004844 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	085b      	lsrs	r3, r3, #1
 800482c:	3b01      	subs	r3, #1
 800482e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004830:	429a      	cmp	r2, r3
 8004832:	d107      	bne.n	8004844 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004840:	429a      	cmp	r2, r3
 8004842:	d001      	beq.n	8004848 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40023800 	.word	0x40023800

08004858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0d0      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004870:	4b6a      	ldr	r3, [pc, #424]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d910      	bls.n	80048a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487e:	4b67      	ldr	r3, [pc, #412]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 020f 	bic.w	r2, r3, #15
 8004886:	4965      	ldr	r1, [pc, #404]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	4313      	orrs	r3, r2
 800488c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800488e:	4b63      	ldr	r3, [pc, #396]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0b8      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d020      	beq.n	80048ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048b8:	4b59      	ldr	r3, [pc, #356]	; (8004a20 <HAL_RCC_ClockConfig+0x1c8>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	4a58      	ldr	r2, [pc, #352]	; (8004a20 <HAL_RCC_ClockConfig+0x1c8>)
 80048be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048d0:	4b53      	ldr	r3, [pc, #332]	; (8004a20 <HAL_RCC_ClockConfig+0x1c8>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	4a52      	ldr	r2, [pc, #328]	; (8004a20 <HAL_RCC_ClockConfig+0x1c8>)
 80048d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048dc:	4b50      	ldr	r3, [pc, #320]	; (8004a20 <HAL_RCC_ClockConfig+0x1c8>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	494d      	ldr	r1, [pc, #308]	; (8004a20 <HAL_RCC_ClockConfig+0x1c8>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d040      	beq.n	800497c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d107      	bne.n	8004912 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004902:	4b47      	ldr	r3, [pc, #284]	; (8004a20 <HAL_RCC_ClockConfig+0x1c8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d115      	bne.n	800493a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e07f      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d107      	bne.n	800492a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800491a:	4b41      	ldr	r3, [pc, #260]	; (8004a20 <HAL_RCC_ClockConfig+0x1c8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d109      	bne.n	800493a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e073      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492a:	4b3d      	ldr	r3, [pc, #244]	; (8004a20 <HAL_RCC_ClockConfig+0x1c8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e06b      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800493a:	4b39      	ldr	r3, [pc, #228]	; (8004a20 <HAL_RCC_ClockConfig+0x1c8>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f023 0203 	bic.w	r2, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	4936      	ldr	r1, [pc, #216]	; (8004a20 <HAL_RCC_ClockConfig+0x1c8>)
 8004948:	4313      	orrs	r3, r2
 800494a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494c:	f7fe f9fe 	bl	8002d4c <HAL_GetTick>
 8004950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004952:	e00a      	b.n	800496a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004954:	f7fe f9fa 	bl	8002d4c <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004962:	4293      	cmp	r3, r2
 8004964:	d901      	bls.n	800496a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e053      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496a:	4b2d      	ldr	r3, [pc, #180]	; (8004a20 <HAL_RCC_ClockConfig+0x1c8>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 020c 	and.w	r2, r3, #12
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	429a      	cmp	r2, r3
 800497a:	d1eb      	bne.n	8004954 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800497c:	4b27      	ldr	r3, [pc, #156]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 030f 	and.w	r3, r3, #15
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d210      	bcs.n	80049ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498a:	4b24      	ldr	r3, [pc, #144]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f023 020f 	bic.w	r2, r3, #15
 8004992:	4922      	ldr	r1, [pc, #136]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	4313      	orrs	r3, r2
 8004998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800499a:	4b20      	ldr	r3, [pc, #128]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d001      	beq.n	80049ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e032      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049b8:	4b19      	ldr	r3, [pc, #100]	; (8004a20 <HAL_RCC_ClockConfig+0x1c8>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	4916      	ldr	r1, [pc, #88]	; (8004a20 <HAL_RCC_ClockConfig+0x1c8>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d009      	beq.n	80049ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049d6:	4b12      	ldr	r3, [pc, #72]	; (8004a20 <HAL_RCC_ClockConfig+0x1c8>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	490e      	ldr	r1, [pc, #56]	; (8004a20 <HAL_RCC_ClockConfig+0x1c8>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049ea:	f000 f821 	bl	8004a30 <HAL_RCC_GetSysClockFreq>
 80049ee:	4602      	mov	r2, r0
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <HAL_RCC_ClockConfig+0x1c8>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	091b      	lsrs	r3, r3, #4
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	490a      	ldr	r1, [pc, #40]	; (8004a24 <HAL_RCC_ClockConfig+0x1cc>)
 80049fc:	5ccb      	ldrb	r3, [r1, r3]
 80049fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004a02:	4a09      	ldr	r2, [pc, #36]	; (8004a28 <HAL_RCC_ClockConfig+0x1d0>)
 8004a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a06:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <HAL_RCC_ClockConfig+0x1d4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fe f95a 	bl	8002cc4 <HAL_InitTick>

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40023c00 	.word	0x40023c00
 8004a20:	40023800 	.word	0x40023800
 8004a24:	0800c7b0 	.word	0x0800c7b0
 8004a28:	20000014 	.word	0x20000014
 8004a2c:	20000018 	.word	0x20000018

08004a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a34:	b094      	sub	sp, #80	; 0x50
 8004a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a40:	2300      	movs	r3, #0
 8004a42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a48:	4b79      	ldr	r3, [pc, #484]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 030c 	and.w	r3, r3, #12
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d00d      	beq.n	8004a70 <HAL_RCC_GetSysClockFreq+0x40>
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	f200 80e1 	bhi.w	8004c1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <HAL_RCC_GetSysClockFreq+0x34>
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d003      	beq.n	8004a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a62:	e0db      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a64:	4b73      	ldr	r3, [pc, #460]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a68:	e0db      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a6a:	4b73      	ldr	r3, [pc, #460]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a6e:	e0d8      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a70:	4b6f      	ldr	r3, [pc, #444]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a78:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a7a:	4b6d      	ldr	r3, [pc, #436]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d063      	beq.n	8004b4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a86:	4b6a      	ldr	r3, [pc, #424]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	099b      	lsrs	r3, r3, #6
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a98:	633b      	str	r3, [r7, #48]	; 0x30
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004aa2:	4622      	mov	r2, r4
 8004aa4:	462b      	mov	r3, r5
 8004aa6:	f04f 0000 	mov.w	r0, #0
 8004aaa:	f04f 0100 	mov.w	r1, #0
 8004aae:	0159      	lsls	r1, r3, #5
 8004ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ab4:	0150      	lsls	r0, r2, #5
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4621      	mov	r1, r4
 8004abc:	1a51      	subs	r1, r2, r1
 8004abe:	6139      	str	r1, [r7, #16]
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ad4:	4659      	mov	r1, fp
 8004ad6:	018b      	lsls	r3, r1, #6
 8004ad8:	4651      	mov	r1, sl
 8004ada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ade:	4651      	mov	r1, sl
 8004ae0:	018a      	lsls	r2, r1, #6
 8004ae2:	4651      	mov	r1, sl
 8004ae4:	ebb2 0801 	subs.w	r8, r2, r1
 8004ae8:	4659      	mov	r1, fp
 8004aea:	eb63 0901 	sbc.w	r9, r3, r1
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b02:	4690      	mov	r8, r2
 8004b04:	4699      	mov	r9, r3
 8004b06:	4623      	mov	r3, r4
 8004b08:	eb18 0303 	adds.w	r3, r8, r3
 8004b0c:	60bb      	str	r3, [r7, #8]
 8004b0e:	462b      	mov	r3, r5
 8004b10:	eb49 0303 	adc.w	r3, r9, r3
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b22:	4629      	mov	r1, r5
 8004b24:	024b      	lsls	r3, r1, #9
 8004b26:	4621      	mov	r1, r4
 8004b28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	024a      	lsls	r2, r1, #9
 8004b30:	4610      	mov	r0, r2
 8004b32:	4619      	mov	r1, r3
 8004b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b36:	2200      	movs	r2, #0
 8004b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b40:	f7fc f912 	bl	8000d68 <__aeabi_uldivmod>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4613      	mov	r3, r2
 8004b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b4c:	e058      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b4e:	4b38      	ldr	r3, [pc, #224]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	099b      	lsrs	r3, r3, #6
 8004b54:	2200      	movs	r2, #0
 8004b56:	4618      	mov	r0, r3
 8004b58:	4611      	mov	r1, r2
 8004b5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b5e:	623b      	str	r3, [r7, #32]
 8004b60:	2300      	movs	r3, #0
 8004b62:	627b      	str	r3, [r7, #36]	; 0x24
 8004b64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b68:	4642      	mov	r2, r8
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	f04f 0000 	mov.w	r0, #0
 8004b70:	f04f 0100 	mov.w	r1, #0
 8004b74:	0159      	lsls	r1, r3, #5
 8004b76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b7a:	0150      	lsls	r0, r2, #5
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4641      	mov	r1, r8
 8004b82:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b86:	4649      	mov	r1, r9
 8004b88:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ba0:	ebb2 040a 	subs.w	r4, r2, sl
 8004ba4:	eb63 050b 	sbc.w	r5, r3, fp
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	00eb      	lsls	r3, r5, #3
 8004bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bb6:	00e2      	lsls	r2, r4, #3
 8004bb8:	4614      	mov	r4, r2
 8004bba:	461d      	mov	r5, r3
 8004bbc:	4643      	mov	r3, r8
 8004bbe:	18e3      	adds	r3, r4, r3
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	eb45 0303 	adc.w	r3, r5, r3
 8004bc8:	607b      	str	r3, [r7, #4]
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	028b      	lsls	r3, r1, #10
 8004bda:	4621      	mov	r1, r4
 8004bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004be0:	4621      	mov	r1, r4
 8004be2:	028a      	lsls	r2, r1, #10
 8004be4:	4610      	mov	r0, r2
 8004be6:	4619      	mov	r1, r3
 8004be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bea:	2200      	movs	r2, #0
 8004bec:	61bb      	str	r3, [r7, #24]
 8004bee:	61fa      	str	r2, [r7, #28]
 8004bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bf4:	f7fc f8b8 	bl	8000d68 <__aeabi_uldivmod>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	0c1b      	lsrs	r3, r3, #16
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004c10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c1a:	e002      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3750      	adds	r7, #80	; 0x50
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c2e:	bf00      	nop
 8004c30:	40023800 	.word	0x40023800
 8004c34:	00f42400 	.word	0x00f42400
 8004c38:	007a1200 	.word	0x007a1200

08004c3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c40:	4b03      	ldr	r3, [pc, #12]	; (8004c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c42:	681b      	ldr	r3, [r3, #0]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	20000014 	.word	0x20000014

08004c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c58:	f7ff fff0 	bl	8004c3c <HAL_RCC_GetHCLKFreq>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	0a9b      	lsrs	r3, r3, #10
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	4903      	ldr	r1, [pc, #12]	; (8004c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c6a:	5ccb      	ldrb	r3, [r1, r3]
 8004c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40023800 	.word	0x40023800
 8004c78:	0800c7c0 	.word	0x0800c7c0

08004c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c80:	f7ff ffdc 	bl	8004c3c <HAL_RCC_GetHCLKFreq>
 8004c84:	4602      	mov	r2, r0
 8004c86:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	0b5b      	lsrs	r3, r3, #13
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	4903      	ldr	r1, [pc, #12]	; (8004ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c92:	5ccb      	ldrb	r3, [r1, r3]
 8004c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	0800c7c0 	.word	0x0800c7c0

08004ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d012      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ccc:	4b69      	ldr	r3, [pc, #420]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	4a68      	ldr	r2, [pc, #416]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004cd6:	6093      	str	r3, [r2, #8]
 8004cd8:	4b66      	ldr	r3, [pc, #408]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce0:	4964      	ldr	r1, [pc, #400]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d017      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cfe:	4b5d      	ldr	r3, [pc, #372]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0c:	4959      	ldr	r1, [pc, #356]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d1c:	d101      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d017      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d3a:	4b4e      	ldr	r3, [pc, #312]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	494a      	ldr	r1, [pc, #296]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d58:	d101      	bne.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004d66:	2301      	movs	r3, #1
 8004d68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004d76:	2301      	movs	r3, #1
 8004d78:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 808b 	beq.w	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d88:	4b3a      	ldr	r3, [pc, #232]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	4a39      	ldr	r2, [pc, #228]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d92:	6413      	str	r3, [r2, #64]	; 0x40
 8004d94:	4b37      	ldr	r3, [pc, #220]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d9c:	60bb      	str	r3, [r7, #8]
 8004d9e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004da0:	4b35      	ldr	r3, [pc, #212]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a34      	ldr	r2, [pc, #208]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004daa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dac:	f7fd ffce 	bl	8002d4c <HAL_GetTick>
 8004db0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db4:	f7fd ffca 	bl	8002d4c <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b64      	cmp	r3, #100	; 0x64
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e357      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004dc6:	4b2c      	ldr	r3, [pc, #176]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d0f0      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dd2:	4b28      	ldr	r3, [pc, #160]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dda:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d035      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d02e      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004df0:	4b20      	ldr	r3, [pc, #128]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dfa:	4b1e      	ldr	r3, [pc, #120]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfe:	4a1d      	ldr	r2, [pc, #116]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e04:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e06:	4b1b      	ldr	r3, [pc, #108]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0a:	4a1a      	ldr	r2, [pc, #104]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004e12:	4a18      	ldr	r2, [pc, #96]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e18:	4b16      	ldr	r3, [pc, #88]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d114      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e24:	f7fd ff92 	bl	8002d4c <HAL_GetTick>
 8004e28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e2c:	f7fd ff8e 	bl	8002d4c <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e319      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e42:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0ee      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e5a:	d111      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e68:	4b04      	ldr	r3, [pc, #16]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e6a:	400b      	ands	r3, r1
 8004e6c:	4901      	ldr	r1, [pc, #4]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	608b      	str	r3, [r1, #8]
 8004e72:	e00b      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e74:	40023800 	.word	0x40023800
 8004e78:	40007000 	.word	0x40007000
 8004e7c:	0ffffcff 	.word	0x0ffffcff
 8004e80:	4baa      	ldr	r3, [pc, #680]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	4aa9      	ldr	r2, [pc, #676]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e8a:	6093      	str	r3, [r2, #8]
 8004e8c:	4ba7      	ldr	r3, [pc, #668]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e98:	49a4      	ldr	r1, [pc, #656]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d010      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004eaa:	4ba0      	ldr	r3, [pc, #640]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eb0:	4a9e      	ldr	r2, [pc, #632]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eb6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004eba:	4b9c      	ldr	r3, [pc, #624]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ebc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec4:	4999      	ldr	r1, [pc, #612]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ed8:	4b94      	ldr	r3, [pc, #592]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ede:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee6:	4991      	ldr	r1, [pc, #580]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004efa:	4b8c      	ldr	r3, [pc, #560]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f08:	4988      	ldr	r1, [pc, #544]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f1c:	4b83      	ldr	r3, [pc, #524]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f2a:	4980      	ldr	r1, [pc, #512]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f3e:	4b7b      	ldr	r3, [pc, #492]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4c:	4977      	ldr	r1, [pc, #476]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f60:	4b72      	ldr	r3, [pc, #456]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f66:	f023 0203 	bic.w	r2, r3, #3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6e:	496f      	ldr	r1, [pc, #444]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f82:	4b6a      	ldr	r3, [pc, #424]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f88:	f023 020c 	bic.w	r2, r3, #12
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f90:	4966      	ldr	r1, [pc, #408]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00a      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fa4:	4b61      	ldr	r3, [pc, #388]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004faa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb2:	495e      	ldr	r1, [pc, #376]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fc6:	4b59      	ldr	r3, [pc, #356]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fcc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd4:	4955      	ldr	r1, [pc, #340]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00a      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fe8:	4b50      	ldr	r3, [pc, #320]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff6:	494d      	ldr	r1, [pc, #308]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800500a:	4b48      	ldr	r3, [pc, #288]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800500c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005010:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005018:	4944      	ldr	r1, [pc, #272]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800502c:	4b3f      	ldr	r3, [pc, #252]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005032:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503a:	493c      	ldr	r1, [pc, #240]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800504e:	4b37      	ldr	r3, [pc, #220]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005054:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800505c:	4933      	ldr	r1, [pc, #204]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00a      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005070:	4b2e      	ldr	r3, [pc, #184]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005076:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800507e:	492b      	ldr	r1, [pc, #172]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005080:	4313      	orrs	r3, r2
 8005082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d011      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005092:	4b26      	ldr	r3, [pc, #152]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005098:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050a0:	4922      	ldr	r1, [pc, #136]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050b0:	d101      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80050b2:	2301      	movs	r3, #1
 80050b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80050c2:	2301      	movs	r3, #1
 80050c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050d2:	4b16      	ldr	r3, [pc, #88]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e0:	4912      	ldr	r1, [pc, #72]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00b      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050f4:	4b0d      	ldr	r3, [pc, #52]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005104:	4909      	ldr	r1, [pc, #36]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d006      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 80d9 	beq.w	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005120:	4b02      	ldr	r3, [pc, #8]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a01      	ldr	r2, [pc, #4]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005126:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800512a:	e001      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800512c:	40023800 	.word	0x40023800
 8005130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005132:	f7fd fe0b 	bl	8002d4c <HAL_GetTick>
 8005136:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005138:	e008      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800513a:	f7fd fe07 	bl	8002d4c <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b64      	cmp	r3, #100	; 0x64
 8005146:	d901      	bls.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e194      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800514c:	4b6c      	ldr	r3, [pc, #432]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f0      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d021      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005168:	2b00      	cmp	r3, #0
 800516a:	d11d      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800516c:	4b64      	ldr	r3, [pc, #400]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800516e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005172:	0c1b      	lsrs	r3, r3, #16
 8005174:	f003 0303 	and.w	r3, r3, #3
 8005178:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800517a:	4b61      	ldr	r3, [pc, #388]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800517c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005180:	0e1b      	lsrs	r3, r3, #24
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	019a      	lsls	r2, r3, #6
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	041b      	lsls	r3, r3, #16
 8005192:	431a      	orrs	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	061b      	lsls	r3, r3, #24
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	071b      	lsls	r3, r3, #28
 80051a0:	4957      	ldr	r1, [pc, #348]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d004      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051bc:	d00a      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d02e      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051d2:	d129      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051d4:	4b4a      	ldr	r3, [pc, #296]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051da:	0c1b      	lsrs	r3, r3, #16
 80051dc:	f003 0303 	and.w	r3, r3, #3
 80051e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051e2:	4b47      	ldr	r3, [pc, #284]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e8:	0f1b      	lsrs	r3, r3, #28
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	019a      	lsls	r2, r3, #6
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	041b      	lsls	r3, r3, #16
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	061b      	lsls	r3, r3, #24
 8005202:	431a      	orrs	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	071b      	lsls	r3, r3, #28
 8005208:	493d      	ldr	r1, [pc, #244]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005210:	4b3b      	ldr	r3, [pc, #236]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005216:	f023 021f 	bic.w	r2, r3, #31
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	3b01      	subs	r3, #1
 8005220:	4937      	ldr	r1, [pc, #220]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d01d      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005234:	4b32      	ldr	r3, [pc, #200]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800523a:	0e1b      	lsrs	r3, r3, #24
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005242:	4b2f      	ldr	r3, [pc, #188]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005248:	0f1b      	lsrs	r3, r3, #28
 800524a:	f003 0307 	and.w	r3, r3, #7
 800524e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	019a      	lsls	r2, r3, #6
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	041b      	lsls	r3, r3, #16
 800525c:	431a      	orrs	r2, r3
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	061b      	lsls	r3, r3, #24
 8005262:	431a      	orrs	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	071b      	lsls	r3, r3, #28
 8005268:	4925      	ldr	r1, [pc, #148]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d011      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	019a      	lsls	r2, r3, #6
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	041b      	lsls	r3, r3, #16
 8005288:	431a      	orrs	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	061b      	lsls	r3, r3, #24
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	071b      	lsls	r3, r3, #28
 8005298:	4919      	ldr	r1, [pc, #100]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052a0:	4b17      	ldr	r3, [pc, #92]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a16      	ldr	r2, [pc, #88]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ac:	f7fd fd4e 	bl	8002d4c <HAL_GetTick>
 80052b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052b2:	e008      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052b4:	f7fd fd4a 	bl	8002d4c <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b64      	cmp	r3, #100	; 0x64
 80052c0:	d901      	bls.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e0d7      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052c6:	4b0e      	ldr	r3, [pc, #56]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0f0      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	f040 80cd 	bne.w	8005474 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80052da:	4b09      	ldr	r3, [pc, #36]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a08      	ldr	r2, [pc, #32]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e6:	f7fd fd31 	bl	8002d4c <HAL_GetTick>
 80052ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052ec:	e00a      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052ee:	f7fd fd2d 	bl	8002d4c <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b64      	cmp	r3, #100	; 0x64
 80052fa:	d903      	bls.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e0ba      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005300:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005304:	4b5e      	ldr	r3, [pc, #376]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800530c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005310:	d0ed      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800532e:	2b00      	cmp	r3, #0
 8005330:	d02e      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	2b00      	cmp	r3, #0
 8005338:	d12a      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800533a:	4b51      	ldr	r3, [pc, #324]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005340:	0c1b      	lsrs	r3, r3, #16
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005348:	4b4d      	ldr	r3, [pc, #308]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800534a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534e:	0f1b      	lsrs	r3, r3, #28
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	019a      	lsls	r2, r3, #6
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	041b      	lsls	r3, r3, #16
 8005360:	431a      	orrs	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	061b      	lsls	r3, r3, #24
 8005368:	431a      	orrs	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	071b      	lsls	r3, r3, #28
 800536e:	4944      	ldr	r1, [pc, #272]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005370:	4313      	orrs	r3, r2
 8005372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005376:	4b42      	ldr	r3, [pc, #264]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800537c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005384:	3b01      	subs	r3, #1
 8005386:	021b      	lsls	r3, r3, #8
 8005388:	493d      	ldr	r1, [pc, #244]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d022      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053a4:	d11d      	bne.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053a6:	4b36      	ldr	r3, [pc, #216]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ac:	0e1b      	lsrs	r3, r3, #24
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053b4:	4b32      	ldr	r3, [pc, #200]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ba:	0f1b      	lsrs	r3, r3, #28
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	019a      	lsls	r2, r3, #6
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	041b      	lsls	r3, r3, #16
 80053ce:	431a      	orrs	r2, r3
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	061b      	lsls	r3, r3, #24
 80053d4:	431a      	orrs	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	071b      	lsls	r3, r3, #28
 80053da:	4929      	ldr	r1, [pc, #164]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d028      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053ee:	4b24      	ldr	r3, [pc, #144]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f4:	0e1b      	lsrs	r3, r3, #24
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80053fc:	4b20      	ldr	r3, [pc, #128]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005402:	0c1b      	lsrs	r3, r3, #16
 8005404:	f003 0303 	and.w	r3, r3, #3
 8005408:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	019a      	lsls	r2, r3, #6
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	041b      	lsls	r3, r3, #16
 8005414:	431a      	orrs	r2, r3
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	061b      	lsls	r3, r3, #24
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	071b      	lsls	r3, r3, #28
 8005422:	4917      	ldr	r1, [pc, #92]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005424:	4313      	orrs	r3, r2
 8005426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800542a:	4b15      	ldr	r3, [pc, #84]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800542c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005430:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	4911      	ldr	r1, [pc, #68]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800543a:	4313      	orrs	r3, r2
 800543c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005440:	4b0f      	ldr	r3, [pc, #60]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a0e      	ldr	r2, [pc, #56]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800544a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800544c:	f7fd fc7e 	bl	8002d4c <HAL_GetTick>
 8005450:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005452:	e008      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005454:	f7fd fc7a 	bl	8002d4c <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b64      	cmp	r3, #100	; 0x64
 8005460:	d901      	bls.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e007      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005466:	4b06      	ldr	r3, [pc, #24]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800546e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005472:	d1ef      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3720      	adds	r7, #32
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40023800 	.word	0x40023800

08005484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e049      	b.n	800552a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fd f928 	bl	8002700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3304      	adds	r3, #4
 80054c0:	4619      	mov	r1, r3
 80054c2:	4610      	mov	r0, r2
 80054c4:	f000 fd96 	bl	8005ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b01      	cmp	r3, #1
 8005546:	d001      	beq.n	800554c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e04c      	b.n	80055e6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a26      	ldr	r2, [pc, #152]	; (80055f4 <HAL_TIM_Base_Start+0xc0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d022      	beq.n	80055a4 <HAL_TIM_Base_Start+0x70>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005566:	d01d      	beq.n	80055a4 <HAL_TIM_Base_Start+0x70>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a22      	ldr	r2, [pc, #136]	; (80055f8 <HAL_TIM_Base_Start+0xc4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d018      	beq.n	80055a4 <HAL_TIM_Base_Start+0x70>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a21      	ldr	r2, [pc, #132]	; (80055fc <HAL_TIM_Base_Start+0xc8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d013      	beq.n	80055a4 <HAL_TIM_Base_Start+0x70>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a1f      	ldr	r2, [pc, #124]	; (8005600 <HAL_TIM_Base_Start+0xcc>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00e      	beq.n	80055a4 <HAL_TIM_Base_Start+0x70>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1e      	ldr	r2, [pc, #120]	; (8005604 <HAL_TIM_Base_Start+0xd0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d009      	beq.n	80055a4 <HAL_TIM_Base_Start+0x70>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a1c      	ldr	r2, [pc, #112]	; (8005608 <HAL_TIM_Base_Start+0xd4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d004      	beq.n	80055a4 <HAL_TIM_Base_Start+0x70>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1b      	ldr	r2, [pc, #108]	; (800560c <HAL_TIM_Base_Start+0xd8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d115      	bne.n	80055d0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	4b19      	ldr	r3, [pc, #100]	; (8005610 <HAL_TIM_Base_Start+0xdc>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b06      	cmp	r3, #6
 80055b4:	d015      	beq.n	80055e2 <HAL_TIM_Base_Start+0xae>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055bc:	d011      	beq.n	80055e2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f042 0201 	orr.w	r2, r2, #1
 80055cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ce:	e008      	b.n	80055e2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	e000      	b.n	80055e4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40010000 	.word	0x40010000
 80055f8:	40000400 	.word	0x40000400
 80055fc:	40000800 	.word	0x40000800
 8005600:	40000c00 	.word	0x40000c00
 8005604:	40010400 	.word	0x40010400
 8005608:	40014000 	.word	0x40014000
 800560c:	40001800 	.word	0x40001800
 8005610:	00010007 	.word	0x00010007

08005614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b01      	cmp	r3, #1
 8005626:	d001      	beq.n	800562c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e054      	b.n	80056d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0201 	orr.w	r2, r2, #1
 8005642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a26      	ldr	r2, [pc, #152]	; (80056e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d022      	beq.n	8005694 <HAL_TIM_Base_Start_IT+0x80>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005656:	d01d      	beq.n	8005694 <HAL_TIM_Base_Start_IT+0x80>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a22      	ldr	r2, [pc, #136]	; (80056e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d018      	beq.n	8005694 <HAL_TIM_Base_Start_IT+0x80>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a21      	ldr	r2, [pc, #132]	; (80056ec <HAL_TIM_Base_Start_IT+0xd8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d013      	beq.n	8005694 <HAL_TIM_Base_Start_IT+0x80>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a1f      	ldr	r2, [pc, #124]	; (80056f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d00e      	beq.n	8005694 <HAL_TIM_Base_Start_IT+0x80>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a1e      	ldr	r2, [pc, #120]	; (80056f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d009      	beq.n	8005694 <HAL_TIM_Base_Start_IT+0x80>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a1c      	ldr	r2, [pc, #112]	; (80056f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d004      	beq.n	8005694 <HAL_TIM_Base_Start_IT+0x80>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a1b      	ldr	r2, [pc, #108]	; (80056fc <HAL_TIM_Base_Start_IT+0xe8>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d115      	bne.n	80056c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	4b19      	ldr	r3, [pc, #100]	; (8005700 <HAL_TIM_Base_Start_IT+0xec>)
 800569c:	4013      	ands	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b06      	cmp	r3, #6
 80056a4:	d015      	beq.n	80056d2 <HAL_TIM_Base_Start_IT+0xbe>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ac:	d011      	beq.n	80056d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0201 	orr.w	r2, r2, #1
 80056bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056be:	e008      	b.n	80056d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	e000      	b.n	80056d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40010000 	.word	0x40010000
 80056e8:	40000400 	.word	0x40000400
 80056ec:	40000800 	.word	0x40000800
 80056f0:	40000c00 	.word	0x40000c00
 80056f4:	40010400 	.word	0x40010400
 80056f8:	40014000 	.word	0x40014000
 80056fc:	40001800 	.word	0x40001800
 8005700:	00010007 	.word	0x00010007

08005704 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e049      	b.n	80057aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fd f820 	bl	8002770 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3304      	adds	r3, #4
 8005740:	4619      	mov	r1, r3
 8005742:	4610      	mov	r0, r2
 8005744:	f000 fc56 	bl	8005ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d109      	bne.n	80057d8 <HAL_TIM_PWM_Start+0x24>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	bf14      	ite	ne
 80057d0:	2301      	movne	r3, #1
 80057d2:	2300      	moveq	r3, #0
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	e03c      	b.n	8005852 <HAL_TIM_PWM_Start+0x9e>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2b04      	cmp	r3, #4
 80057dc:	d109      	bne.n	80057f2 <HAL_TIM_PWM_Start+0x3e>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	bf14      	ite	ne
 80057ea:	2301      	movne	r3, #1
 80057ec:	2300      	moveq	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	e02f      	b.n	8005852 <HAL_TIM_PWM_Start+0x9e>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d109      	bne.n	800580c <HAL_TIM_PWM_Start+0x58>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b01      	cmp	r3, #1
 8005802:	bf14      	ite	ne
 8005804:	2301      	movne	r3, #1
 8005806:	2300      	moveq	r3, #0
 8005808:	b2db      	uxtb	r3, r3
 800580a:	e022      	b.n	8005852 <HAL_TIM_PWM_Start+0x9e>
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b0c      	cmp	r3, #12
 8005810:	d109      	bne.n	8005826 <HAL_TIM_PWM_Start+0x72>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b01      	cmp	r3, #1
 800581c:	bf14      	ite	ne
 800581e:	2301      	movne	r3, #1
 8005820:	2300      	moveq	r3, #0
 8005822:	b2db      	uxtb	r3, r3
 8005824:	e015      	b.n	8005852 <HAL_TIM_PWM_Start+0x9e>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b10      	cmp	r3, #16
 800582a:	d109      	bne.n	8005840 <HAL_TIM_PWM_Start+0x8c>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b01      	cmp	r3, #1
 8005836:	bf14      	ite	ne
 8005838:	2301      	movne	r3, #1
 800583a:	2300      	moveq	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	e008      	b.n	8005852 <HAL_TIM_PWM_Start+0x9e>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b01      	cmp	r3, #1
 800584a:	bf14      	ite	ne
 800584c:	2301      	movne	r3, #1
 800584e:	2300      	moveq	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e092      	b.n	8005980 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d104      	bne.n	800586a <HAL_TIM_PWM_Start+0xb6>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005868:	e023      	b.n	80058b2 <HAL_TIM_PWM_Start+0xfe>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b04      	cmp	r3, #4
 800586e:	d104      	bne.n	800587a <HAL_TIM_PWM_Start+0xc6>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005878:	e01b      	b.n	80058b2 <HAL_TIM_PWM_Start+0xfe>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b08      	cmp	r3, #8
 800587e:	d104      	bne.n	800588a <HAL_TIM_PWM_Start+0xd6>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005888:	e013      	b.n	80058b2 <HAL_TIM_PWM_Start+0xfe>
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b0c      	cmp	r3, #12
 800588e:	d104      	bne.n	800589a <HAL_TIM_PWM_Start+0xe6>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005898:	e00b      	b.n	80058b2 <HAL_TIM_PWM_Start+0xfe>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b10      	cmp	r3, #16
 800589e:	d104      	bne.n	80058aa <HAL_TIM_PWM_Start+0xf6>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058a8:	e003      	b.n	80058b2 <HAL_TIM_PWM_Start+0xfe>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2202      	movs	r2, #2
 80058ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2201      	movs	r2, #1
 80058b8:	6839      	ldr	r1, [r7, #0]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 ff32 	bl	8006724 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a30      	ldr	r2, [pc, #192]	; (8005988 <HAL_TIM_PWM_Start+0x1d4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d004      	beq.n	80058d4 <HAL_TIM_PWM_Start+0x120>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a2f      	ldr	r2, [pc, #188]	; (800598c <HAL_TIM_PWM_Start+0x1d8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d101      	bne.n	80058d8 <HAL_TIM_PWM_Start+0x124>
 80058d4:	2301      	movs	r3, #1
 80058d6:	e000      	b.n	80058da <HAL_TIM_PWM_Start+0x126>
 80058d8:	2300      	movs	r3, #0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d007      	beq.n	80058ee <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a25      	ldr	r2, [pc, #148]	; (8005988 <HAL_TIM_PWM_Start+0x1d4>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d022      	beq.n	800593e <HAL_TIM_PWM_Start+0x18a>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005900:	d01d      	beq.n	800593e <HAL_TIM_PWM_Start+0x18a>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a22      	ldr	r2, [pc, #136]	; (8005990 <HAL_TIM_PWM_Start+0x1dc>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d018      	beq.n	800593e <HAL_TIM_PWM_Start+0x18a>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a20      	ldr	r2, [pc, #128]	; (8005994 <HAL_TIM_PWM_Start+0x1e0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d013      	beq.n	800593e <HAL_TIM_PWM_Start+0x18a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a1f      	ldr	r2, [pc, #124]	; (8005998 <HAL_TIM_PWM_Start+0x1e4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00e      	beq.n	800593e <HAL_TIM_PWM_Start+0x18a>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a19      	ldr	r2, [pc, #100]	; (800598c <HAL_TIM_PWM_Start+0x1d8>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d009      	beq.n	800593e <HAL_TIM_PWM_Start+0x18a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a1b      	ldr	r2, [pc, #108]	; (800599c <HAL_TIM_PWM_Start+0x1e8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d004      	beq.n	800593e <HAL_TIM_PWM_Start+0x18a>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a19      	ldr	r2, [pc, #100]	; (80059a0 <HAL_TIM_PWM_Start+0x1ec>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d115      	bne.n	800596a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	4b17      	ldr	r3, [pc, #92]	; (80059a4 <HAL_TIM_PWM_Start+0x1f0>)
 8005946:	4013      	ands	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b06      	cmp	r3, #6
 800594e:	d015      	beq.n	800597c <HAL_TIM_PWM_Start+0x1c8>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005956:	d011      	beq.n	800597c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0201 	orr.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005968:	e008      	b.n	800597c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f042 0201 	orr.w	r2, r2, #1
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	e000      	b.n	800597e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	40010000 	.word	0x40010000
 800598c:	40010400 	.word	0x40010400
 8005990:	40000400 	.word	0x40000400
 8005994:	40000800 	.word	0x40000800
 8005998:	40000c00 	.word	0x40000c00
 800599c:	40014000 	.word	0x40014000
 80059a0:	40001800 	.word	0x40001800
 80059a4:	00010007 	.word	0x00010007

080059a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d122      	bne.n	8005a04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d11b      	bne.n	8005a04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f06f 0202 	mvn.w	r2, #2
 80059d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fae4 	bl	8005fb8 <HAL_TIM_IC_CaptureCallback>
 80059f0:	e005      	b.n	80059fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fad6 	bl	8005fa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fae7 	bl	8005fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f003 0304 	and.w	r3, r3, #4
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d122      	bne.n	8005a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d11b      	bne.n	8005a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f06f 0204 	mvn.w	r2, #4
 8005a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 faba 	bl	8005fb8 <HAL_TIM_IC_CaptureCallback>
 8005a44:	e005      	b.n	8005a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 faac 	bl	8005fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fabd 	bl	8005fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	d122      	bne.n	8005aac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f003 0308 	and.w	r3, r3, #8
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d11b      	bne.n	8005aac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f06f 0208 	mvn.w	r2, #8
 8005a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2204      	movs	r2, #4
 8005a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fa90 	bl	8005fb8 <HAL_TIM_IC_CaptureCallback>
 8005a98:	e005      	b.n	8005aa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fa82 	bl	8005fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fa93 	bl	8005fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f003 0310 	and.w	r3, r3, #16
 8005ab6:	2b10      	cmp	r3, #16
 8005ab8:	d122      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f003 0310 	and.w	r3, r3, #16
 8005ac4:	2b10      	cmp	r3, #16
 8005ac6:	d11b      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f06f 0210 	mvn.w	r2, #16
 8005ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2208      	movs	r2, #8
 8005ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fa66 	bl	8005fb8 <HAL_TIM_IC_CaptureCallback>
 8005aec:	e005      	b.n	8005afa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fa58 	bl	8005fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fa69 	bl	8005fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d10e      	bne.n	8005b2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d107      	bne.n	8005b2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f06f 0201 	mvn.w	r2, #1
 8005b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7fc fc8c 	bl	8002444 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b36:	2b80      	cmp	r3, #128	; 0x80
 8005b38:	d10e      	bne.n	8005b58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b44:	2b80      	cmp	r3, #128	; 0x80
 8005b46:	d107      	bne.n	8005b58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fea4 	bl	80068a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b66:	d10e      	bne.n	8005b86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b72:	2b80      	cmp	r3, #128	; 0x80
 8005b74:	d107      	bne.n	8005b86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fe97 	bl	80068b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b90:	2b40      	cmp	r3, #64	; 0x40
 8005b92:	d10e      	bne.n	8005bb2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9e:	2b40      	cmp	r3, #64	; 0x40
 8005ba0:	d107      	bne.n	8005bb2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 fa17 	bl	8005fe0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	f003 0320 	and.w	r3, r3, #32
 8005bbc:	2b20      	cmp	r3, #32
 8005bbe:	d10e      	bne.n	8005bde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b20      	cmp	r3, #32
 8005bcc:	d107      	bne.n	8005bde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f06f 0220 	mvn.w	r2, #32
 8005bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fe57 	bl	800688c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bde:	bf00      	nop
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
	...

08005be8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c02:	2302      	movs	r3, #2
 8005c04:	e0ff      	b.n	8005e06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b14      	cmp	r3, #20
 8005c12:	f200 80f0 	bhi.w	8005df6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c16:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1c:	08005c71 	.word	0x08005c71
 8005c20:	08005df7 	.word	0x08005df7
 8005c24:	08005df7 	.word	0x08005df7
 8005c28:	08005df7 	.word	0x08005df7
 8005c2c:	08005cb1 	.word	0x08005cb1
 8005c30:	08005df7 	.word	0x08005df7
 8005c34:	08005df7 	.word	0x08005df7
 8005c38:	08005df7 	.word	0x08005df7
 8005c3c:	08005cf3 	.word	0x08005cf3
 8005c40:	08005df7 	.word	0x08005df7
 8005c44:	08005df7 	.word	0x08005df7
 8005c48:	08005df7 	.word	0x08005df7
 8005c4c:	08005d33 	.word	0x08005d33
 8005c50:	08005df7 	.word	0x08005df7
 8005c54:	08005df7 	.word	0x08005df7
 8005c58:	08005df7 	.word	0x08005df7
 8005c5c:	08005d75 	.word	0x08005d75
 8005c60:	08005df7 	.word	0x08005df7
 8005c64:	08005df7 	.word	0x08005df7
 8005c68:	08005df7 	.word	0x08005df7
 8005c6c:	08005db5 	.word	0x08005db5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68b9      	ldr	r1, [r7, #8]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 fa5c 	bl	8006134 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699a      	ldr	r2, [r3, #24]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0208 	orr.w	r2, r2, #8
 8005c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699a      	ldr	r2, [r3, #24]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0204 	bic.w	r2, r2, #4
 8005c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6999      	ldr	r1, [r3, #24]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	691a      	ldr	r2, [r3, #16]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	619a      	str	r2, [r3, #24]
      break;
 8005cae:	e0a5      	b.n	8005dfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68b9      	ldr	r1, [r7, #8]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 faae 	bl	8006218 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699a      	ldr	r2, [r3, #24]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6999      	ldr	r1, [r3, #24]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	021a      	lsls	r2, r3, #8
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	619a      	str	r2, [r3, #24]
      break;
 8005cf0:	e084      	b.n	8005dfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68b9      	ldr	r1, [r7, #8]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fb05 	bl	8006308 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69da      	ldr	r2, [r3, #28]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 0208 	orr.w	r2, r2, #8
 8005d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69da      	ldr	r2, [r3, #28]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0204 	bic.w	r2, r2, #4
 8005d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69d9      	ldr	r1, [r3, #28]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	61da      	str	r2, [r3, #28]
      break;
 8005d30:	e064      	b.n	8005dfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fb5b 	bl	80063f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69da      	ldr	r2, [r3, #28]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69da      	ldr	r2, [r3, #28]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69d9      	ldr	r1, [r3, #28]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	021a      	lsls	r2, r3, #8
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	61da      	str	r2, [r3, #28]
      break;
 8005d72:	e043      	b.n	8005dfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68b9      	ldr	r1, [r7, #8]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fb92 	bl	80064a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0208 	orr.w	r2, r2, #8
 8005d8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0204 	bic.w	r2, r2, #4
 8005d9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	691a      	ldr	r2, [r3, #16]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005db2:	e023      	b.n	8005dfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 fbc4 	bl	8006548 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	021a      	lsls	r2, r3, #8
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005df4:	e002      	b.n	8005dfc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	75fb      	strb	r3, [r7, #23]
      break;
 8005dfa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop

08005e10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_TIM_ConfigClockSource+0x1c>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e0b4      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x186>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	4b56      	ldr	r3, [pc, #344]	; (8005fa0 <HAL_TIM_ConfigClockSource+0x190>)
 8005e48:	4013      	ands	r3, r2
 8005e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e64:	d03e      	beq.n	8005ee4 <HAL_TIM_ConfigClockSource+0xd4>
 8005e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e6a:	f200 8087 	bhi.w	8005f7c <HAL_TIM_ConfigClockSource+0x16c>
 8005e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e72:	f000 8086 	beq.w	8005f82 <HAL_TIM_ConfigClockSource+0x172>
 8005e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7a:	d87f      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x16c>
 8005e7c:	2b70      	cmp	r3, #112	; 0x70
 8005e7e:	d01a      	beq.n	8005eb6 <HAL_TIM_ConfigClockSource+0xa6>
 8005e80:	2b70      	cmp	r3, #112	; 0x70
 8005e82:	d87b      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x16c>
 8005e84:	2b60      	cmp	r3, #96	; 0x60
 8005e86:	d050      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x11a>
 8005e88:	2b60      	cmp	r3, #96	; 0x60
 8005e8a:	d877      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x16c>
 8005e8c:	2b50      	cmp	r3, #80	; 0x50
 8005e8e:	d03c      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0xfa>
 8005e90:	2b50      	cmp	r3, #80	; 0x50
 8005e92:	d873      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x16c>
 8005e94:	2b40      	cmp	r3, #64	; 0x40
 8005e96:	d058      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0x13a>
 8005e98:	2b40      	cmp	r3, #64	; 0x40
 8005e9a:	d86f      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x16c>
 8005e9c:	2b30      	cmp	r3, #48	; 0x30
 8005e9e:	d064      	beq.n	8005f6a <HAL_TIM_ConfigClockSource+0x15a>
 8005ea0:	2b30      	cmp	r3, #48	; 0x30
 8005ea2:	d86b      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x16c>
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	d060      	beq.n	8005f6a <HAL_TIM_ConfigClockSource+0x15a>
 8005ea8:	2b20      	cmp	r3, #32
 8005eaa:	d867      	bhi.n	8005f7c <HAL_TIM_ConfigClockSource+0x16c>
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d05c      	beq.n	8005f6a <HAL_TIM_ConfigClockSource+0x15a>
 8005eb0:	2b10      	cmp	r3, #16
 8005eb2:	d05a      	beq.n	8005f6a <HAL_TIM_ConfigClockSource+0x15a>
 8005eb4:	e062      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ec6:	f000 fc0d 	bl	80066e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ed8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	609a      	str	r2, [r3, #8]
      break;
 8005ee2:	e04f      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ef4:	f000 fbf6 	bl	80066e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f06:	609a      	str	r2, [r3, #8]
      break;
 8005f08:	e03c      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f16:	461a      	mov	r2, r3
 8005f18:	f000 fb6a 	bl	80065f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2150      	movs	r1, #80	; 0x50
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fbc3 	bl	80066ae <TIM_ITRx_SetConfig>
      break;
 8005f28:	e02c      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f36:	461a      	mov	r2, r3
 8005f38:	f000 fb89 	bl	800664e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2160      	movs	r1, #96	; 0x60
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 fbb3 	bl	80066ae <TIM_ITRx_SetConfig>
      break;
 8005f48:	e01c      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f56:	461a      	mov	r2, r3
 8005f58:	f000 fb4a 	bl	80065f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2140      	movs	r1, #64	; 0x40
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 fba3 	bl	80066ae <TIM_ITRx_SetConfig>
      break;
 8005f68:	e00c      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4619      	mov	r1, r3
 8005f74:	4610      	mov	r0, r2
 8005f76:	f000 fb9a 	bl	80066ae <TIM_ITRx_SetConfig>
      break;
 8005f7a:	e003      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f80:	e000      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	fffeff88 	.word	0xfffeff88

08005fa4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a40      	ldr	r2, [pc, #256]	; (8006108 <TIM_Base_SetConfig+0x114>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d013      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006012:	d00f      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a3d      	ldr	r2, [pc, #244]	; (800610c <TIM_Base_SetConfig+0x118>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00b      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a3c      	ldr	r2, [pc, #240]	; (8006110 <TIM_Base_SetConfig+0x11c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d007      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a3b      	ldr	r2, [pc, #236]	; (8006114 <TIM_Base_SetConfig+0x120>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d003      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a3a      	ldr	r2, [pc, #232]	; (8006118 <TIM_Base_SetConfig+0x124>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d108      	bne.n	8006046 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a2f      	ldr	r2, [pc, #188]	; (8006108 <TIM_Base_SetConfig+0x114>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d02b      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006054:	d027      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a2c      	ldr	r2, [pc, #176]	; (800610c <TIM_Base_SetConfig+0x118>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d023      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a2b      	ldr	r2, [pc, #172]	; (8006110 <TIM_Base_SetConfig+0x11c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d01f      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a2a      	ldr	r2, [pc, #168]	; (8006114 <TIM_Base_SetConfig+0x120>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d01b      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a29      	ldr	r2, [pc, #164]	; (8006118 <TIM_Base_SetConfig+0x124>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d017      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a28      	ldr	r2, [pc, #160]	; (800611c <TIM_Base_SetConfig+0x128>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d013      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a27      	ldr	r2, [pc, #156]	; (8006120 <TIM_Base_SetConfig+0x12c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00f      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a26      	ldr	r2, [pc, #152]	; (8006124 <TIM_Base_SetConfig+0x130>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00b      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a25      	ldr	r2, [pc, #148]	; (8006128 <TIM_Base_SetConfig+0x134>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d007      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a24      	ldr	r2, [pc, #144]	; (800612c <TIM_Base_SetConfig+0x138>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d003      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a23      	ldr	r2, [pc, #140]	; (8006130 <TIM_Base_SetConfig+0x13c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d108      	bne.n	80060b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a0a      	ldr	r2, [pc, #40]	; (8006108 <TIM_Base_SetConfig+0x114>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d003      	beq.n	80060ec <TIM_Base_SetConfig+0xf8>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a0c      	ldr	r2, [pc, #48]	; (8006118 <TIM_Base_SetConfig+0x124>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d103      	bne.n	80060f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	615a      	str	r2, [r3, #20]
}
 80060fa:	bf00      	nop
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40010000 	.word	0x40010000
 800610c:	40000400 	.word	0x40000400
 8006110:	40000800 	.word	0x40000800
 8006114:	40000c00 	.word	0x40000c00
 8006118:	40010400 	.word	0x40010400
 800611c:	40014000 	.word	0x40014000
 8006120:	40014400 	.word	0x40014400
 8006124:	40014800 	.word	0x40014800
 8006128:	40001800 	.word	0x40001800
 800612c:	40001c00 	.word	0x40001c00
 8006130:	40002000 	.word	0x40002000

08006134 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	f023 0201 	bic.w	r2, r3, #1
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4b2b      	ldr	r3, [pc, #172]	; (800620c <TIM_OC1_SetConfig+0xd8>)
 8006160:	4013      	ands	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0303 	bic.w	r3, r3, #3
 800616a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f023 0302 	bic.w	r3, r3, #2
 800617c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a21      	ldr	r2, [pc, #132]	; (8006210 <TIM_OC1_SetConfig+0xdc>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d003      	beq.n	8006198 <TIM_OC1_SetConfig+0x64>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a20      	ldr	r2, [pc, #128]	; (8006214 <TIM_OC1_SetConfig+0xe0>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d10c      	bne.n	80061b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f023 0308 	bic.w	r3, r3, #8
 800619e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f023 0304 	bic.w	r3, r3, #4
 80061b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a16      	ldr	r2, [pc, #88]	; (8006210 <TIM_OC1_SetConfig+0xdc>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d003      	beq.n	80061c2 <TIM_OC1_SetConfig+0x8e>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a15      	ldr	r2, [pc, #84]	; (8006214 <TIM_OC1_SetConfig+0xe0>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d111      	bne.n	80061e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	621a      	str	r2, [r3, #32]
}
 8006200:	bf00      	nop
 8006202:	371c      	adds	r7, #28
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	fffeff8f 	.word	0xfffeff8f
 8006210:	40010000 	.word	0x40010000
 8006214:	40010400 	.word	0x40010400

08006218 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	f023 0210 	bic.w	r2, r3, #16
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4b2e      	ldr	r3, [pc, #184]	; (80062fc <TIM_OC2_SetConfig+0xe4>)
 8006244:	4013      	ands	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800624e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	021b      	lsls	r3, r3, #8
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	4313      	orrs	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f023 0320 	bic.w	r3, r3, #32
 8006262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	011b      	lsls	r3, r3, #4
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a23      	ldr	r2, [pc, #140]	; (8006300 <TIM_OC2_SetConfig+0xe8>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d003      	beq.n	8006280 <TIM_OC2_SetConfig+0x68>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a22      	ldr	r2, [pc, #136]	; (8006304 <TIM_OC2_SetConfig+0xec>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d10d      	bne.n	800629c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800629a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a18      	ldr	r2, [pc, #96]	; (8006300 <TIM_OC2_SetConfig+0xe8>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d003      	beq.n	80062ac <TIM_OC2_SetConfig+0x94>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a17      	ldr	r2, [pc, #92]	; (8006304 <TIM_OC2_SetConfig+0xec>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d113      	bne.n	80062d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	621a      	str	r2, [r3, #32]
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	feff8fff 	.word	0xfeff8fff
 8006300:	40010000 	.word	0x40010000
 8006304:	40010400 	.word	0x40010400

08006308 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4b2d      	ldr	r3, [pc, #180]	; (80063e8 <TIM_OC3_SetConfig+0xe0>)
 8006334:	4013      	ands	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 0303 	bic.w	r3, r3, #3
 800633e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	021b      	lsls	r3, r3, #8
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	4313      	orrs	r3, r2
 800635c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a22      	ldr	r2, [pc, #136]	; (80063ec <TIM_OC3_SetConfig+0xe4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d003      	beq.n	800636e <TIM_OC3_SetConfig+0x66>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a21      	ldr	r2, [pc, #132]	; (80063f0 <TIM_OC3_SetConfig+0xe8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d10d      	bne.n	800638a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006374:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	021b      	lsls	r3, r3, #8
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	4313      	orrs	r3, r2
 8006380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a17      	ldr	r2, [pc, #92]	; (80063ec <TIM_OC3_SetConfig+0xe4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d003      	beq.n	800639a <TIM_OC3_SetConfig+0x92>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a16      	ldr	r2, [pc, #88]	; (80063f0 <TIM_OC3_SetConfig+0xe8>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d113      	bne.n	80063c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	011b      	lsls	r3, r3, #4
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	4313      	orrs	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	621a      	str	r2, [r3, #32]
}
 80063dc:	bf00      	nop
 80063de:	371c      	adds	r7, #28
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	fffeff8f 	.word	0xfffeff8f
 80063ec:	40010000 	.word	0x40010000
 80063f0:	40010400 	.word	0x40010400

080063f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	4b1e      	ldr	r3, [pc, #120]	; (8006498 <TIM_OC4_SetConfig+0xa4>)
 8006420:	4013      	ands	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800642a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	021b      	lsls	r3, r3, #8
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800643e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	031b      	lsls	r3, r3, #12
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	4313      	orrs	r3, r2
 800644a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a13      	ldr	r2, [pc, #76]	; (800649c <TIM_OC4_SetConfig+0xa8>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d003      	beq.n	800645c <TIM_OC4_SetConfig+0x68>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a12      	ldr	r2, [pc, #72]	; (80064a0 <TIM_OC4_SetConfig+0xac>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d109      	bne.n	8006470 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006462:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	019b      	lsls	r3, r3, #6
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	4313      	orrs	r3, r2
 800646e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	621a      	str	r2, [r3, #32]
}
 800648a:	bf00      	nop
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	feff8fff 	.word	0xfeff8fff
 800649c:	40010000 	.word	0x40010000
 80064a0:	40010400 	.word	0x40010400

080064a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	4b1b      	ldr	r3, [pc, #108]	; (800653c <TIM_OC5_SetConfig+0x98>)
 80064d0:	4013      	ands	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	041b      	lsls	r3, r3, #16
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a12      	ldr	r2, [pc, #72]	; (8006540 <TIM_OC5_SetConfig+0x9c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d003      	beq.n	8006502 <TIM_OC5_SetConfig+0x5e>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a11      	ldr	r2, [pc, #68]	; (8006544 <TIM_OC5_SetConfig+0xa0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d109      	bne.n	8006516 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006508:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	021b      	lsls	r3, r3, #8
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	4313      	orrs	r3, r2
 8006514:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	621a      	str	r2, [r3, #32]
}
 8006530:	bf00      	nop
 8006532:	371c      	adds	r7, #28
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	fffeff8f 	.word	0xfffeff8f
 8006540:	40010000 	.word	0x40010000
 8006544:	40010400 	.word	0x40010400

08006548 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006548:	b480      	push	{r7}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	4b1c      	ldr	r3, [pc, #112]	; (80065e4 <TIM_OC6_SetConfig+0x9c>)
 8006574:	4013      	ands	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	021b      	lsls	r3, r3, #8
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	4313      	orrs	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800658a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	051b      	lsls	r3, r3, #20
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4313      	orrs	r3, r2
 8006596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a13      	ldr	r2, [pc, #76]	; (80065e8 <TIM_OC6_SetConfig+0xa0>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d003      	beq.n	80065a8 <TIM_OC6_SetConfig+0x60>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a12      	ldr	r2, [pc, #72]	; (80065ec <TIM_OC6_SetConfig+0xa4>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d109      	bne.n	80065bc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	029b      	lsls	r3, r3, #10
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	621a      	str	r2, [r3, #32]
}
 80065d6:	bf00      	nop
 80065d8:	371c      	adds	r7, #28
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	feff8fff 	.word	0xfeff8fff
 80065e8:	40010000 	.word	0x40010000
 80065ec:	40010400 	.word	0x40010400

080065f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	f023 0201 	bic.w	r2, r3, #1
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800661a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	011b      	lsls	r3, r3, #4
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	4313      	orrs	r3, r2
 8006624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f023 030a 	bic.w	r3, r3, #10
 800662c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	621a      	str	r2, [r3, #32]
}
 8006642:	bf00      	nop
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800664e:	b480      	push	{r7}
 8006650:	b087      	sub	sp, #28
 8006652:	af00      	add	r7, sp, #0
 8006654:	60f8      	str	r0, [r7, #12]
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	f023 0210 	bic.w	r2, r3, #16
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006678:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	031b      	lsls	r3, r3, #12
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	4313      	orrs	r3, r2
 8006682:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800668a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	011b      	lsls	r3, r3, #4
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	4313      	orrs	r3, r2
 8006694:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	621a      	str	r2, [r3, #32]
}
 80066a2:	bf00      	nop
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b085      	sub	sp, #20
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	f043 0307 	orr.w	r3, r3, #7
 80066d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	609a      	str	r2, [r3, #8]
}
 80066d8:	bf00      	nop
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
 80066f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	021a      	lsls	r2, r3, #8
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	431a      	orrs	r2, r3
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	4313      	orrs	r3, r2
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	609a      	str	r2, [r3, #8]
}
 8006718:	bf00      	nop
 800671a:	371c      	adds	r7, #28
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	f003 031f 	and.w	r3, r3, #31
 8006736:	2201      	movs	r2, #1
 8006738:	fa02 f303 	lsl.w	r3, r2, r3
 800673c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6a1a      	ldr	r2, [r3, #32]
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	43db      	mvns	r3, r3
 8006746:	401a      	ands	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6a1a      	ldr	r2, [r3, #32]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f003 031f 	and.w	r3, r3, #31
 8006756:	6879      	ldr	r1, [r7, #4]
 8006758:	fa01 f303 	lsl.w	r3, r1, r3
 800675c:	431a      	orrs	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	621a      	str	r2, [r3, #32]
}
 8006762:	bf00      	nop
 8006764:	371c      	adds	r7, #28
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
	...

08006770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006780:	2b01      	cmp	r3, #1
 8006782:	d101      	bne.n	8006788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006784:	2302      	movs	r3, #2
 8006786:	e06d      	b.n	8006864 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a30      	ldr	r2, [pc, #192]	; (8006870 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d004      	beq.n	80067bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a2f      	ldr	r2, [pc, #188]	; (8006874 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d108      	bne.n	80067ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	4313      	orrs	r3, r2
 80067de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a20      	ldr	r2, [pc, #128]	; (8006870 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d022      	beq.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067fa:	d01d      	beq.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a1d      	ldr	r2, [pc, #116]	; (8006878 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d018      	beq.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a1c      	ldr	r2, [pc, #112]	; (800687c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d013      	beq.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a1a      	ldr	r2, [pc, #104]	; (8006880 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d00e      	beq.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a15      	ldr	r2, [pc, #84]	; (8006874 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d009      	beq.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a16      	ldr	r2, [pc, #88]	; (8006884 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d004      	beq.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a15      	ldr	r2, [pc, #84]	; (8006888 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d10c      	bne.n	8006852 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800683e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	4313      	orrs	r3, r2
 8006848:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	40010000 	.word	0x40010000
 8006874:	40010400 	.word	0x40010400
 8006878:	40000400 	.word	0x40000400
 800687c:	40000800 	.word	0x40000800
 8006880:	40000c00 	.word	0x40000c00
 8006884:	40014000 	.word	0x40014000
 8006888:	40001800 	.word	0x40001800

0800688c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e040      	b.n	800695c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d106      	bne.n	80068f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7fb ffbc 	bl	8002868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2224      	movs	r2, #36	; 0x24
 80068f4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 0201 	bic.w	r2, r2, #1
 8006904:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fbe6 	bl	80070d8 <UART_SetConfig>
 800690c:	4603      	mov	r3, r0
 800690e:	2b01      	cmp	r3, #1
 8006910:	d101      	bne.n	8006916 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e022      	b.n	800695c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	2b00      	cmp	r3, #0
 800691c:	d002      	beq.n	8006924 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fe3e 	bl	80075a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006932:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006942:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0201 	orr.w	r2, r2, #1
 8006952:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fec5 	bl	80076e4 <UART_CheckIdleState>
 800695a:	4603      	mov	r3, r0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08a      	sub	sp, #40	; 0x28
 8006968:	af02      	add	r7, sp, #8
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	603b      	str	r3, [r7, #0]
 8006970:	4613      	mov	r3, r2
 8006972:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006978:	2b20      	cmp	r3, #32
 800697a:	d171      	bne.n	8006a60 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <HAL_UART_Transmit+0x24>
 8006982:	88fb      	ldrh	r3, [r7, #6]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e06a      	b.n	8006a62 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2221      	movs	r2, #33	; 0x21
 8006998:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800699a:	f7fc f9d7 	bl	8002d4c <HAL_GetTick>
 800699e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	88fa      	ldrh	r2, [r7, #6]
 80069a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	88fa      	ldrh	r2, [r7, #6]
 80069ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069b8:	d108      	bne.n	80069cc <HAL_UART_Transmit+0x68>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d104      	bne.n	80069cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80069c2:	2300      	movs	r3, #0
 80069c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	61bb      	str	r3, [r7, #24]
 80069ca:	e003      	b.n	80069d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069d0:	2300      	movs	r3, #0
 80069d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069d4:	e02c      	b.n	8006a30 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2200      	movs	r2, #0
 80069de:	2180      	movs	r1, #128	; 0x80
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 feb6 	bl	8007752 <UART_WaitOnFlagUntilTimeout>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e038      	b.n	8006a62 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10b      	bne.n	8006a0e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	3302      	adds	r3, #2
 8006a0a:	61bb      	str	r3, [r7, #24]
 8006a0c:	e007      	b.n	8006a1e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	781a      	ldrb	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	3b01      	subs	r3, #1
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1cc      	bne.n	80069d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	2200      	movs	r2, #0
 8006a44:	2140      	movs	r1, #64	; 0x40
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f000 fe83 	bl	8007752 <UART_WaitOnFlagUntilTimeout>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e005      	b.n	8006a62 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	e000      	b.n	8006a62 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006a60:	2302      	movs	r3, #2
  }
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3720      	adds	r7, #32
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b08a      	sub	sp, #40	; 0x28
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	60f8      	str	r0, [r7, #12]
 8006a72:	60b9      	str	r1, [r7, #8]
 8006a74:	4613      	mov	r3, r2
 8006a76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a7e:	2b20      	cmp	r3, #32
 8006a80:	d132      	bne.n	8006ae8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <HAL_UART_Receive_IT+0x24>
 8006a88:	88fb      	ldrh	r3, [r7, #6]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e02b      	b.n	8006aea <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d018      	beq.n	8006ad8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	623b      	str	r3, [r7, #32]
 8006ac6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	69f9      	ldr	r1, [r7, #28]
 8006aca:	6a3a      	ldr	r2, [r7, #32]
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e6      	bne.n	8006aa6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ad8:	88fb      	ldrh	r3, [r7, #6]
 8006ada:	461a      	mov	r2, r3
 8006adc:	68b9      	ldr	r1, [r7, #8]
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 fefe 	bl	80078e0 <UART_Start_Receive_IT>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	e000      	b.n	8006aea <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006ae8:	2302      	movs	r3, #2
  }
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3728      	adds	r7, #40	; 0x28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
	...

08006af4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b0ba      	sub	sp, #232	; 0xe8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b22:	4013      	ands	r3, r2
 8006b24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d115      	bne.n	8006b5c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b34:	f003 0320 	and.w	r3, r3, #32
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00f      	beq.n	8006b5c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b40:	f003 0320 	and.w	r3, r3, #32
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d009      	beq.n	8006b5c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 8297 	beq.w	8007080 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	4798      	blx	r3
      }
      return;
 8006b5a:	e291      	b.n	8007080 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 8117 	beq.w	8006d94 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d106      	bne.n	8006b80 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b76:	4b85      	ldr	r3, [pc, #532]	; (8006d8c <HAL_UART_IRQHandler+0x298>)
 8006b78:	4013      	ands	r3, r2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 810a 	beq.w	8006d94 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d011      	beq.n	8006bb0 <HAL_UART_IRQHandler+0xbc>
 8006b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00b      	beq.n	8006bb0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ba6:	f043 0201 	orr.w	r2, r3, #1
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d011      	beq.n	8006be0 <HAL_UART_IRQHandler+0xec>
 8006bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00b      	beq.n	8006be0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bd6:	f043 0204 	orr.w	r2, r3, #4
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d011      	beq.n	8006c10 <HAL_UART_IRQHandler+0x11c>
 8006bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00b      	beq.n	8006c10 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2204      	movs	r2, #4
 8006bfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c06:	f043 0202 	orr.w	r2, r3, #2
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c14:	f003 0308 	and.w	r3, r3, #8
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d017      	beq.n	8006c4c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d105      	bne.n	8006c34 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c2c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00b      	beq.n	8006c4c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2208      	movs	r2, #8
 8006c3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c42:	f043 0208 	orr.w	r2, r3, #8
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d012      	beq.n	8006c7e <HAL_UART_IRQHandler+0x18a>
 8006c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00c      	beq.n	8006c7e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c74:	f043 0220 	orr.w	r2, r3, #32
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 81fd 	beq.w	8007084 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8e:	f003 0320 	and.w	r3, r3, #32
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00d      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c9a:	f003 0320 	and.w	r3, r3, #32
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d007      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc6:	2b40      	cmp	r3, #64	; 0x40
 8006cc8:	d005      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006cca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d04f      	beq.n	8006d76 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fec8 	bl	8007a6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce6:	2b40      	cmp	r3, #64	; 0x40
 8006ce8:	d141      	bne.n	8006d6e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	3308      	adds	r3, #8
 8006cf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3308      	adds	r3, #8
 8006d12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d26:	e841 2300 	strex	r3, r2, [r1]
 8006d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1d9      	bne.n	8006cea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d013      	beq.n	8006d66 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d42:	4a13      	ldr	r2, [pc, #76]	; (8006d90 <HAL_UART_IRQHandler+0x29c>)
 8006d44:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fc f9af 	bl	80030ae <HAL_DMA_Abort_IT>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d017      	beq.n	8006d86 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d60:	4610      	mov	r0, r2
 8006d62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d64:	e00f      	b.n	8006d86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f9a0 	bl	80070ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d6c:	e00b      	b.n	8006d86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f99c 	bl	80070ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d74:	e007      	b.n	8006d86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f998 	bl	80070ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006d84:	e17e      	b.n	8007084 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d86:	bf00      	nop
    return;
 8006d88:	e17c      	b.n	8007084 <HAL_UART_IRQHandler+0x590>
 8006d8a:	bf00      	nop
 8006d8c:	04000120 	.word	0x04000120
 8006d90:	08007b35 	.word	0x08007b35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	f040 814c 	bne.w	8007036 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da2:	f003 0310 	and.w	r3, r3, #16
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f000 8145 	beq.w	8007036 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006db0:	f003 0310 	and.w	r3, r3, #16
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 813e 	beq.w	8007036 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2210      	movs	r2, #16
 8006dc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dcc:	2b40      	cmp	r3, #64	; 0x40
 8006dce:	f040 80b6 	bne.w	8006f3e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006dde:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 8150 	beq.w	8007088 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006dee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006df2:	429a      	cmp	r2, r3
 8006df4:	f080 8148 	bcs.w	8007088 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006dfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e06:	69db      	ldr	r3, [r3, #28]
 8006e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e0c:	f000 8086 	beq.w	8006f1c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	461a      	mov	r2, r3
 8006e36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e3e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1da      	bne.n	8006e10 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3308      	adds	r3, #8
 8006e60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e6c:	f023 0301 	bic.w	r3, r3, #1
 8006e70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3308      	adds	r3, #8
 8006e7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1e1      	bne.n	8006e5a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3308      	adds	r3, #8
 8006e9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006eba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ebc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ec0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e3      	bne.n	8006e96 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ee4:	e853 3f00 	ldrex	r3, [r3]
 8006ee8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eec:	f023 0310 	bic.w	r3, r3, #16
 8006ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006efe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f00:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f06:	e841 2300 	strex	r3, r2, [r1]
 8006f0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1e4      	bne.n	8006edc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fc f859 	bl	8002fce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f8c2 	bl	80070c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f3c:	e0a4      	b.n	8007088 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 8096 	beq.w	800708c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006f60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 8091 	beq.w	800708c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f72:	e853 3f00 	ldrex	r3, [r3]
 8006f76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f8c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f8e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f94:	e841 2300 	strex	r3, r2, [r1]
 8006f98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e4      	bne.n	8006f6a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	e853 3f00 	ldrex	r3, [r3]
 8006fae:	623b      	str	r3, [r7, #32]
   return(result);
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	f023 0301 	bic.w	r3, r3, #1
 8006fb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3308      	adds	r3, #8
 8006fc0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006fc4:	633a      	str	r2, [r7, #48]	; 0x30
 8006fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fcc:	e841 2300 	strex	r3, r2, [r1]
 8006fd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1e3      	bne.n	8006fa0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2220      	movs	r2, #32
 8006fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	e853 3f00 	ldrex	r3, [r3]
 8006ff8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f023 0310 	bic.w	r3, r3, #16
 8007000:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	461a      	mov	r2, r3
 800700a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800700e:	61fb      	str	r3, [r7, #28]
 8007010:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007012:	69b9      	ldr	r1, [r7, #24]
 8007014:	69fa      	ldr	r2, [r7, #28]
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	617b      	str	r3, [r7, #20]
   return(result);
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1e4      	bne.n	8006fec <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2202      	movs	r2, #2
 8007026:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007028:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800702c:	4619      	mov	r1, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f846 	bl	80070c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007034:	e02a      	b.n	800708c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800703a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00e      	beq.n	8007060 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800704a:	2b00      	cmp	r3, #0
 800704c:	d008      	beq.n	8007060 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d01c      	beq.n	8007090 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	4798      	blx	r3
    }
    return;
 800705e:	e017      	b.n	8007090 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007068:	2b00      	cmp	r3, #0
 800706a:	d012      	beq.n	8007092 <HAL_UART_IRQHandler+0x59e>
 800706c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00c      	beq.n	8007092 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fd71 	bl	8007b60 <UART_EndTransmit_IT>
    return;
 800707e:	e008      	b.n	8007092 <HAL_UART_IRQHandler+0x59e>
      return;
 8007080:	bf00      	nop
 8007082:	e006      	b.n	8007092 <HAL_UART_IRQHandler+0x59e>
    return;
 8007084:	bf00      	nop
 8007086:	e004      	b.n	8007092 <HAL_UART_IRQHandler+0x59e>
      return;
 8007088:	bf00      	nop
 800708a:	e002      	b.n	8007092 <HAL_UART_IRQHandler+0x59e>
      return;
 800708c:	bf00      	nop
 800708e:	e000      	b.n	8007092 <HAL_UART_IRQHandler+0x59e>
    return;
 8007090:	bf00      	nop
  }

}
 8007092:	37e8      	adds	r7, #232	; 0xe8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b088      	sub	sp, #32
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070e0:	2300      	movs	r3, #0
 80070e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	431a      	orrs	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	431a      	orrs	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	69db      	ldr	r3, [r3, #28]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	4ba6      	ldr	r3, [pc, #664]	; (800739c <UART_SetConfig+0x2c4>)
 8007104:	4013      	ands	r3, r2
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	6812      	ldr	r2, [r2, #0]
 800710a:	6979      	ldr	r1, [r7, #20]
 800710c:	430b      	orrs	r3, r1
 800710e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	4313      	orrs	r3, r2
 8007134:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	430a      	orrs	r2, r1
 8007148:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a94      	ldr	r2, [pc, #592]	; (80073a0 <UART_SetConfig+0x2c8>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d120      	bne.n	8007196 <UART_SetConfig+0xbe>
 8007154:	4b93      	ldr	r3, [pc, #588]	; (80073a4 <UART_SetConfig+0x2cc>)
 8007156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800715a:	f003 0303 	and.w	r3, r3, #3
 800715e:	2b03      	cmp	r3, #3
 8007160:	d816      	bhi.n	8007190 <UART_SetConfig+0xb8>
 8007162:	a201      	add	r2, pc, #4	; (adr r2, 8007168 <UART_SetConfig+0x90>)
 8007164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007168:	08007179 	.word	0x08007179
 800716c:	08007185 	.word	0x08007185
 8007170:	0800717f 	.word	0x0800717f
 8007174:	0800718b 	.word	0x0800718b
 8007178:	2301      	movs	r3, #1
 800717a:	77fb      	strb	r3, [r7, #31]
 800717c:	e150      	b.n	8007420 <UART_SetConfig+0x348>
 800717e:	2302      	movs	r3, #2
 8007180:	77fb      	strb	r3, [r7, #31]
 8007182:	e14d      	b.n	8007420 <UART_SetConfig+0x348>
 8007184:	2304      	movs	r3, #4
 8007186:	77fb      	strb	r3, [r7, #31]
 8007188:	e14a      	b.n	8007420 <UART_SetConfig+0x348>
 800718a:	2308      	movs	r3, #8
 800718c:	77fb      	strb	r3, [r7, #31]
 800718e:	e147      	b.n	8007420 <UART_SetConfig+0x348>
 8007190:	2310      	movs	r3, #16
 8007192:	77fb      	strb	r3, [r7, #31]
 8007194:	e144      	b.n	8007420 <UART_SetConfig+0x348>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a83      	ldr	r2, [pc, #524]	; (80073a8 <UART_SetConfig+0x2d0>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d132      	bne.n	8007206 <UART_SetConfig+0x12e>
 80071a0:	4b80      	ldr	r3, [pc, #512]	; (80073a4 <UART_SetConfig+0x2cc>)
 80071a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a6:	f003 030c 	and.w	r3, r3, #12
 80071aa:	2b0c      	cmp	r3, #12
 80071ac:	d828      	bhi.n	8007200 <UART_SetConfig+0x128>
 80071ae:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <UART_SetConfig+0xdc>)
 80071b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b4:	080071e9 	.word	0x080071e9
 80071b8:	08007201 	.word	0x08007201
 80071bc:	08007201 	.word	0x08007201
 80071c0:	08007201 	.word	0x08007201
 80071c4:	080071f5 	.word	0x080071f5
 80071c8:	08007201 	.word	0x08007201
 80071cc:	08007201 	.word	0x08007201
 80071d0:	08007201 	.word	0x08007201
 80071d4:	080071ef 	.word	0x080071ef
 80071d8:	08007201 	.word	0x08007201
 80071dc:	08007201 	.word	0x08007201
 80071e0:	08007201 	.word	0x08007201
 80071e4:	080071fb 	.word	0x080071fb
 80071e8:	2300      	movs	r3, #0
 80071ea:	77fb      	strb	r3, [r7, #31]
 80071ec:	e118      	b.n	8007420 <UART_SetConfig+0x348>
 80071ee:	2302      	movs	r3, #2
 80071f0:	77fb      	strb	r3, [r7, #31]
 80071f2:	e115      	b.n	8007420 <UART_SetConfig+0x348>
 80071f4:	2304      	movs	r3, #4
 80071f6:	77fb      	strb	r3, [r7, #31]
 80071f8:	e112      	b.n	8007420 <UART_SetConfig+0x348>
 80071fa:	2308      	movs	r3, #8
 80071fc:	77fb      	strb	r3, [r7, #31]
 80071fe:	e10f      	b.n	8007420 <UART_SetConfig+0x348>
 8007200:	2310      	movs	r3, #16
 8007202:	77fb      	strb	r3, [r7, #31]
 8007204:	e10c      	b.n	8007420 <UART_SetConfig+0x348>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a68      	ldr	r2, [pc, #416]	; (80073ac <UART_SetConfig+0x2d4>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d120      	bne.n	8007252 <UART_SetConfig+0x17a>
 8007210:	4b64      	ldr	r3, [pc, #400]	; (80073a4 <UART_SetConfig+0x2cc>)
 8007212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007216:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800721a:	2b30      	cmp	r3, #48	; 0x30
 800721c:	d013      	beq.n	8007246 <UART_SetConfig+0x16e>
 800721e:	2b30      	cmp	r3, #48	; 0x30
 8007220:	d814      	bhi.n	800724c <UART_SetConfig+0x174>
 8007222:	2b20      	cmp	r3, #32
 8007224:	d009      	beq.n	800723a <UART_SetConfig+0x162>
 8007226:	2b20      	cmp	r3, #32
 8007228:	d810      	bhi.n	800724c <UART_SetConfig+0x174>
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <UART_SetConfig+0x15c>
 800722e:	2b10      	cmp	r3, #16
 8007230:	d006      	beq.n	8007240 <UART_SetConfig+0x168>
 8007232:	e00b      	b.n	800724c <UART_SetConfig+0x174>
 8007234:	2300      	movs	r3, #0
 8007236:	77fb      	strb	r3, [r7, #31]
 8007238:	e0f2      	b.n	8007420 <UART_SetConfig+0x348>
 800723a:	2302      	movs	r3, #2
 800723c:	77fb      	strb	r3, [r7, #31]
 800723e:	e0ef      	b.n	8007420 <UART_SetConfig+0x348>
 8007240:	2304      	movs	r3, #4
 8007242:	77fb      	strb	r3, [r7, #31]
 8007244:	e0ec      	b.n	8007420 <UART_SetConfig+0x348>
 8007246:	2308      	movs	r3, #8
 8007248:	77fb      	strb	r3, [r7, #31]
 800724a:	e0e9      	b.n	8007420 <UART_SetConfig+0x348>
 800724c:	2310      	movs	r3, #16
 800724e:	77fb      	strb	r3, [r7, #31]
 8007250:	e0e6      	b.n	8007420 <UART_SetConfig+0x348>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a56      	ldr	r2, [pc, #344]	; (80073b0 <UART_SetConfig+0x2d8>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d120      	bne.n	800729e <UART_SetConfig+0x1c6>
 800725c:	4b51      	ldr	r3, [pc, #324]	; (80073a4 <UART_SetConfig+0x2cc>)
 800725e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007262:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007266:	2bc0      	cmp	r3, #192	; 0xc0
 8007268:	d013      	beq.n	8007292 <UART_SetConfig+0x1ba>
 800726a:	2bc0      	cmp	r3, #192	; 0xc0
 800726c:	d814      	bhi.n	8007298 <UART_SetConfig+0x1c0>
 800726e:	2b80      	cmp	r3, #128	; 0x80
 8007270:	d009      	beq.n	8007286 <UART_SetConfig+0x1ae>
 8007272:	2b80      	cmp	r3, #128	; 0x80
 8007274:	d810      	bhi.n	8007298 <UART_SetConfig+0x1c0>
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <UART_SetConfig+0x1a8>
 800727a:	2b40      	cmp	r3, #64	; 0x40
 800727c:	d006      	beq.n	800728c <UART_SetConfig+0x1b4>
 800727e:	e00b      	b.n	8007298 <UART_SetConfig+0x1c0>
 8007280:	2300      	movs	r3, #0
 8007282:	77fb      	strb	r3, [r7, #31]
 8007284:	e0cc      	b.n	8007420 <UART_SetConfig+0x348>
 8007286:	2302      	movs	r3, #2
 8007288:	77fb      	strb	r3, [r7, #31]
 800728a:	e0c9      	b.n	8007420 <UART_SetConfig+0x348>
 800728c:	2304      	movs	r3, #4
 800728e:	77fb      	strb	r3, [r7, #31]
 8007290:	e0c6      	b.n	8007420 <UART_SetConfig+0x348>
 8007292:	2308      	movs	r3, #8
 8007294:	77fb      	strb	r3, [r7, #31]
 8007296:	e0c3      	b.n	8007420 <UART_SetConfig+0x348>
 8007298:	2310      	movs	r3, #16
 800729a:	77fb      	strb	r3, [r7, #31]
 800729c:	e0c0      	b.n	8007420 <UART_SetConfig+0x348>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a44      	ldr	r2, [pc, #272]	; (80073b4 <UART_SetConfig+0x2dc>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d125      	bne.n	80072f4 <UART_SetConfig+0x21c>
 80072a8:	4b3e      	ldr	r3, [pc, #248]	; (80073a4 <UART_SetConfig+0x2cc>)
 80072aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072b6:	d017      	beq.n	80072e8 <UART_SetConfig+0x210>
 80072b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072bc:	d817      	bhi.n	80072ee <UART_SetConfig+0x216>
 80072be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072c2:	d00b      	beq.n	80072dc <UART_SetConfig+0x204>
 80072c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072c8:	d811      	bhi.n	80072ee <UART_SetConfig+0x216>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d003      	beq.n	80072d6 <UART_SetConfig+0x1fe>
 80072ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072d2:	d006      	beq.n	80072e2 <UART_SetConfig+0x20a>
 80072d4:	e00b      	b.n	80072ee <UART_SetConfig+0x216>
 80072d6:	2300      	movs	r3, #0
 80072d8:	77fb      	strb	r3, [r7, #31]
 80072da:	e0a1      	b.n	8007420 <UART_SetConfig+0x348>
 80072dc:	2302      	movs	r3, #2
 80072de:	77fb      	strb	r3, [r7, #31]
 80072e0:	e09e      	b.n	8007420 <UART_SetConfig+0x348>
 80072e2:	2304      	movs	r3, #4
 80072e4:	77fb      	strb	r3, [r7, #31]
 80072e6:	e09b      	b.n	8007420 <UART_SetConfig+0x348>
 80072e8:	2308      	movs	r3, #8
 80072ea:	77fb      	strb	r3, [r7, #31]
 80072ec:	e098      	b.n	8007420 <UART_SetConfig+0x348>
 80072ee:	2310      	movs	r3, #16
 80072f0:	77fb      	strb	r3, [r7, #31]
 80072f2:	e095      	b.n	8007420 <UART_SetConfig+0x348>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a2f      	ldr	r2, [pc, #188]	; (80073b8 <UART_SetConfig+0x2e0>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d125      	bne.n	800734a <UART_SetConfig+0x272>
 80072fe:	4b29      	ldr	r3, [pc, #164]	; (80073a4 <UART_SetConfig+0x2cc>)
 8007300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007304:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007308:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800730c:	d017      	beq.n	800733e <UART_SetConfig+0x266>
 800730e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007312:	d817      	bhi.n	8007344 <UART_SetConfig+0x26c>
 8007314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007318:	d00b      	beq.n	8007332 <UART_SetConfig+0x25a>
 800731a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800731e:	d811      	bhi.n	8007344 <UART_SetConfig+0x26c>
 8007320:	2b00      	cmp	r3, #0
 8007322:	d003      	beq.n	800732c <UART_SetConfig+0x254>
 8007324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007328:	d006      	beq.n	8007338 <UART_SetConfig+0x260>
 800732a:	e00b      	b.n	8007344 <UART_SetConfig+0x26c>
 800732c:	2301      	movs	r3, #1
 800732e:	77fb      	strb	r3, [r7, #31]
 8007330:	e076      	b.n	8007420 <UART_SetConfig+0x348>
 8007332:	2302      	movs	r3, #2
 8007334:	77fb      	strb	r3, [r7, #31]
 8007336:	e073      	b.n	8007420 <UART_SetConfig+0x348>
 8007338:	2304      	movs	r3, #4
 800733a:	77fb      	strb	r3, [r7, #31]
 800733c:	e070      	b.n	8007420 <UART_SetConfig+0x348>
 800733e:	2308      	movs	r3, #8
 8007340:	77fb      	strb	r3, [r7, #31]
 8007342:	e06d      	b.n	8007420 <UART_SetConfig+0x348>
 8007344:	2310      	movs	r3, #16
 8007346:	77fb      	strb	r3, [r7, #31]
 8007348:	e06a      	b.n	8007420 <UART_SetConfig+0x348>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a1b      	ldr	r2, [pc, #108]	; (80073bc <UART_SetConfig+0x2e4>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d138      	bne.n	80073c6 <UART_SetConfig+0x2ee>
 8007354:	4b13      	ldr	r3, [pc, #76]	; (80073a4 <UART_SetConfig+0x2cc>)
 8007356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800735e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007362:	d017      	beq.n	8007394 <UART_SetConfig+0x2bc>
 8007364:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007368:	d82a      	bhi.n	80073c0 <UART_SetConfig+0x2e8>
 800736a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800736e:	d00b      	beq.n	8007388 <UART_SetConfig+0x2b0>
 8007370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007374:	d824      	bhi.n	80073c0 <UART_SetConfig+0x2e8>
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <UART_SetConfig+0x2aa>
 800737a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800737e:	d006      	beq.n	800738e <UART_SetConfig+0x2b6>
 8007380:	e01e      	b.n	80073c0 <UART_SetConfig+0x2e8>
 8007382:	2300      	movs	r3, #0
 8007384:	77fb      	strb	r3, [r7, #31]
 8007386:	e04b      	b.n	8007420 <UART_SetConfig+0x348>
 8007388:	2302      	movs	r3, #2
 800738a:	77fb      	strb	r3, [r7, #31]
 800738c:	e048      	b.n	8007420 <UART_SetConfig+0x348>
 800738e:	2304      	movs	r3, #4
 8007390:	77fb      	strb	r3, [r7, #31]
 8007392:	e045      	b.n	8007420 <UART_SetConfig+0x348>
 8007394:	2308      	movs	r3, #8
 8007396:	77fb      	strb	r3, [r7, #31]
 8007398:	e042      	b.n	8007420 <UART_SetConfig+0x348>
 800739a:	bf00      	nop
 800739c:	efff69f3 	.word	0xefff69f3
 80073a0:	40011000 	.word	0x40011000
 80073a4:	40023800 	.word	0x40023800
 80073a8:	40004400 	.word	0x40004400
 80073ac:	40004800 	.word	0x40004800
 80073b0:	40004c00 	.word	0x40004c00
 80073b4:	40005000 	.word	0x40005000
 80073b8:	40011400 	.word	0x40011400
 80073bc:	40007800 	.word	0x40007800
 80073c0:	2310      	movs	r3, #16
 80073c2:	77fb      	strb	r3, [r7, #31]
 80073c4:	e02c      	b.n	8007420 <UART_SetConfig+0x348>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a72      	ldr	r2, [pc, #456]	; (8007594 <UART_SetConfig+0x4bc>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d125      	bne.n	800741c <UART_SetConfig+0x344>
 80073d0:	4b71      	ldr	r3, [pc, #452]	; (8007598 <UART_SetConfig+0x4c0>)
 80073d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80073da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073de:	d017      	beq.n	8007410 <UART_SetConfig+0x338>
 80073e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073e4:	d817      	bhi.n	8007416 <UART_SetConfig+0x33e>
 80073e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073ea:	d00b      	beq.n	8007404 <UART_SetConfig+0x32c>
 80073ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073f0:	d811      	bhi.n	8007416 <UART_SetConfig+0x33e>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <UART_SetConfig+0x326>
 80073f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073fa:	d006      	beq.n	800740a <UART_SetConfig+0x332>
 80073fc:	e00b      	b.n	8007416 <UART_SetConfig+0x33e>
 80073fe:	2300      	movs	r3, #0
 8007400:	77fb      	strb	r3, [r7, #31]
 8007402:	e00d      	b.n	8007420 <UART_SetConfig+0x348>
 8007404:	2302      	movs	r3, #2
 8007406:	77fb      	strb	r3, [r7, #31]
 8007408:	e00a      	b.n	8007420 <UART_SetConfig+0x348>
 800740a:	2304      	movs	r3, #4
 800740c:	77fb      	strb	r3, [r7, #31]
 800740e:	e007      	b.n	8007420 <UART_SetConfig+0x348>
 8007410:	2308      	movs	r3, #8
 8007412:	77fb      	strb	r3, [r7, #31]
 8007414:	e004      	b.n	8007420 <UART_SetConfig+0x348>
 8007416:	2310      	movs	r3, #16
 8007418:	77fb      	strb	r3, [r7, #31]
 800741a:	e001      	b.n	8007420 <UART_SetConfig+0x348>
 800741c:	2310      	movs	r3, #16
 800741e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007428:	d15b      	bne.n	80074e2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800742a:	7ffb      	ldrb	r3, [r7, #31]
 800742c:	2b08      	cmp	r3, #8
 800742e:	d828      	bhi.n	8007482 <UART_SetConfig+0x3aa>
 8007430:	a201      	add	r2, pc, #4	; (adr r2, 8007438 <UART_SetConfig+0x360>)
 8007432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007436:	bf00      	nop
 8007438:	0800745d 	.word	0x0800745d
 800743c:	08007465 	.word	0x08007465
 8007440:	0800746d 	.word	0x0800746d
 8007444:	08007483 	.word	0x08007483
 8007448:	08007473 	.word	0x08007473
 800744c:	08007483 	.word	0x08007483
 8007450:	08007483 	.word	0x08007483
 8007454:	08007483 	.word	0x08007483
 8007458:	0800747b 	.word	0x0800747b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800745c:	f7fd fbfa 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 8007460:	61b8      	str	r0, [r7, #24]
        break;
 8007462:	e013      	b.n	800748c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007464:	f7fd fc0a 	bl	8004c7c <HAL_RCC_GetPCLK2Freq>
 8007468:	61b8      	str	r0, [r7, #24]
        break;
 800746a:	e00f      	b.n	800748c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800746c:	4b4b      	ldr	r3, [pc, #300]	; (800759c <UART_SetConfig+0x4c4>)
 800746e:	61bb      	str	r3, [r7, #24]
        break;
 8007470:	e00c      	b.n	800748c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007472:	f7fd fadd 	bl	8004a30 <HAL_RCC_GetSysClockFreq>
 8007476:	61b8      	str	r0, [r7, #24]
        break;
 8007478:	e008      	b.n	800748c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800747a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800747e:	61bb      	str	r3, [r7, #24]
        break;
 8007480:	e004      	b.n	800748c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	77bb      	strb	r3, [r7, #30]
        break;
 800748a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d074      	beq.n	800757c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	005a      	lsls	r2, r3, #1
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	441a      	add	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	2b0f      	cmp	r3, #15
 80074ac:	d916      	bls.n	80074dc <UART_SetConfig+0x404>
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074b4:	d212      	bcs.n	80074dc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	f023 030f 	bic.w	r3, r3, #15
 80074be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	085b      	lsrs	r3, r3, #1
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	89fb      	ldrh	r3, [r7, #14]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	89fa      	ldrh	r2, [r7, #14]
 80074d8:	60da      	str	r2, [r3, #12]
 80074da:	e04f      	b.n	800757c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	77bb      	strb	r3, [r7, #30]
 80074e0:	e04c      	b.n	800757c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074e2:	7ffb      	ldrb	r3, [r7, #31]
 80074e4:	2b08      	cmp	r3, #8
 80074e6:	d828      	bhi.n	800753a <UART_SetConfig+0x462>
 80074e8:	a201      	add	r2, pc, #4	; (adr r2, 80074f0 <UART_SetConfig+0x418>)
 80074ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ee:	bf00      	nop
 80074f0:	08007515 	.word	0x08007515
 80074f4:	0800751d 	.word	0x0800751d
 80074f8:	08007525 	.word	0x08007525
 80074fc:	0800753b 	.word	0x0800753b
 8007500:	0800752b 	.word	0x0800752b
 8007504:	0800753b 	.word	0x0800753b
 8007508:	0800753b 	.word	0x0800753b
 800750c:	0800753b 	.word	0x0800753b
 8007510:	08007533 	.word	0x08007533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007514:	f7fd fb9e 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 8007518:	61b8      	str	r0, [r7, #24]
        break;
 800751a:	e013      	b.n	8007544 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800751c:	f7fd fbae 	bl	8004c7c <HAL_RCC_GetPCLK2Freq>
 8007520:	61b8      	str	r0, [r7, #24]
        break;
 8007522:	e00f      	b.n	8007544 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007524:	4b1d      	ldr	r3, [pc, #116]	; (800759c <UART_SetConfig+0x4c4>)
 8007526:	61bb      	str	r3, [r7, #24]
        break;
 8007528:	e00c      	b.n	8007544 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800752a:	f7fd fa81 	bl	8004a30 <HAL_RCC_GetSysClockFreq>
 800752e:	61b8      	str	r0, [r7, #24]
        break;
 8007530:	e008      	b.n	8007544 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007536:	61bb      	str	r3, [r7, #24]
        break;
 8007538:	e004      	b.n	8007544 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800753a:	2300      	movs	r3, #0
 800753c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	77bb      	strb	r3, [r7, #30]
        break;
 8007542:	bf00      	nop
    }

    if (pclk != 0U)
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d018      	beq.n	800757c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	085a      	lsrs	r2, r3, #1
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	441a      	add	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	fbb2 f3f3 	udiv	r3, r2, r3
 800755c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	2b0f      	cmp	r3, #15
 8007562:	d909      	bls.n	8007578 <UART_SetConfig+0x4a0>
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800756a:	d205      	bcs.n	8007578 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	b29a      	uxth	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	60da      	str	r2, [r3, #12]
 8007576:	e001      	b.n	800757c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007588:	7fbb      	ldrb	r3, [r7, #30]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3720      	adds	r7, #32
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	40007c00 	.word	0x40007c00
 8007598:	40023800 	.word	0x40023800
 800759c:	00f42400 	.word	0x00f42400

080075a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00a      	beq.n	80075ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	430a      	orrs	r2, r1
 80075ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00a      	beq.n	800760e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	430a      	orrs	r2, r1
 800760c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	f003 0308 	and.w	r3, r3, #8
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00a      	beq.n	8007630 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	430a      	orrs	r2, r1
 800762e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	f003 0310 	and.w	r3, r3, #16
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00a      	beq.n	8007652 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	f003 0320 	and.w	r3, r3, #32
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767c:	2b00      	cmp	r3, #0
 800767e:	d01a      	beq.n	80076b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800769e:	d10a      	bne.n	80076b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	430a      	orrs	r2, r1
 80076b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00a      	beq.n	80076d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	430a      	orrs	r2, r1
 80076d6:	605a      	str	r2, [r3, #4]
  }
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af02      	add	r7, sp, #8
 80076ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076f4:	f7fb fb2a 	bl	8002d4c <HAL_GetTick>
 80076f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0308 	and.w	r3, r3, #8
 8007704:	2b08      	cmp	r3, #8
 8007706:	d10e      	bne.n	8007726 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007708:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f81b 	bl	8007752 <UART_WaitOnFlagUntilTimeout>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e011      	b.n	800774a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2220      	movs	r2, #32
 800772a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2220      	movs	r2, #32
 8007730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b09c      	sub	sp, #112	; 0x70
 8007756:	af00      	add	r7, sp, #0
 8007758:	60f8      	str	r0, [r7, #12]
 800775a:	60b9      	str	r1, [r7, #8]
 800775c:	603b      	str	r3, [r7, #0]
 800775e:	4613      	mov	r3, r2
 8007760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007762:	e0a7      	b.n	80078b4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007764:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776a:	f000 80a3 	beq.w	80078b4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800776e:	f7fb faed 	bl	8002d4c <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800777a:	429a      	cmp	r2, r3
 800777c:	d302      	bcc.n	8007784 <UART_WaitOnFlagUntilTimeout+0x32>
 800777e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007780:	2b00      	cmp	r3, #0
 8007782:	d13f      	bne.n	8007804 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800778c:	e853 3f00 	ldrex	r3, [r3]
 8007790:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007794:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007798:	667b      	str	r3, [r7, #100]	; 0x64
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	461a      	mov	r2, r3
 80077a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077a4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077aa:	e841 2300 	strex	r3, r2, [r1]
 80077ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80077b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1e6      	bne.n	8007784 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	3308      	adds	r3, #8
 80077bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c8:	f023 0301 	bic.w	r3, r3, #1
 80077cc:	663b      	str	r3, [r7, #96]	; 0x60
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3308      	adds	r3, #8
 80077d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80077d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077de:	e841 2300 	strex	r3, r2, [r1]
 80077e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80077e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1e5      	bne.n	80077b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2220      	movs	r2, #32
 80077ee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2220      	movs	r2, #32
 80077f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e068      	b.n	80078d6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0304 	and.w	r3, r3, #4
 800780e:	2b00      	cmp	r3, #0
 8007810:	d050      	beq.n	80078b4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800781c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007820:	d148      	bne.n	80078b4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800782a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007840:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800784a:	637b      	str	r3, [r7, #52]	; 0x34
 800784c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007850:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007852:	e841 2300 	strex	r3, r2, [r1]
 8007856:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e6      	bne.n	800782c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3308      	adds	r3, #8
 8007864:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	e853 3f00 	ldrex	r3, [r3]
 800786c:	613b      	str	r3, [r7, #16]
   return(result);
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f023 0301 	bic.w	r3, r3, #1
 8007874:	66bb      	str	r3, [r7, #104]	; 0x68
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3308      	adds	r3, #8
 800787c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800787e:	623a      	str	r2, [r7, #32]
 8007880:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007882:	69f9      	ldr	r1, [r7, #28]
 8007884:	6a3a      	ldr	r2, [r7, #32]
 8007886:	e841 2300 	strex	r3, r2, [r1]
 800788a:	61bb      	str	r3, [r7, #24]
   return(result);
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1e5      	bne.n	800785e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2220      	movs	r2, #32
 8007896:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2220      	movs	r2, #32
 800789c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2220      	movs	r2, #32
 80078a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e010      	b.n	80078d6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	69da      	ldr	r2, [r3, #28]
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	4013      	ands	r3, r2
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	bf0c      	ite	eq
 80078c4:	2301      	moveq	r3, #1
 80078c6:	2300      	movne	r3, #0
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	461a      	mov	r2, r3
 80078cc:	79fb      	ldrb	r3, [r7, #7]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	f43f af48 	beq.w	8007764 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3770      	adds	r7, #112	; 0x70
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
	...

080078e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b097      	sub	sp, #92	; 0x5c
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	4613      	mov	r3, r2
 80078ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	88fa      	ldrh	r2, [r7, #6]
 80078f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	88fa      	ldrh	r2, [r7, #6]
 8007900:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007912:	d10e      	bne.n	8007932 <UART_Start_Receive_IT+0x52>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d105      	bne.n	8007928 <UART_Start_Receive_IT+0x48>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007922:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007926:	e02d      	b.n	8007984 <UART_Start_Receive_IT+0xa4>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	22ff      	movs	r2, #255	; 0xff
 800792c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007930:	e028      	b.n	8007984 <UART_Start_Receive_IT+0xa4>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10d      	bne.n	8007956 <UART_Start_Receive_IT+0x76>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d104      	bne.n	800794c <UART_Start_Receive_IT+0x6c>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	22ff      	movs	r2, #255	; 0xff
 8007946:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800794a:	e01b      	b.n	8007984 <UART_Start_Receive_IT+0xa4>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	227f      	movs	r2, #127	; 0x7f
 8007950:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007954:	e016      	b.n	8007984 <UART_Start_Receive_IT+0xa4>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800795e:	d10d      	bne.n	800797c <UART_Start_Receive_IT+0x9c>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d104      	bne.n	8007972 <UART_Start_Receive_IT+0x92>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	227f      	movs	r2, #127	; 0x7f
 800796c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007970:	e008      	b.n	8007984 <UART_Start_Receive_IT+0xa4>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	223f      	movs	r2, #63	; 0x3f
 8007976:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800797a:	e003      	b.n	8007984 <UART_Start_Receive_IT+0xa4>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2222      	movs	r2, #34	; 0x22
 8007990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3308      	adds	r3, #8
 800799a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800799e:	e853 3f00 	ldrex	r3, [r3]
 80079a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a6:	f043 0301 	orr.w	r3, r3, #1
 80079aa:	657b      	str	r3, [r7, #84]	; 0x54
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3308      	adds	r3, #8
 80079b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079b4:	64ba      	str	r2, [r7, #72]	; 0x48
 80079b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079bc:	e841 2300 	strex	r3, r2, [r1]
 80079c0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1e5      	bne.n	8007994 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d0:	d107      	bne.n	80079e2 <UART_Start_Receive_IT+0x102>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d103      	bne.n	80079e2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4a21      	ldr	r2, [pc, #132]	; (8007a64 <UART_Start_Receive_IT+0x184>)
 80079de:	669a      	str	r2, [r3, #104]	; 0x68
 80079e0:	e002      	b.n	80079e8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	4a20      	ldr	r2, [pc, #128]	; (8007a68 <UART_Start_Receive_IT+0x188>)
 80079e6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d019      	beq.n	8007a24 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f8:	e853 3f00 	ldrex	r3, [r3]
 80079fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007a04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a10:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a16:	e841 2300 	strex	r3, r2, [r1]
 8007a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e6      	bne.n	80079f0 <UART_Start_Receive_IT+0x110>
 8007a22:	e018      	b.n	8007a56 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	e853 3f00 	ldrex	r3, [r3]
 8007a30:	613b      	str	r3, [r7, #16]
   return(result);
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	f043 0320 	orr.w	r3, r3, #32
 8007a38:	653b      	str	r3, [r7, #80]	; 0x50
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a42:	623b      	str	r3, [r7, #32]
 8007a44:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a46:	69f9      	ldr	r1, [r7, #28]
 8007a48:	6a3a      	ldr	r2, [r7, #32]
 8007a4a:	e841 2300 	strex	r3, r2, [r1]
 8007a4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1e6      	bne.n	8007a24 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	375c      	adds	r7, #92	; 0x5c
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr
 8007a64:	08007d1b 	.word	0x08007d1b
 8007a68:	08007bb5 	.word	0x08007bb5

08007a6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b095      	sub	sp, #84	; 0x54
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a7c:	e853 3f00 	ldrex	r3, [r3]
 8007a80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a92:	643b      	str	r3, [r7, #64]	; 0x40
 8007a94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a9a:	e841 2300 	strex	r3, r2, [r1]
 8007a9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1e6      	bne.n	8007a74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3308      	adds	r3, #8
 8007aac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	e853 3f00 	ldrex	r3, [r3]
 8007ab4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	f023 0301 	bic.w	r3, r3, #1
 8007abc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ace:	e841 2300 	strex	r3, r2, [r1]
 8007ad2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1e5      	bne.n	8007aa6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d118      	bne.n	8007b14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	e853 3f00 	ldrex	r3, [r3]
 8007aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f023 0310 	bic.w	r3, r3, #16
 8007af6:	647b      	str	r3, [r7, #68]	; 0x44
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	461a      	mov	r2, r3
 8007afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b00:	61bb      	str	r3, [r7, #24]
 8007b02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b04:	6979      	ldr	r1, [r7, #20]
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	e841 2300 	strex	r3, r2, [r1]
 8007b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e6      	bne.n	8007ae2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007b28:	bf00      	nop
 8007b2a:	3754      	adds	r7, #84	; 0x54
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f7ff faaa 	bl	80070ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b58:	bf00      	nop
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b088      	sub	sp, #32
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b7c:	61fb      	str	r3, [r7, #28]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	461a      	mov	r2, r3
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	61bb      	str	r3, [r7, #24]
 8007b88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	6979      	ldr	r1, [r7, #20]
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	613b      	str	r3, [r7, #16]
   return(result);
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e6      	bne.n	8007b68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7ff fa76 	bl	8007098 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bac:	bf00      	nop
 8007bae:	3720      	adds	r7, #32
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b096      	sub	sp, #88	; 0x58
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bc2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bcc:	2b22      	cmp	r3, #34	; 0x22
 8007bce:	f040 8098 	bne.w	8007d02 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007bdc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007be0:	b2d9      	uxtb	r1, r3
 8007be2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007be6:	b2da      	uxtb	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bec:	400a      	ands	r2, r1
 8007bee:	b2d2      	uxtb	r2, r2
 8007bf0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf6:	1c5a      	adds	r2, r3, #1
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	3b01      	subs	r3, #1
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d17b      	bne.n	8007d12 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c22:	e853 3f00 	ldrex	r3, [r3]
 8007c26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c2e:	653b      	str	r3, [r7, #80]	; 0x50
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	461a      	mov	r2, r3
 8007c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c38:	647b      	str	r3, [r7, #68]	; 0x44
 8007c3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c40:	e841 2300 	strex	r3, r2, [r1]
 8007c44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1e6      	bne.n	8007c1a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	3308      	adds	r3, #8
 8007c52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	e853 3f00 	ldrex	r3, [r3]
 8007c5a:	623b      	str	r3, [r7, #32]
   return(result);
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	f023 0301 	bic.w	r3, r3, #1
 8007c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3308      	adds	r3, #8
 8007c6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c6c:	633a      	str	r2, [r7, #48]	; 0x30
 8007c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c74:	e841 2300 	strex	r3, r2, [r1]
 8007c78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1e5      	bne.n	8007c4c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2220      	movs	r2, #32
 8007c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d12e      	bne.n	8007cfa <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	e853 3f00 	ldrex	r3, [r3]
 8007cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f023 0310 	bic.w	r3, r3, #16
 8007cb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cc0:	61fb      	str	r3, [r7, #28]
 8007cc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc4:	69b9      	ldr	r1, [r7, #24]
 8007cc6:	69fa      	ldr	r2, [r7, #28]
 8007cc8:	e841 2300 	strex	r3, r2, [r1]
 8007ccc:	617b      	str	r3, [r7, #20]
   return(result);
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1e6      	bne.n	8007ca2 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	f003 0310 	and.w	r3, r3, #16
 8007cde:	2b10      	cmp	r3, #16
 8007ce0:	d103      	bne.n	8007cea <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2210      	movs	r2, #16
 8007ce8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7ff f9e4 	bl	80070c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cf8:	e00b      	b.n	8007d12 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7fa fb82 	bl	8002404 <HAL_UART_RxCpltCallback>
}
 8007d00:	e007      	b.n	8007d12 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	699a      	ldr	r2, [r3, #24]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f042 0208 	orr.w	r2, r2, #8
 8007d10:	619a      	str	r2, [r3, #24]
}
 8007d12:	bf00      	nop
 8007d14:	3758      	adds	r7, #88	; 0x58
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b096      	sub	sp, #88	; 0x58
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d28:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d32:	2b22      	cmp	r3, #34	; 0x22
 8007d34:	f040 8098 	bne.w	8007e68 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d46:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007d48:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007d4c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007d50:	4013      	ands	r3, r2
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d56:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d5c:	1c9a      	adds	r2, r3, #2
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d17b      	bne.n	8007e78 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d88:	e853 3f00 	ldrex	r3, [r3]
 8007d8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d9e:	643b      	str	r3, [r7, #64]	; 0x40
 8007da0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007da4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007da6:	e841 2300 	strex	r3, r2, [r1]
 8007daa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e6      	bne.n	8007d80 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3308      	adds	r3, #8
 8007db8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	f023 0301 	bic.w	r3, r3, #1
 8007dc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3308      	adds	r3, #8
 8007dd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dda:	e841 2300 	strex	r3, r2, [r1]
 8007dde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1e5      	bne.n	8007db2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d12e      	bne.n	8007e60 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	e853 3f00 	ldrex	r3, [r3]
 8007e14:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	f023 0310 	bic.w	r3, r3, #16
 8007e1c:	647b      	str	r3, [r7, #68]	; 0x44
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	461a      	mov	r2, r3
 8007e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e26:	61bb      	str	r3, [r7, #24]
 8007e28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	6979      	ldr	r1, [r7, #20]
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	613b      	str	r3, [r7, #16]
   return(result);
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e6      	bne.n	8007e08 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69db      	ldr	r3, [r3, #28]
 8007e40:	f003 0310 	and.w	r3, r3, #16
 8007e44:	2b10      	cmp	r3, #16
 8007e46:	d103      	bne.n	8007e50 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2210      	movs	r2, #16
 8007e4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f7ff f931 	bl	80070c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e5e:	e00b      	b.n	8007e78 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7fa facf 	bl	8002404 <HAL_UART_RxCpltCallback>
}
 8007e66:	e007      	b.n	8007e78 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699a      	ldr	r2, [r3, #24]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f042 0208 	orr.w	r2, r2, #8
 8007e76:	619a      	str	r2, [r3, #24]
}
 8007e78:	bf00      	nop
 8007e7a:	3758      	adds	r7, #88	; 0x58
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e80:	b084      	sub	sp, #16
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	f107 001c 	add.w	r0, r7, #28
 8007e8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d120      	bne.n	8007eda <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68da      	ldr	r2, [r3, #12]
 8007ea8:	4b20      	ldr	r3, [pc, #128]	; (8007f2c <USB_CoreInit+0xac>)
 8007eaa:	4013      	ands	r3, r2
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d105      	bne.n	8007ece <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fa96 	bl	8008400 <USB_CoreReset>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	73fb      	strb	r3, [r7, #15]
 8007ed8:	e010      	b.n	8007efc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fa8a 	bl	8008400 <USB_CoreReset>
 8007eec:	4603      	mov	r3, r0
 8007eee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d10b      	bne.n	8007f1a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f043 0206 	orr.w	r2, r3, #6
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f043 0220 	orr.w	r2, r3, #32
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f26:	b004      	add	sp, #16
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	ffbdffbf 	.word	0xffbdffbf

08007f30 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f023 0201 	bic.w	r2, r3, #1
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b084      	sub	sp, #16
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f6e:	78fb      	ldrb	r3, [r7, #3]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d115      	bne.n	8007fa0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f80:	2001      	movs	r0, #1
 8007f82:	f7fa feef 	bl	8002d64 <HAL_Delay>
      ms++;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fa29 	bl	80083e4 <USB_GetMode>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d01e      	beq.n	8007fd6 <USB_SetCurrentMode+0x84>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2b31      	cmp	r3, #49	; 0x31
 8007f9c:	d9f0      	bls.n	8007f80 <USB_SetCurrentMode+0x2e>
 8007f9e:	e01a      	b.n	8007fd6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007fa0:	78fb      	ldrb	r3, [r7, #3]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d115      	bne.n	8007fd2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007fb2:	2001      	movs	r0, #1
 8007fb4:	f7fa fed6 	bl	8002d64 <HAL_Delay>
      ms++;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fa10 	bl	80083e4 <USB_GetMode>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d005      	beq.n	8007fd6 <USB_SetCurrentMode+0x84>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2b31      	cmp	r3, #49	; 0x31
 8007fce:	d9f0      	bls.n	8007fb2 <USB_SetCurrentMode+0x60>
 8007fd0:	e001      	b.n	8007fd6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e005      	b.n	8007fe2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2b32      	cmp	r3, #50	; 0x32
 8007fda:	d101      	bne.n	8007fe0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e000      	b.n	8007fe2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
	...

08007fec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fec:	b084      	sub	sp, #16
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b086      	sub	sp, #24
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ffa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008006:	2300      	movs	r3, #0
 8008008:	613b      	str	r3, [r7, #16]
 800800a:	e009      	b.n	8008020 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	3340      	adds	r3, #64	; 0x40
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	2200      	movs	r2, #0
 8008018:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	3301      	adds	r3, #1
 800801e:	613b      	str	r3, [r7, #16]
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	2b0e      	cmp	r3, #14
 8008024:	d9f2      	bls.n	800800c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008028:	2b00      	cmp	r3, #0
 800802a:	d11c      	bne.n	8008066 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800803a:	f043 0302 	orr.w	r3, r3, #2
 800803e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008044:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	e005      	b.n	8008072 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008078:	461a      	mov	r2, r3
 800807a:	2300      	movs	r3, #0
 800807c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008084:	4619      	mov	r1, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800808c:	461a      	mov	r2, r3
 800808e:	680b      	ldr	r3, [r1, #0]
 8008090:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008094:	2b01      	cmp	r3, #1
 8008096:	d10c      	bne.n	80080b2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809a:	2b00      	cmp	r3, #0
 800809c:	d104      	bne.n	80080a8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800809e:	2100      	movs	r1, #0
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f965 	bl	8008370 <USB_SetDevSpeed>
 80080a6:	e008      	b.n	80080ba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80080a8:	2101      	movs	r1, #1
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f960 	bl	8008370 <USB_SetDevSpeed>
 80080b0:	e003      	b.n	80080ba <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80080b2:	2103      	movs	r1, #3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f95b 	bl	8008370 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80080ba:	2110      	movs	r1, #16
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f8f3 	bl	80082a8 <USB_FlushTxFifo>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f91f 	bl	8008310 <USB_FlushRxFifo>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080e2:	461a      	mov	r2, r3
 80080e4:	2300      	movs	r3, #0
 80080e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ee:	461a      	mov	r2, r3
 80080f0:	2300      	movs	r3, #0
 80080f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080fa:	461a      	mov	r2, r3
 80080fc:	2300      	movs	r3, #0
 80080fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008100:	2300      	movs	r3, #0
 8008102:	613b      	str	r3, [r7, #16]
 8008104:	e043      	b.n	800818e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	4413      	add	r3, r2
 800810e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800811c:	d118      	bne.n	8008150 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10a      	bne.n	800813a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	015a      	lsls	r2, r3, #5
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	4413      	add	r3, r2
 800812c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008130:	461a      	mov	r2, r3
 8008132:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	e013      	b.n	8008162 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	015a      	lsls	r2, r3, #5
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	4413      	add	r3, r2
 8008142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008146:	461a      	mov	r2, r3
 8008148:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800814c:	6013      	str	r3, [r2, #0]
 800814e:	e008      	b.n	8008162 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	4413      	add	r3, r2
 8008158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800815c:	461a      	mov	r2, r3
 800815e:	2300      	movs	r3, #0
 8008160:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	015a      	lsls	r2, r3, #5
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	4413      	add	r3, r2
 800816a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816e:	461a      	mov	r2, r3
 8008170:	2300      	movs	r3, #0
 8008172:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	015a      	lsls	r2, r3, #5
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4413      	add	r3, r2
 800817c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008180:	461a      	mov	r2, r3
 8008182:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008186:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	3301      	adds	r3, #1
 800818c:	613b      	str	r3, [r7, #16]
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	429a      	cmp	r2, r3
 8008194:	d3b7      	bcc.n	8008106 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008196:	2300      	movs	r3, #0
 8008198:	613b      	str	r3, [r7, #16]
 800819a:	e043      	b.n	8008224 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081b2:	d118      	bne.n	80081e6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10a      	bne.n	80081d0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c6:	461a      	mov	r2, r3
 80081c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80081cc:	6013      	str	r3, [r2, #0]
 80081ce:	e013      	b.n	80081f8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	015a      	lsls	r2, r3, #5
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	4413      	add	r3, r2
 80081d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081dc:	461a      	mov	r2, r3
 80081de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	e008      	b.n	80081f8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	015a      	lsls	r2, r3, #5
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	4413      	add	r3, r2
 80081ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f2:	461a      	mov	r2, r3
 80081f4:	2300      	movs	r3, #0
 80081f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	015a      	lsls	r2, r3, #5
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	4413      	add	r3, r2
 8008200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008204:	461a      	mov	r2, r3
 8008206:	2300      	movs	r3, #0
 8008208:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	015a      	lsls	r2, r3, #5
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	4413      	add	r3, r2
 8008212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008216:	461a      	mov	r2, r3
 8008218:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800821c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	3301      	adds	r3, #1
 8008222:	613b      	str	r3, [r7, #16]
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	429a      	cmp	r2, r3
 800822a:	d3b7      	bcc.n	800819c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800823a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800823e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800824c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800824e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008250:	2b00      	cmp	r3, #0
 8008252:	d105      	bne.n	8008260 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	f043 0210 	orr.w	r2, r3, #16
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	699a      	ldr	r2, [r3, #24]
 8008264:	4b0e      	ldr	r3, [pc, #56]	; (80082a0 <USB_DevInit+0x2b4>)
 8008266:	4313      	orrs	r3, r2
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800826c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800826e:	2b00      	cmp	r3, #0
 8008270:	d005      	beq.n	800827e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	f043 0208 	orr.w	r2, r3, #8
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800827e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008280:	2b01      	cmp	r3, #1
 8008282:	d105      	bne.n	8008290 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	699a      	ldr	r2, [r3, #24]
 8008288:	4b06      	ldr	r3, [pc, #24]	; (80082a4 <USB_DevInit+0x2b8>)
 800828a:	4313      	orrs	r3, r2
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008290:	7dfb      	ldrb	r3, [r7, #23]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3718      	adds	r7, #24
 8008296:	46bd      	mov	sp, r7
 8008298:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800829c:	b004      	add	sp, #16
 800829e:	4770      	bx	lr
 80082a0:	803c3800 	.word	0x803c3800
 80082a4:	40000004 	.word	0x40000004

080082a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3301      	adds	r3, #1
 80082ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4a13      	ldr	r2, [pc, #76]	; (800830c <USB_FlushTxFifo+0x64>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d901      	bls.n	80082c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e01b      	b.n	8008300 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	daf2      	bge.n	80082b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80082d0:	2300      	movs	r3, #0
 80082d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	019b      	lsls	r3, r3, #6
 80082d8:	f043 0220 	orr.w	r2, r3, #32
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3301      	adds	r3, #1
 80082e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4a08      	ldr	r2, [pc, #32]	; (800830c <USB_FlushTxFifo+0x64>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d901      	bls.n	80082f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80082ee:	2303      	movs	r3, #3
 80082f0:	e006      	b.n	8008300 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	f003 0320 	and.w	r3, r3, #32
 80082fa:	2b20      	cmp	r3, #32
 80082fc:	d0f0      	beq.n	80082e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	00030d40 	.word	0x00030d40

08008310 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008318:	2300      	movs	r3, #0
 800831a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	3301      	adds	r3, #1
 8008320:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	4a11      	ldr	r2, [pc, #68]	; (800836c <USB_FlushRxFifo+0x5c>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d901      	bls.n	800832e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	e018      	b.n	8008360 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	daf2      	bge.n	800831c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2210      	movs	r2, #16
 800833e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	3301      	adds	r3, #1
 8008344:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	4a08      	ldr	r2, [pc, #32]	; (800836c <USB_FlushRxFifo+0x5c>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d901      	bls.n	8008352 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e006      	b.n	8008360 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	f003 0310 	and.w	r3, r3, #16
 800835a:	2b10      	cmp	r3, #16
 800835c:	d0f0      	beq.n	8008340 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	00030d40 	.word	0x00030d40

08008370 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	460b      	mov	r3, r1
 800837a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	78fb      	ldrb	r3, [r7, #3]
 800838a:	68f9      	ldr	r1, [r7, #12]
 800838c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008390:	4313      	orrs	r3, r2
 8008392:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b085      	sub	sp, #20
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083bc:	f023 0303 	bic.w	r3, r3, #3
 80083c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083d0:	f043 0302 	orr.w	r3, r3, #2
 80083d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	695b      	ldr	r3, [r3, #20]
 80083f0:	f003 0301 	and.w	r3, r3, #1
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008408:	2300      	movs	r3, #0
 800840a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	3301      	adds	r3, #1
 8008410:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	4a13      	ldr	r2, [pc, #76]	; (8008464 <USB_CoreReset+0x64>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d901      	bls.n	800841e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e01b      	b.n	8008456 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	2b00      	cmp	r3, #0
 8008424:	daf2      	bge.n	800840c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008426:	2300      	movs	r3, #0
 8008428:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	f043 0201 	orr.w	r2, r3, #1
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3301      	adds	r3, #1
 800843a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	4a09      	ldr	r2, [pc, #36]	; (8008464 <USB_CoreReset+0x64>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d901      	bls.n	8008448 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e006      	b.n	8008456 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	2b01      	cmp	r3, #1
 8008452:	d0f0      	beq.n	8008436 <USB_CoreReset+0x36>

  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	00030d40 	.word	0x00030d40

08008468 <atof>:
 8008468:	2100      	movs	r1, #0
 800846a:	f000 be0d 	b.w	8009088 <strtod>

0800846e <sulp>:
 800846e:	b570      	push	{r4, r5, r6, lr}
 8008470:	4604      	mov	r4, r0
 8008472:	460d      	mov	r5, r1
 8008474:	ec45 4b10 	vmov	d0, r4, r5
 8008478:	4616      	mov	r6, r2
 800847a:	f003 fac9 	bl	800ba10 <__ulp>
 800847e:	ec51 0b10 	vmov	r0, r1, d0
 8008482:	b17e      	cbz	r6, 80084a4 <sulp+0x36>
 8008484:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008488:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800848c:	2b00      	cmp	r3, #0
 800848e:	dd09      	ble.n	80084a4 <sulp+0x36>
 8008490:	051b      	lsls	r3, r3, #20
 8008492:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008496:	2400      	movs	r4, #0
 8008498:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800849c:	4622      	mov	r2, r4
 800849e:	462b      	mov	r3, r5
 80084a0:	f7f8 f8ca 	bl	8000638 <__aeabi_dmul>
 80084a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080084a8 <_strtod_l>:
 80084a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ac:	ed2d 8b02 	vpush	{d8}
 80084b0:	b09b      	sub	sp, #108	; 0x6c
 80084b2:	4604      	mov	r4, r0
 80084b4:	9213      	str	r2, [sp, #76]	; 0x4c
 80084b6:	2200      	movs	r2, #0
 80084b8:	9216      	str	r2, [sp, #88]	; 0x58
 80084ba:	460d      	mov	r5, r1
 80084bc:	f04f 0800 	mov.w	r8, #0
 80084c0:	f04f 0900 	mov.w	r9, #0
 80084c4:	460a      	mov	r2, r1
 80084c6:	9215      	str	r2, [sp, #84]	; 0x54
 80084c8:	7811      	ldrb	r1, [r2, #0]
 80084ca:	292b      	cmp	r1, #43	; 0x2b
 80084cc:	d04c      	beq.n	8008568 <_strtod_l+0xc0>
 80084ce:	d83a      	bhi.n	8008546 <_strtod_l+0x9e>
 80084d0:	290d      	cmp	r1, #13
 80084d2:	d834      	bhi.n	800853e <_strtod_l+0x96>
 80084d4:	2908      	cmp	r1, #8
 80084d6:	d834      	bhi.n	8008542 <_strtod_l+0x9a>
 80084d8:	2900      	cmp	r1, #0
 80084da:	d03d      	beq.n	8008558 <_strtod_l+0xb0>
 80084dc:	2200      	movs	r2, #0
 80084de:	920a      	str	r2, [sp, #40]	; 0x28
 80084e0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80084e2:	7832      	ldrb	r2, [r6, #0]
 80084e4:	2a30      	cmp	r2, #48	; 0x30
 80084e6:	f040 80b4 	bne.w	8008652 <_strtod_l+0x1aa>
 80084ea:	7872      	ldrb	r2, [r6, #1]
 80084ec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80084f0:	2a58      	cmp	r2, #88	; 0x58
 80084f2:	d170      	bne.n	80085d6 <_strtod_l+0x12e>
 80084f4:	9302      	str	r3, [sp, #8]
 80084f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084f8:	9301      	str	r3, [sp, #4]
 80084fa:	ab16      	add	r3, sp, #88	; 0x58
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	4a8e      	ldr	r2, [pc, #568]	; (8008738 <_strtod_l+0x290>)
 8008500:	ab17      	add	r3, sp, #92	; 0x5c
 8008502:	a915      	add	r1, sp, #84	; 0x54
 8008504:	4620      	mov	r0, r4
 8008506:	f002 fb61 	bl	800abcc <__gethex>
 800850a:	f010 070f 	ands.w	r7, r0, #15
 800850e:	4605      	mov	r5, r0
 8008510:	d005      	beq.n	800851e <_strtod_l+0x76>
 8008512:	2f06      	cmp	r7, #6
 8008514:	d12a      	bne.n	800856c <_strtod_l+0xc4>
 8008516:	3601      	adds	r6, #1
 8008518:	2300      	movs	r3, #0
 800851a:	9615      	str	r6, [sp, #84]	; 0x54
 800851c:	930a      	str	r3, [sp, #40]	; 0x28
 800851e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008520:	2b00      	cmp	r3, #0
 8008522:	f040 857f 	bne.w	8009024 <_strtod_l+0xb7c>
 8008526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008528:	b1db      	cbz	r3, 8008562 <_strtod_l+0xba>
 800852a:	4642      	mov	r2, r8
 800852c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008530:	ec43 2b10 	vmov	d0, r2, r3
 8008534:	b01b      	add	sp, #108	; 0x6c
 8008536:	ecbd 8b02 	vpop	{d8}
 800853a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800853e:	2920      	cmp	r1, #32
 8008540:	d1cc      	bne.n	80084dc <_strtod_l+0x34>
 8008542:	3201      	adds	r2, #1
 8008544:	e7bf      	b.n	80084c6 <_strtod_l+0x1e>
 8008546:	292d      	cmp	r1, #45	; 0x2d
 8008548:	d1c8      	bne.n	80084dc <_strtod_l+0x34>
 800854a:	2101      	movs	r1, #1
 800854c:	910a      	str	r1, [sp, #40]	; 0x28
 800854e:	1c51      	adds	r1, r2, #1
 8008550:	9115      	str	r1, [sp, #84]	; 0x54
 8008552:	7852      	ldrb	r2, [r2, #1]
 8008554:	2a00      	cmp	r2, #0
 8008556:	d1c3      	bne.n	80084e0 <_strtod_l+0x38>
 8008558:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800855a:	9515      	str	r5, [sp, #84]	; 0x54
 800855c:	2b00      	cmp	r3, #0
 800855e:	f040 855f 	bne.w	8009020 <_strtod_l+0xb78>
 8008562:	4642      	mov	r2, r8
 8008564:	464b      	mov	r3, r9
 8008566:	e7e3      	b.n	8008530 <_strtod_l+0x88>
 8008568:	2100      	movs	r1, #0
 800856a:	e7ef      	b.n	800854c <_strtod_l+0xa4>
 800856c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800856e:	b13a      	cbz	r2, 8008580 <_strtod_l+0xd8>
 8008570:	2135      	movs	r1, #53	; 0x35
 8008572:	a818      	add	r0, sp, #96	; 0x60
 8008574:	f003 fb49 	bl	800bc0a <__copybits>
 8008578:	9916      	ldr	r1, [sp, #88]	; 0x58
 800857a:	4620      	mov	r0, r4
 800857c:	f002 ff1c 	bl	800b3b8 <_Bfree>
 8008580:	3f01      	subs	r7, #1
 8008582:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008584:	2f04      	cmp	r7, #4
 8008586:	d806      	bhi.n	8008596 <_strtod_l+0xee>
 8008588:	e8df f007 	tbb	[pc, r7]
 800858c:	201d0314 	.word	0x201d0314
 8008590:	14          	.byte	0x14
 8008591:	00          	.byte	0x00
 8008592:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008596:	05e9      	lsls	r1, r5, #23
 8008598:	bf48      	it	mi
 800859a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800859e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80085a2:	0d1b      	lsrs	r3, r3, #20
 80085a4:	051b      	lsls	r3, r3, #20
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1b9      	bne.n	800851e <_strtod_l+0x76>
 80085aa:	f001 fb9d 	bl	8009ce8 <__errno>
 80085ae:	2322      	movs	r3, #34	; 0x22
 80085b0:	6003      	str	r3, [r0, #0]
 80085b2:	e7b4      	b.n	800851e <_strtod_l+0x76>
 80085b4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80085b8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80085bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80085c0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80085c4:	e7e7      	b.n	8008596 <_strtod_l+0xee>
 80085c6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008740 <_strtod_l+0x298>
 80085ca:	e7e4      	b.n	8008596 <_strtod_l+0xee>
 80085cc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80085d0:	f04f 38ff 	mov.w	r8, #4294967295
 80085d4:	e7df      	b.n	8008596 <_strtod_l+0xee>
 80085d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085d8:	1c5a      	adds	r2, r3, #1
 80085da:	9215      	str	r2, [sp, #84]	; 0x54
 80085dc:	785b      	ldrb	r3, [r3, #1]
 80085de:	2b30      	cmp	r3, #48	; 0x30
 80085e0:	d0f9      	beq.n	80085d6 <_strtod_l+0x12e>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d09b      	beq.n	800851e <_strtod_l+0x76>
 80085e6:	2301      	movs	r3, #1
 80085e8:	f04f 0a00 	mov.w	sl, #0
 80085ec:	9304      	str	r3, [sp, #16]
 80085ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80085f2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80085f6:	46d3      	mov	fp, sl
 80085f8:	220a      	movs	r2, #10
 80085fa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80085fc:	7806      	ldrb	r6, [r0, #0]
 80085fe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008602:	b2d9      	uxtb	r1, r3
 8008604:	2909      	cmp	r1, #9
 8008606:	d926      	bls.n	8008656 <_strtod_l+0x1ae>
 8008608:	494c      	ldr	r1, [pc, #304]	; (800873c <_strtod_l+0x294>)
 800860a:	2201      	movs	r2, #1
 800860c:	f001 fb0f 	bl	8009c2e <strncmp>
 8008610:	2800      	cmp	r0, #0
 8008612:	d030      	beq.n	8008676 <_strtod_l+0x1ce>
 8008614:	2000      	movs	r0, #0
 8008616:	4632      	mov	r2, r6
 8008618:	9005      	str	r0, [sp, #20]
 800861a:	465e      	mov	r6, fp
 800861c:	4603      	mov	r3, r0
 800861e:	2a65      	cmp	r2, #101	; 0x65
 8008620:	d001      	beq.n	8008626 <_strtod_l+0x17e>
 8008622:	2a45      	cmp	r2, #69	; 0x45
 8008624:	d113      	bne.n	800864e <_strtod_l+0x1a6>
 8008626:	b91e      	cbnz	r6, 8008630 <_strtod_l+0x188>
 8008628:	9a04      	ldr	r2, [sp, #16]
 800862a:	4302      	orrs	r2, r0
 800862c:	d094      	beq.n	8008558 <_strtod_l+0xb0>
 800862e:	2600      	movs	r6, #0
 8008630:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008632:	1c6a      	adds	r2, r5, #1
 8008634:	9215      	str	r2, [sp, #84]	; 0x54
 8008636:	786a      	ldrb	r2, [r5, #1]
 8008638:	2a2b      	cmp	r2, #43	; 0x2b
 800863a:	d074      	beq.n	8008726 <_strtod_l+0x27e>
 800863c:	2a2d      	cmp	r2, #45	; 0x2d
 800863e:	d078      	beq.n	8008732 <_strtod_l+0x28a>
 8008640:	f04f 0c00 	mov.w	ip, #0
 8008644:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008648:	2909      	cmp	r1, #9
 800864a:	d97f      	bls.n	800874c <_strtod_l+0x2a4>
 800864c:	9515      	str	r5, [sp, #84]	; 0x54
 800864e:	2700      	movs	r7, #0
 8008650:	e09e      	b.n	8008790 <_strtod_l+0x2e8>
 8008652:	2300      	movs	r3, #0
 8008654:	e7c8      	b.n	80085e8 <_strtod_l+0x140>
 8008656:	f1bb 0f08 	cmp.w	fp, #8
 800865a:	bfd8      	it	le
 800865c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800865e:	f100 0001 	add.w	r0, r0, #1
 8008662:	bfda      	itte	le
 8008664:	fb02 3301 	mlale	r3, r2, r1, r3
 8008668:	9309      	strle	r3, [sp, #36]	; 0x24
 800866a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800866e:	f10b 0b01 	add.w	fp, fp, #1
 8008672:	9015      	str	r0, [sp, #84]	; 0x54
 8008674:	e7c1      	b.n	80085fa <_strtod_l+0x152>
 8008676:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008678:	1c5a      	adds	r2, r3, #1
 800867a:	9215      	str	r2, [sp, #84]	; 0x54
 800867c:	785a      	ldrb	r2, [r3, #1]
 800867e:	f1bb 0f00 	cmp.w	fp, #0
 8008682:	d037      	beq.n	80086f4 <_strtod_l+0x24c>
 8008684:	9005      	str	r0, [sp, #20]
 8008686:	465e      	mov	r6, fp
 8008688:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800868c:	2b09      	cmp	r3, #9
 800868e:	d912      	bls.n	80086b6 <_strtod_l+0x20e>
 8008690:	2301      	movs	r3, #1
 8008692:	e7c4      	b.n	800861e <_strtod_l+0x176>
 8008694:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	9215      	str	r2, [sp, #84]	; 0x54
 800869a:	785a      	ldrb	r2, [r3, #1]
 800869c:	3001      	adds	r0, #1
 800869e:	2a30      	cmp	r2, #48	; 0x30
 80086a0:	d0f8      	beq.n	8008694 <_strtod_l+0x1ec>
 80086a2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80086a6:	2b08      	cmp	r3, #8
 80086a8:	f200 84c1 	bhi.w	800902e <_strtod_l+0xb86>
 80086ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086ae:	9005      	str	r0, [sp, #20]
 80086b0:	2000      	movs	r0, #0
 80086b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80086b4:	4606      	mov	r6, r0
 80086b6:	3a30      	subs	r2, #48	; 0x30
 80086b8:	f100 0301 	add.w	r3, r0, #1
 80086bc:	d014      	beq.n	80086e8 <_strtod_l+0x240>
 80086be:	9905      	ldr	r1, [sp, #20]
 80086c0:	4419      	add	r1, r3
 80086c2:	9105      	str	r1, [sp, #20]
 80086c4:	4633      	mov	r3, r6
 80086c6:	eb00 0c06 	add.w	ip, r0, r6
 80086ca:	210a      	movs	r1, #10
 80086cc:	4563      	cmp	r3, ip
 80086ce:	d113      	bne.n	80086f8 <_strtod_l+0x250>
 80086d0:	1833      	adds	r3, r6, r0
 80086d2:	2b08      	cmp	r3, #8
 80086d4:	f106 0601 	add.w	r6, r6, #1
 80086d8:	4406      	add	r6, r0
 80086da:	dc1a      	bgt.n	8008712 <_strtod_l+0x26a>
 80086dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086de:	230a      	movs	r3, #10
 80086e0:	fb03 2301 	mla	r3, r3, r1, r2
 80086e4:	9309      	str	r3, [sp, #36]	; 0x24
 80086e6:	2300      	movs	r3, #0
 80086e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80086ea:	1c51      	adds	r1, r2, #1
 80086ec:	9115      	str	r1, [sp, #84]	; 0x54
 80086ee:	7852      	ldrb	r2, [r2, #1]
 80086f0:	4618      	mov	r0, r3
 80086f2:	e7c9      	b.n	8008688 <_strtod_l+0x1e0>
 80086f4:	4658      	mov	r0, fp
 80086f6:	e7d2      	b.n	800869e <_strtod_l+0x1f6>
 80086f8:	2b08      	cmp	r3, #8
 80086fa:	f103 0301 	add.w	r3, r3, #1
 80086fe:	dc03      	bgt.n	8008708 <_strtod_l+0x260>
 8008700:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008702:	434f      	muls	r7, r1
 8008704:	9709      	str	r7, [sp, #36]	; 0x24
 8008706:	e7e1      	b.n	80086cc <_strtod_l+0x224>
 8008708:	2b10      	cmp	r3, #16
 800870a:	bfd8      	it	le
 800870c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008710:	e7dc      	b.n	80086cc <_strtod_l+0x224>
 8008712:	2e10      	cmp	r6, #16
 8008714:	bfdc      	itt	le
 8008716:	230a      	movle	r3, #10
 8008718:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800871c:	e7e3      	b.n	80086e6 <_strtod_l+0x23e>
 800871e:	2300      	movs	r3, #0
 8008720:	9305      	str	r3, [sp, #20]
 8008722:	2301      	movs	r3, #1
 8008724:	e780      	b.n	8008628 <_strtod_l+0x180>
 8008726:	f04f 0c00 	mov.w	ip, #0
 800872a:	1caa      	adds	r2, r5, #2
 800872c:	9215      	str	r2, [sp, #84]	; 0x54
 800872e:	78aa      	ldrb	r2, [r5, #2]
 8008730:	e788      	b.n	8008644 <_strtod_l+0x19c>
 8008732:	f04f 0c01 	mov.w	ip, #1
 8008736:	e7f8      	b.n	800872a <_strtod_l+0x282>
 8008738:	0800c7cc 	.word	0x0800c7cc
 800873c:	0800c7c8 	.word	0x0800c7c8
 8008740:	7ff00000 	.word	0x7ff00000
 8008744:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008746:	1c51      	adds	r1, r2, #1
 8008748:	9115      	str	r1, [sp, #84]	; 0x54
 800874a:	7852      	ldrb	r2, [r2, #1]
 800874c:	2a30      	cmp	r2, #48	; 0x30
 800874e:	d0f9      	beq.n	8008744 <_strtod_l+0x29c>
 8008750:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008754:	2908      	cmp	r1, #8
 8008756:	f63f af7a 	bhi.w	800864e <_strtod_l+0x1a6>
 800875a:	3a30      	subs	r2, #48	; 0x30
 800875c:	9208      	str	r2, [sp, #32]
 800875e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008760:	920c      	str	r2, [sp, #48]	; 0x30
 8008762:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008764:	1c57      	adds	r7, r2, #1
 8008766:	9715      	str	r7, [sp, #84]	; 0x54
 8008768:	7852      	ldrb	r2, [r2, #1]
 800876a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800876e:	f1be 0f09 	cmp.w	lr, #9
 8008772:	d938      	bls.n	80087e6 <_strtod_l+0x33e>
 8008774:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008776:	1a7f      	subs	r7, r7, r1
 8008778:	2f08      	cmp	r7, #8
 800877a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800877e:	dc03      	bgt.n	8008788 <_strtod_l+0x2e0>
 8008780:	9908      	ldr	r1, [sp, #32]
 8008782:	428f      	cmp	r7, r1
 8008784:	bfa8      	it	ge
 8008786:	460f      	movge	r7, r1
 8008788:	f1bc 0f00 	cmp.w	ip, #0
 800878c:	d000      	beq.n	8008790 <_strtod_l+0x2e8>
 800878e:	427f      	negs	r7, r7
 8008790:	2e00      	cmp	r6, #0
 8008792:	d14f      	bne.n	8008834 <_strtod_l+0x38c>
 8008794:	9904      	ldr	r1, [sp, #16]
 8008796:	4301      	orrs	r1, r0
 8008798:	f47f aec1 	bne.w	800851e <_strtod_l+0x76>
 800879c:	2b00      	cmp	r3, #0
 800879e:	f47f aedb 	bne.w	8008558 <_strtod_l+0xb0>
 80087a2:	2a69      	cmp	r2, #105	; 0x69
 80087a4:	d029      	beq.n	80087fa <_strtod_l+0x352>
 80087a6:	dc26      	bgt.n	80087f6 <_strtod_l+0x34e>
 80087a8:	2a49      	cmp	r2, #73	; 0x49
 80087aa:	d026      	beq.n	80087fa <_strtod_l+0x352>
 80087ac:	2a4e      	cmp	r2, #78	; 0x4e
 80087ae:	f47f aed3 	bne.w	8008558 <_strtod_l+0xb0>
 80087b2:	499b      	ldr	r1, [pc, #620]	; (8008a20 <_strtod_l+0x578>)
 80087b4:	a815      	add	r0, sp, #84	; 0x54
 80087b6:	f002 fc49 	bl	800b04c <__match>
 80087ba:	2800      	cmp	r0, #0
 80087bc:	f43f aecc 	beq.w	8008558 <_strtod_l+0xb0>
 80087c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	2b28      	cmp	r3, #40	; 0x28
 80087c6:	d12f      	bne.n	8008828 <_strtod_l+0x380>
 80087c8:	4996      	ldr	r1, [pc, #600]	; (8008a24 <_strtod_l+0x57c>)
 80087ca:	aa18      	add	r2, sp, #96	; 0x60
 80087cc:	a815      	add	r0, sp, #84	; 0x54
 80087ce:	f002 fc51 	bl	800b074 <__hexnan>
 80087d2:	2805      	cmp	r0, #5
 80087d4:	d128      	bne.n	8008828 <_strtod_l+0x380>
 80087d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80087d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80087dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80087e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80087e4:	e69b      	b.n	800851e <_strtod_l+0x76>
 80087e6:	9f08      	ldr	r7, [sp, #32]
 80087e8:	210a      	movs	r1, #10
 80087ea:	fb01 2107 	mla	r1, r1, r7, r2
 80087ee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80087f2:	9208      	str	r2, [sp, #32]
 80087f4:	e7b5      	b.n	8008762 <_strtod_l+0x2ba>
 80087f6:	2a6e      	cmp	r2, #110	; 0x6e
 80087f8:	e7d9      	b.n	80087ae <_strtod_l+0x306>
 80087fa:	498b      	ldr	r1, [pc, #556]	; (8008a28 <_strtod_l+0x580>)
 80087fc:	a815      	add	r0, sp, #84	; 0x54
 80087fe:	f002 fc25 	bl	800b04c <__match>
 8008802:	2800      	cmp	r0, #0
 8008804:	f43f aea8 	beq.w	8008558 <_strtod_l+0xb0>
 8008808:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800880a:	4988      	ldr	r1, [pc, #544]	; (8008a2c <_strtod_l+0x584>)
 800880c:	3b01      	subs	r3, #1
 800880e:	a815      	add	r0, sp, #84	; 0x54
 8008810:	9315      	str	r3, [sp, #84]	; 0x54
 8008812:	f002 fc1b 	bl	800b04c <__match>
 8008816:	b910      	cbnz	r0, 800881e <_strtod_l+0x376>
 8008818:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800881a:	3301      	adds	r3, #1
 800881c:	9315      	str	r3, [sp, #84]	; 0x54
 800881e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008a3c <_strtod_l+0x594>
 8008822:	f04f 0800 	mov.w	r8, #0
 8008826:	e67a      	b.n	800851e <_strtod_l+0x76>
 8008828:	4881      	ldr	r0, [pc, #516]	; (8008a30 <_strtod_l+0x588>)
 800882a:	f001 fa99 	bl	8009d60 <nan>
 800882e:	ec59 8b10 	vmov	r8, r9, d0
 8008832:	e674      	b.n	800851e <_strtod_l+0x76>
 8008834:	9b05      	ldr	r3, [sp, #20]
 8008836:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008838:	1afb      	subs	r3, r7, r3
 800883a:	f1bb 0f00 	cmp.w	fp, #0
 800883e:	bf08      	it	eq
 8008840:	46b3      	moveq	fp, r6
 8008842:	2e10      	cmp	r6, #16
 8008844:	9308      	str	r3, [sp, #32]
 8008846:	4635      	mov	r5, r6
 8008848:	bfa8      	it	ge
 800884a:	2510      	movge	r5, #16
 800884c:	f7f7 fe7a 	bl	8000544 <__aeabi_ui2d>
 8008850:	2e09      	cmp	r6, #9
 8008852:	4680      	mov	r8, r0
 8008854:	4689      	mov	r9, r1
 8008856:	dd13      	ble.n	8008880 <_strtod_l+0x3d8>
 8008858:	4b76      	ldr	r3, [pc, #472]	; (8008a34 <_strtod_l+0x58c>)
 800885a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800885e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008862:	f7f7 fee9 	bl	8000638 <__aeabi_dmul>
 8008866:	4680      	mov	r8, r0
 8008868:	4650      	mov	r0, sl
 800886a:	4689      	mov	r9, r1
 800886c:	f7f7 fe6a 	bl	8000544 <__aeabi_ui2d>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	4640      	mov	r0, r8
 8008876:	4649      	mov	r1, r9
 8008878:	f7f7 fd28 	bl	80002cc <__adddf3>
 800887c:	4680      	mov	r8, r0
 800887e:	4689      	mov	r9, r1
 8008880:	2e0f      	cmp	r6, #15
 8008882:	dc38      	bgt.n	80088f6 <_strtod_l+0x44e>
 8008884:	9b08      	ldr	r3, [sp, #32]
 8008886:	2b00      	cmp	r3, #0
 8008888:	f43f ae49 	beq.w	800851e <_strtod_l+0x76>
 800888c:	dd24      	ble.n	80088d8 <_strtod_l+0x430>
 800888e:	2b16      	cmp	r3, #22
 8008890:	dc0b      	bgt.n	80088aa <_strtod_l+0x402>
 8008892:	4968      	ldr	r1, [pc, #416]	; (8008a34 <_strtod_l+0x58c>)
 8008894:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800889c:	4642      	mov	r2, r8
 800889e:	464b      	mov	r3, r9
 80088a0:	f7f7 feca 	bl	8000638 <__aeabi_dmul>
 80088a4:	4680      	mov	r8, r0
 80088a6:	4689      	mov	r9, r1
 80088a8:	e639      	b.n	800851e <_strtod_l+0x76>
 80088aa:	9a08      	ldr	r2, [sp, #32]
 80088ac:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80088b0:	4293      	cmp	r3, r2
 80088b2:	db20      	blt.n	80088f6 <_strtod_l+0x44e>
 80088b4:	4c5f      	ldr	r4, [pc, #380]	; (8008a34 <_strtod_l+0x58c>)
 80088b6:	f1c6 060f 	rsb	r6, r6, #15
 80088ba:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80088be:	4642      	mov	r2, r8
 80088c0:	464b      	mov	r3, r9
 80088c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088c6:	f7f7 feb7 	bl	8000638 <__aeabi_dmul>
 80088ca:	9b08      	ldr	r3, [sp, #32]
 80088cc:	1b9e      	subs	r6, r3, r6
 80088ce:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80088d2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80088d6:	e7e3      	b.n	80088a0 <_strtod_l+0x3f8>
 80088d8:	9b08      	ldr	r3, [sp, #32]
 80088da:	3316      	adds	r3, #22
 80088dc:	db0b      	blt.n	80088f6 <_strtod_l+0x44e>
 80088de:	9b05      	ldr	r3, [sp, #20]
 80088e0:	1bdf      	subs	r7, r3, r7
 80088e2:	4b54      	ldr	r3, [pc, #336]	; (8008a34 <_strtod_l+0x58c>)
 80088e4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80088e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088ec:	4640      	mov	r0, r8
 80088ee:	4649      	mov	r1, r9
 80088f0:	f7f7 ffcc 	bl	800088c <__aeabi_ddiv>
 80088f4:	e7d6      	b.n	80088a4 <_strtod_l+0x3fc>
 80088f6:	9b08      	ldr	r3, [sp, #32]
 80088f8:	1b75      	subs	r5, r6, r5
 80088fa:	441d      	add	r5, r3
 80088fc:	2d00      	cmp	r5, #0
 80088fe:	dd70      	ble.n	80089e2 <_strtod_l+0x53a>
 8008900:	f015 030f 	ands.w	r3, r5, #15
 8008904:	d00a      	beq.n	800891c <_strtod_l+0x474>
 8008906:	494b      	ldr	r1, [pc, #300]	; (8008a34 <_strtod_l+0x58c>)
 8008908:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800890c:	4642      	mov	r2, r8
 800890e:	464b      	mov	r3, r9
 8008910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008914:	f7f7 fe90 	bl	8000638 <__aeabi_dmul>
 8008918:	4680      	mov	r8, r0
 800891a:	4689      	mov	r9, r1
 800891c:	f035 050f 	bics.w	r5, r5, #15
 8008920:	d04d      	beq.n	80089be <_strtod_l+0x516>
 8008922:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008926:	dd22      	ble.n	800896e <_strtod_l+0x4c6>
 8008928:	2500      	movs	r5, #0
 800892a:	46ab      	mov	fp, r5
 800892c:	9509      	str	r5, [sp, #36]	; 0x24
 800892e:	9505      	str	r5, [sp, #20]
 8008930:	2322      	movs	r3, #34	; 0x22
 8008932:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008a3c <_strtod_l+0x594>
 8008936:	6023      	str	r3, [r4, #0]
 8008938:	f04f 0800 	mov.w	r8, #0
 800893c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800893e:	2b00      	cmp	r3, #0
 8008940:	f43f aded 	beq.w	800851e <_strtod_l+0x76>
 8008944:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008946:	4620      	mov	r0, r4
 8008948:	f002 fd36 	bl	800b3b8 <_Bfree>
 800894c:	9905      	ldr	r1, [sp, #20]
 800894e:	4620      	mov	r0, r4
 8008950:	f002 fd32 	bl	800b3b8 <_Bfree>
 8008954:	4659      	mov	r1, fp
 8008956:	4620      	mov	r0, r4
 8008958:	f002 fd2e 	bl	800b3b8 <_Bfree>
 800895c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800895e:	4620      	mov	r0, r4
 8008960:	f002 fd2a 	bl	800b3b8 <_Bfree>
 8008964:	4629      	mov	r1, r5
 8008966:	4620      	mov	r0, r4
 8008968:	f002 fd26 	bl	800b3b8 <_Bfree>
 800896c:	e5d7      	b.n	800851e <_strtod_l+0x76>
 800896e:	4b32      	ldr	r3, [pc, #200]	; (8008a38 <_strtod_l+0x590>)
 8008970:	9304      	str	r3, [sp, #16]
 8008972:	2300      	movs	r3, #0
 8008974:	112d      	asrs	r5, r5, #4
 8008976:	4640      	mov	r0, r8
 8008978:	4649      	mov	r1, r9
 800897a:	469a      	mov	sl, r3
 800897c:	2d01      	cmp	r5, #1
 800897e:	dc21      	bgt.n	80089c4 <_strtod_l+0x51c>
 8008980:	b10b      	cbz	r3, 8008986 <_strtod_l+0x4de>
 8008982:	4680      	mov	r8, r0
 8008984:	4689      	mov	r9, r1
 8008986:	492c      	ldr	r1, [pc, #176]	; (8008a38 <_strtod_l+0x590>)
 8008988:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800898c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008990:	4642      	mov	r2, r8
 8008992:	464b      	mov	r3, r9
 8008994:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008998:	f7f7 fe4e 	bl	8000638 <__aeabi_dmul>
 800899c:	4b27      	ldr	r3, [pc, #156]	; (8008a3c <_strtod_l+0x594>)
 800899e:	460a      	mov	r2, r1
 80089a0:	400b      	ands	r3, r1
 80089a2:	4927      	ldr	r1, [pc, #156]	; (8008a40 <_strtod_l+0x598>)
 80089a4:	428b      	cmp	r3, r1
 80089a6:	4680      	mov	r8, r0
 80089a8:	d8be      	bhi.n	8008928 <_strtod_l+0x480>
 80089aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80089ae:	428b      	cmp	r3, r1
 80089b0:	bf86      	itte	hi
 80089b2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008a44 <_strtod_l+0x59c>
 80089b6:	f04f 38ff 	movhi.w	r8, #4294967295
 80089ba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80089be:	2300      	movs	r3, #0
 80089c0:	9304      	str	r3, [sp, #16]
 80089c2:	e07b      	b.n	8008abc <_strtod_l+0x614>
 80089c4:	07ea      	lsls	r2, r5, #31
 80089c6:	d505      	bpl.n	80089d4 <_strtod_l+0x52c>
 80089c8:	9b04      	ldr	r3, [sp, #16]
 80089ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ce:	f7f7 fe33 	bl	8000638 <__aeabi_dmul>
 80089d2:	2301      	movs	r3, #1
 80089d4:	9a04      	ldr	r2, [sp, #16]
 80089d6:	3208      	adds	r2, #8
 80089d8:	f10a 0a01 	add.w	sl, sl, #1
 80089dc:	106d      	asrs	r5, r5, #1
 80089de:	9204      	str	r2, [sp, #16]
 80089e0:	e7cc      	b.n	800897c <_strtod_l+0x4d4>
 80089e2:	d0ec      	beq.n	80089be <_strtod_l+0x516>
 80089e4:	426d      	negs	r5, r5
 80089e6:	f015 020f 	ands.w	r2, r5, #15
 80089ea:	d00a      	beq.n	8008a02 <_strtod_l+0x55a>
 80089ec:	4b11      	ldr	r3, [pc, #68]	; (8008a34 <_strtod_l+0x58c>)
 80089ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089f2:	4640      	mov	r0, r8
 80089f4:	4649      	mov	r1, r9
 80089f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fa:	f7f7 ff47 	bl	800088c <__aeabi_ddiv>
 80089fe:	4680      	mov	r8, r0
 8008a00:	4689      	mov	r9, r1
 8008a02:	112d      	asrs	r5, r5, #4
 8008a04:	d0db      	beq.n	80089be <_strtod_l+0x516>
 8008a06:	2d1f      	cmp	r5, #31
 8008a08:	dd1e      	ble.n	8008a48 <_strtod_l+0x5a0>
 8008a0a:	2500      	movs	r5, #0
 8008a0c:	46ab      	mov	fp, r5
 8008a0e:	9509      	str	r5, [sp, #36]	; 0x24
 8008a10:	9505      	str	r5, [sp, #20]
 8008a12:	2322      	movs	r3, #34	; 0x22
 8008a14:	f04f 0800 	mov.w	r8, #0
 8008a18:	f04f 0900 	mov.w	r9, #0
 8008a1c:	6023      	str	r3, [r4, #0]
 8008a1e:	e78d      	b.n	800893c <_strtod_l+0x494>
 8008a20:	0800c82d 	.word	0x0800c82d
 8008a24:	0800c7e0 	.word	0x0800c7e0
 8008a28:	0800c825 	.word	0x0800c825
 8008a2c:	0800c85f 	.word	0x0800c85f
 8008a30:	0800cbf1 	.word	0x0800cbf1
 8008a34:	0800c9d0 	.word	0x0800c9d0
 8008a38:	0800c9a8 	.word	0x0800c9a8
 8008a3c:	7ff00000 	.word	0x7ff00000
 8008a40:	7ca00000 	.word	0x7ca00000
 8008a44:	7fefffff 	.word	0x7fefffff
 8008a48:	f015 0310 	ands.w	r3, r5, #16
 8008a4c:	bf18      	it	ne
 8008a4e:	236a      	movne	r3, #106	; 0x6a
 8008a50:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008df4 <_strtod_l+0x94c>
 8008a54:	9304      	str	r3, [sp, #16]
 8008a56:	4640      	mov	r0, r8
 8008a58:	4649      	mov	r1, r9
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	07ea      	lsls	r2, r5, #31
 8008a5e:	d504      	bpl.n	8008a6a <_strtod_l+0x5c2>
 8008a60:	e9da 2300 	ldrd	r2, r3, [sl]
 8008a64:	f7f7 fde8 	bl	8000638 <__aeabi_dmul>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	106d      	asrs	r5, r5, #1
 8008a6c:	f10a 0a08 	add.w	sl, sl, #8
 8008a70:	d1f4      	bne.n	8008a5c <_strtod_l+0x5b4>
 8008a72:	b10b      	cbz	r3, 8008a78 <_strtod_l+0x5d0>
 8008a74:	4680      	mov	r8, r0
 8008a76:	4689      	mov	r9, r1
 8008a78:	9b04      	ldr	r3, [sp, #16]
 8008a7a:	b1bb      	cbz	r3, 8008aac <_strtod_l+0x604>
 8008a7c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008a80:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	4649      	mov	r1, r9
 8008a88:	dd10      	ble.n	8008aac <_strtod_l+0x604>
 8008a8a:	2b1f      	cmp	r3, #31
 8008a8c:	f340 811e 	ble.w	8008ccc <_strtod_l+0x824>
 8008a90:	2b34      	cmp	r3, #52	; 0x34
 8008a92:	bfde      	ittt	le
 8008a94:	f04f 33ff 	movle.w	r3, #4294967295
 8008a98:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008a9c:	4093      	lslle	r3, r2
 8008a9e:	f04f 0800 	mov.w	r8, #0
 8008aa2:	bfcc      	ite	gt
 8008aa4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008aa8:	ea03 0901 	andle.w	r9, r3, r1
 8008aac:	2200      	movs	r2, #0
 8008aae:	2300      	movs	r3, #0
 8008ab0:	4640      	mov	r0, r8
 8008ab2:	4649      	mov	r1, r9
 8008ab4:	f7f8 f828 	bl	8000b08 <__aeabi_dcmpeq>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d1a6      	bne.n	8008a0a <_strtod_l+0x562>
 8008abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ac2:	4633      	mov	r3, r6
 8008ac4:	465a      	mov	r2, fp
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f002 fcde 	bl	800b488 <__s2b>
 8008acc:	9009      	str	r0, [sp, #36]	; 0x24
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	f43f af2a 	beq.w	8008928 <_strtod_l+0x480>
 8008ad4:	9a08      	ldr	r2, [sp, #32]
 8008ad6:	9b05      	ldr	r3, [sp, #20]
 8008ad8:	2a00      	cmp	r2, #0
 8008ada:	eba3 0307 	sub.w	r3, r3, r7
 8008ade:	bfa8      	it	ge
 8008ae0:	2300      	movge	r3, #0
 8008ae2:	930c      	str	r3, [sp, #48]	; 0x30
 8008ae4:	2500      	movs	r5, #0
 8008ae6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008aea:	9312      	str	r3, [sp, #72]	; 0x48
 8008aec:	46ab      	mov	fp, r5
 8008aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af0:	4620      	mov	r0, r4
 8008af2:	6859      	ldr	r1, [r3, #4]
 8008af4:	f002 fc20 	bl	800b338 <_Balloc>
 8008af8:	9005      	str	r0, [sp, #20]
 8008afa:	2800      	cmp	r0, #0
 8008afc:	f43f af18 	beq.w	8008930 <_strtod_l+0x488>
 8008b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b02:	691a      	ldr	r2, [r3, #16]
 8008b04:	3202      	adds	r2, #2
 8008b06:	f103 010c 	add.w	r1, r3, #12
 8008b0a:	0092      	lsls	r2, r2, #2
 8008b0c:	300c      	adds	r0, #12
 8008b0e:	f001 f918 	bl	8009d42 <memcpy>
 8008b12:	ec49 8b10 	vmov	d0, r8, r9
 8008b16:	aa18      	add	r2, sp, #96	; 0x60
 8008b18:	a917      	add	r1, sp, #92	; 0x5c
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f002 ffe8 	bl	800baf0 <__d2b>
 8008b20:	ec49 8b18 	vmov	d8, r8, r9
 8008b24:	9016      	str	r0, [sp, #88]	; 0x58
 8008b26:	2800      	cmp	r0, #0
 8008b28:	f43f af02 	beq.w	8008930 <_strtod_l+0x488>
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f002 fd42 	bl	800b5b8 <__i2b>
 8008b34:	4683      	mov	fp, r0
 8008b36:	2800      	cmp	r0, #0
 8008b38:	f43f aefa 	beq.w	8008930 <_strtod_l+0x488>
 8008b3c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008b3e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008b40:	2e00      	cmp	r6, #0
 8008b42:	bfab      	itete	ge
 8008b44:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008b46:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008b48:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008b4a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008b4e:	bfac      	ite	ge
 8008b50:	eb06 0a03 	addge.w	sl, r6, r3
 8008b54:	1b9f      	sublt	r7, r3, r6
 8008b56:	9b04      	ldr	r3, [sp, #16]
 8008b58:	1af6      	subs	r6, r6, r3
 8008b5a:	4416      	add	r6, r2
 8008b5c:	4ba0      	ldr	r3, [pc, #640]	; (8008de0 <_strtod_l+0x938>)
 8008b5e:	3e01      	subs	r6, #1
 8008b60:	429e      	cmp	r6, r3
 8008b62:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008b66:	f280 80c4 	bge.w	8008cf2 <_strtod_l+0x84a>
 8008b6a:	1b9b      	subs	r3, r3, r6
 8008b6c:	2b1f      	cmp	r3, #31
 8008b6e:	eba2 0203 	sub.w	r2, r2, r3
 8008b72:	f04f 0101 	mov.w	r1, #1
 8008b76:	f300 80b0 	bgt.w	8008cda <_strtod_l+0x832>
 8008b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b7e:	930e      	str	r3, [sp, #56]	; 0x38
 8008b80:	2300      	movs	r3, #0
 8008b82:	930d      	str	r3, [sp, #52]	; 0x34
 8008b84:	eb0a 0602 	add.w	r6, sl, r2
 8008b88:	9b04      	ldr	r3, [sp, #16]
 8008b8a:	45b2      	cmp	sl, r6
 8008b8c:	4417      	add	r7, r2
 8008b8e:	441f      	add	r7, r3
 8008b90:	4653      	mov	r3, sl
 8008b92:	bfa8      	it	ge
 8008b94:	4633      	movge	r3, r6
 8008b96:	42bb      	cmp	r3, r7
 8008b98:	bfa8      	it	ge
 8008b9a:	463b      	movge	r3, r7
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	bfc2      	ittt	gt
 8008ba0:	1af6      	subgt	r6, r6, r3
 8008ba2:	1aff      	subgt	r7, r7, r3
 8008ba4:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	dd17      	ble.n	8008bde <_strtod_l+0x736>
 8008bae:	4659      	mov	r1, fp
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f002 fdc0 	bl	800b738 <__pow5mult>
 8008bb8:	4683      	mov	fp, r0
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	f43f aeb8 	beq.w	8008930 <_strtod_l+0x488>
 8008bc0:	4601      	mov	r1, r0
 8008bc2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	f002 fd0d 	bl	800b5e4 <__multiply>
 8008bca:	900b      	str	r0, [sp, #44]	; 0x2c
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	f43f aeaf 	beq.w	8008930 <_strtod_l+0x488>
 8008bd2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f002 fbef 	bl	800b3b8 <_Bfree>
 8008bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bdc:	9316      	str	r3, [sp, #88]	; 0x58
 8008bde:	2e00      	cmp	r6, #0
 8008be0:	f300 808c 	bgt.w	8008cfc <_strtod_l+0x854>
 8008be4:	9b08      	ldr	r3, [sp, #32]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	dd08      	ble.n	8008bfc <_strtod_l+0x754>
 8008bea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008bec:	9905      	ldr	r1, [sp, #20]
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f002 fda2 	bl	800b738 <__pow5mult>
 8008bf4:	9005      	str	r0, [sp, #20]
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	f43f ae9a 	beq.w	8008930 <_strtod_l+0x488>
 8008bfc:	2f00      	cmp	r7, #0
 8008bfe:	dd08      	ble.n	8008c12 <_strtod_l+0x76a>
 8008c00:	9905      	ldr	r1, [sp, #20]
 8008c02:	463a      	mov	r2, r7
 8008c04:	4620      	mov	r0, r4
 8008c06:	f002 fdf1 	bl	800b7ec <__lshift>
 8008c0a:	9005      	str	r0, [sp, #20]
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	f43f ae8f 	beq.w	8008930 <_strtod_l+0x488>
 8008c12:	f1ba 0f00 	cmp.w	sl, #0
 8008c16:	dd08      	ble.n	8008c2a <_strtod_l+0x782>
 8008c18:	4659      	mov	r1, fp
 8008c1a:	4652      	mov	r2, sl
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f002 fde5 	bl	800b7ec <__lshift>
 8008c22:	4683      	mov	fp, r0
 8008c24:	2800      	cmp	r0, #0
 8008c26:	f43f ae83 	beq.w	8008930 <_strtod_l+0x488>
 8008c2a:	9a05      	ldr	r2, [sp, #20]
 8008c2c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f002 fe64 	bl	800b8fc <__mdiff>
 8008c34:	4605      	mov	r5, r0
 8008c36:	2800      	cmp	r0, #0
 8008c38:	f43f ae7a 	beq.w	8008930 <_strtod_l+0x488>
 8008c3c:	68c3      	ldr	r3, [r0, #12]
 8008c3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c40:	2300      	movs	r3, #0
 8008c42:	60c3      	str	r3, [r0, #12]
 8008c44:	4659      	mov	r1, fp
 8008c46:	f002 fe3d 	bl	800b8c4 <__mcmp>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	da60      	bge.n	8008d10 <_strtod_l+0x868>
 8008c4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c50:	ea53 0308 	orrs.w	r3, r3, r8
 8008c54:	f040 8084 	bne.w	8008d60 <_strtod_l+0x8b8>
 8008c58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d17f      	bne.n	8008d60 <_strtod_l+0x8b8>
 8008c60:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c64:	0d1b      	lsrs	r3, r3, #20
 8008c66:	051b      	lsls	r3, r3, #20
 8008c68:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008c6c:	d978      	bls.n	8008d60 <_strtod_l+0x8b8>
 8008c6e:	696b      	ldr	r3, [r5, #20]
 8008c70:	b913      	cbnz	r3, 8008c78 <_strtod_l+0x7d0>
 8008c72:	692b      	ldr	r3, [r5, #16]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	dd73      	ble.n	8008d60 <_strtod_l+0x8b8>
 8008c78:	4629      	mov	r1, r5
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f002 fdb5 	bl	800b7ec <__lshift>
 8008c82:	4659      	mov	r1, fp
 8008c84:	4605      	mov	r5, r0
 8008c86:	f002 fe1d 	bl	800b8c4 <__mcmp>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	dd68      	ble.n	8008d60 <_strtod_l+0x8b8>
 8008c8e:	9904      	ldr	r1, [sp, #16]
 8008c90:	4a54      	ldr	r2, [pc, #336]	; (8008de4 <_strtod_l+0x93c>)
 8008c92:	464b      	mov	r3, r9
 8008c94:	2900      	cmp	r1, #0
 8008c96:	f000 8084 	beq.w	8008da2 <_strtod_l+0x8fa>
 8008c9a:	ea02 0109 	and.w	r1, r2, r9
 8008c9e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008ca2:	dc7e      	bgt.n	8008da2 <_strtod_l+0x8fa>
 8008ca4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008ca8:	f77f aeb3 	ble.w	8008a12 <_strtod_l+0x56a>
 8008cac:	4b4e      	ldr	r3, [pc, #312]	; (8008de8 <_strtod_l+0x940>)
 8008cae:	4640      	mov	r0, r8
 8008cb0:	4649      	mov	r1, r9
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f7f7 fcc0 	bl	8000638 <__aeabi_dmul>
 8008cb8:	4b4a      	ldr	r3, [pc, #296]	; (8008de4 <_strtod_l+0x93c>)
 8008cba:	400b      	ands	r3, r1
 8008cbc:	4680      	mov	r8, r0
 8008cbe:	4689      	mov	r9, r1
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f47f ae3f 	bne.w	8008944 <_strtod_l+0x49c>
 8008cc6:	2322      	movs	r3, #34	; 0x22
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	e63b      	b.n	8008944 <_strtod_l+0x49c>
 8008ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd4:	ea03 0808 	and.w	r8, r3, r8
 8008cd8:	e6e8      	b.n	8008aac <_strtod_l+0x604>
 8008cda:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008cde:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008ce2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008ce6:	36e2      	adds	r6, #226	; 0xe2
 8008ce8:	fa01 f306 	lsl.w	r3, r1, r6
 8008cec:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008cf0:	e748      	b.n	8008b84 <_strtod_l+0x6dc>
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008cfa:	e743      	b.n	8008b84 <_strtod_l+0x6dc>
 8008cfc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008cfe:	4632      	mov	r2, r6
 8008d00:	4620      	mov	r0, r4
 8008d02:	f002 fd73 	bl	800b7ec <__lshift>
 8008d06:	9016      	str	r0, [sp, #88]	; 0x58
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	f47f af6b 	bne.w	8008be4 <_strtod_l+0x73c>
 8008d0e:	e60f      	b.n	8008930 <_strtod_l+0x488>
 8008d10:	46ca      	mov	sl, r9
 8008d12:	d171      	bne.n	8008df8 <_strtod_l+0x950>
 8008d14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d16:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d1a:	b352      	cbz	r2, 8008d72 <_strtod_l+0x8ca>
 8008d1c:	4a33      	ldr	r2, [pc, #204]	; (8008dec <_strtod_l+0x944>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d12a      	bne.n	8008d78 <_strtod_l+0x8d0>
 8008d22:	9b04      	ldr	r3, [sp, #16]
 8008d24:	4641      	mov	r1, r8
 8008d26:	b1fb      	cbz	r3, 8008d68 <_strtod_l+0x8c0>
 8008d28:	4b2e      	ldr	r3, [pc, #184]	; (8008de4 <_strtod_l+0x93c>)
 8008d2a:	ea09 0303 	and.w	r3, r9, r3
 8008d2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008d32:	f04f 32ff 	mov.w	r2, #4294967295
 8008d36:	d81a      	bhi.n	8008d6e <_strtod_l+0x8c6>
 8008d38:	0d1b      	lsrs	r3, r3, #20
 8008d3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d42:	4299      	cmp	r1, r3
 8008d44:	d118      	bne.n	8008d78 <_strtod_l+0x8d0>
 8008d46:	4b2a      	ldr	r3, [pc, #168]	; (8008df0 <_strtod_l+0x948>)
 8008d48:	459a      	cmp	sl, r3
 8008d4a:	d102      	bne.n	8008d52 <_strtod_l+0x8aa>
 8008d4c:	3101      	adds	r1, #1
 8008d4e:	f43f adef 	beq.w	8008930 <_strtod_l+0x488>
 8008d52:	4b24      	ldr	r3, [pc, #144]	; (8008de4 <_strtod_l+0x93c>)
 8008d54:	ea0a 0303 	and.w	r3, sl, r3
 8008d58:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008d5c:	f04f 0800 	mov.w	r8, #0
 8008d60:	9b04      	ldr	r3, [sp, #16]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1a2      	bne.n	8008cac <_strtod_l+0x804>
 8008d66:	e5ed      	b.n	8008944 <_strtod_l+0x49c>
 8008d68:	f04f 33ff 	mov.w	r3, #4294967295
 8008d6c:	e7e9      	b.n	8008d42 <_strtod_l+0x89a>
 8008d6e:	4613      	mov	r3, r2
 8008d70:	e7e7      	b.n	8008d42 <_strtod_l+0x89a>
 8008d72:	ea53 0308 	orrs.w	r3, r3, r8
 8008d76:	d08a      	beq.n	8008c8e <_strtod_l+0x7e6>
 8008d78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d7a:	b1e3      	cbz	r3, 8008db6 <_strtod_l+0x90e>
 8008d7c:	ea13 0f0a 	tst.w	r3, sl
 8008d80:	d0ee      	beq.n	8008d60 <_strtod_l+0x8b8>
 8008d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d84:	9a04      	ldr	r2, [sp, #16]
 8008d86:	4640      	mov	r0, r8
 8008d88:	4649      	mov	r1, r9
 8008d8a:	b1c3      	cbz	r3, 8008dbe <_strtod_l+0x916>
 8008d8c:	f7ff fb6f 	bl	800846e <sulp>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	ec51 0b18 	vmov	r0, r1, d8
 8008d98:	f7f7 fa98 	bl	80002cc <__adddf3>
 8008d9c:	4680      	mov	r8, r0
 8008d9e:	4689      	mov	r9, r1
 8008da0:	e7de      	b.n	8008d60 <_strtod_l+0x8b8>
 8008da2:	4013      	ands	r3, r2
 8008da4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008da8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008dac:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008db0:	f04f 38ff 	mov.w	r8, #4294967295
 8008db4:	e7d4      	b.n	8008d60 <_strtod_l+0x8b8>
 8008db6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008db8:	ea13 0f08 	tst.w	r3, r8
 8008dbc:	e7e0      	b.n	8008d80 <_strtod_l+0x8d8>
 8008dbe:	f7ff fb56 	bl	800846e <sulp>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	ec51 0b18 	vmov	r0, r1, d8
 8008dca:	f7f7 fa7d 	bl	80002c8 <__aeabi_dsub>
 8008dce:	2200      	movs	r2, #0
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	4680      	mov	r8, r0
 8008dd4:	4689      	mov	r9, r1
 8008dd6:	f7f7 fe97 	bl	8000b08 <__aeabi_dcmpeq>
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	d0c0      	beq.n	8008d60 <_strtod_l+0x8b8>
 8008dde:	e618      	b.n	8008a12 <_strtod_l+0x56a>
 8008de0:	fffffc02 	.word	0xfffffc02
 8008de4:	7ff00000 	.word	0x7ff00000
 8008de8:	39500000 	.word	0x39500000
 8008dec:	000fffff 	.word	0x000fffff
 8008df0:	7fefffff 	.word	0x7fefffff
 8008df4:	0800c7f8 	.word	0x0800c7f8
 8008df8:	4659      	mov	r1, fp
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	f002 fed2 	bl	800bba4 <__ratio>
 8008e00:	ec57 6b10 	vmov	r6, r7, d0
 8008e04:	ee10 0a10 	vmov	r0, s0
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008e0e:	4639      	mov	r1, r7
 8008e10:	f7f7 fe8e 	bl	8000b30 <__aeabi_dcmple>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d071      	beq.n	8008efc <_strtod_l+0xa54>
 8008e18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d17c      	bne.n	8008f18 <_strtod_l+0xa70>
 8008e1e:	f1b8 0f00 	cmp.w	r8, #0
 8008e22:	d15a      	bne.n	8008eda <_strtod_l+0xa32>
 8008e24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d15d      	bne.n	8008ee8 <_strtod_l+0xa40>
 8008e2c:	4b90      	ldr	r3, [pc, #576]	; (8009070 <_strtod_l+0xbc8>)
 8008e2e:	2200      	movs	r2, #0
 8008e30:	4630      	mov	r0, r6
 8008e32:	4639      	mov	r1, r7
 8008e34:	f7f7 fe72 	bl	8000b1c <__aeabi_dcmplt>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d15c      	bne.n	8008ef6 <_strtod_l+0xa4e>
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	4639      	mov	r1, r7
 8008e40:	4b8c      	ldr	r3, [pc, #560]	; (8009074 <_strtod_l+0xbcc>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	f7f7 fbf8 	bl	8000638 <__aeabi_dmul>
 8008e48:	4606      	mov	r6, r0
 8008e4a:	460f      	mov	r7, r1
 8008e4c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008e50:	9606      	str	r6, [sp, #24]
 8008e52:	9307      	str	r3, [sp, #28]
 8008e54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e58:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008e5c:	4b86      	ldr	r3, [pc, #536]	; (8009078 <_strtod_l+0xbd0>)
 8008e5e:	ea0a 0303 	and.w	r3, sl, r3
 8008e62:	930d      	str	r3, [sp, #52]	; 0x34
 8008e64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e66:	4b85      	ldr	r3, [pc, #532]	; (800907c <_strtod_l+0xbd4>)
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	f040 8090 	bne.w	8008f8e <_strtod_l+0xae6>
 8008e6e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008e72:	ec49 8b10 	vmov	d0, r8, r9
 8008e76:	f002 fdcb 	bl	800ba10 <__ulp>
 8008e7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e7e:	ec51 0b10 	vmov	r0, r1, d0
 8008e82:	f7f7 fbd9 	bl	8000638 <__aeabi_dmul>
 8008e86:	4642      	mov	r2, r8
 8008e88:	464b      	mov	r3, r9
 8008e8a:	f7f7 fa1f 	bl	80002cc <__adddf3>
 8008e8e:	460b      	mov	r3, r1
 8008e90:	4979      	ldr	r1, [pc, #484]	; (8009078 <_strtod_l+0xbd0>)
 8008e92:	4a7b      	ldr	r2, [pc, #492]	; (8009080 <_strtod_l+0xbd8>)
 8008e94:	4019      	ands	r1, r3
 8008e96:	4291      	cmp	r1, r2
 8008e98:	4680      	mov	r8, r0
 8008e9a:	d944      	bls.n	8008f26 <_strtod_l+0xa7e>
 8008e9c:	ee18 2a90 	vmov	r2, s17
 8008ea0:	4b78      	ldr	r3, [pc, #480]	; (8009084 <_strtod_l+0xbdc>)
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d104      	bne.n	8008eb0 <_strtod_l+0xa08>
 8008ea6:	ee18 3a10 	vmov	r3, s16
 8008eaa:	3301      	adds	r3, #1
 8008eac:	f43f ad40 	beq.w	8008930 <_strtod_l+0x488>
 8008eb0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009084 <_strtod_l+0xbdc>
 8008eb4:	f04f 38ff 	mov.w	r8, #4294967295
 8008eb8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f002 fa7c 	bl	800b3b8 <_Bfree>
 8008ec0:	9905      	ldr	r1, [sp, #20]
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f002 fa78 	bl	800b3b8 <_Bfree>
 8008ec8:	4659      	mov	r1, fp
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f002 fa74 	bl	800b3b8 <_Bfree>
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f002 fa70 	bl	800b3b8 <_Bfree>
 8008ed8:	e609      	b.n	8008aee <_strtod_l+0x646>
 8008eda:	f1b8 0f01 	cmp.w	r8, #1
 8008ede:	d103      	bne.n	8008ee8 <_strtod_l+0xa40>
 8008ee0:	f1b9 0f00 	cmp.w	r9, #0
 8008ee4:	f43f ad95 	beq.w	8008a12 <_strtod_l+0x56a>
 8008ee8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009040 <_strtod_l+0xb98>
 8008eec:	4f60      	ldr	r7, [pc, #384]	; (8009070 <_strtod_l+0xbc8>)
 8008eee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008ef2:	2600      	movs	r6, #0
 8008ef4:	e7ae      	b.n	8008e54 <_strtod_l+0x9ac>
 8008ef6:	4f5f      	ldr	r7, [pc, #380]	; (8009074 <_strtod_l+0xbcc>)
 8008ef8:	2600      	movs	r6, #0
 8008efa:	e7a7      	b.n	8008e4c <_strtod_l+0x9a4>
 8008efc:	4b5d      	ldr	r3, [pc, #372]	; (8009074 <_strtod_l+0xbcc>)
 8008efe:	4630      	mov	r0, r6
 8008f00:	4639      	mov	r1, r7
 8008f02:	2200      	movs	r2, #0
 8008f04:	f7f7 fb98 	bl	8000638 <__aeabi_dmul>
 8008f08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f0a:	4606      	mov	r6, r0
 8008f0c:	460f      	mov	r7, r1
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d09c      	beq.n	8008e4c <_strtod_l+0x9a4>
 8008f12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008f16:	e79d      	b.n	8008e54 <_strtod_l+0x9ac>
 8008f18:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009048 <_strtod_l+0xba0>
 8008f1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008f20:	ec57 6b17 	vmov	r6, r7, d7
 8008f24:	e796      	b.n	8008e54 <_strtod_l+0x9ac>
 8008f26:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008f2a:	9b04      	ldr	r3, [sp, #16]
 8008f2c:	46ca      	mov	sl, r9
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1c2      	bne.n	8008eb8 <_strtod_l+0xa10>
 8008f32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f38:	0d1b      	lsrs	r3, r3, #20
 8008f3a:	051b      	lsls	r3, r3, #20
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d1bb      	bne.n	8008eb8 <_strtod_l+0xa10>
 8008f40:	4630      	mov	r0, r6
 8008f42:	4639      	mov	r1, r7
 8008f44:	f7f7 ff28 	bl	8000d98 <__aeabi_d2lz>
 8008f48:	f7f7 fb48 	bl	80005dc <__aeabi_l2d>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	460b      	mov	r3, r1
 8008f50:	4630      	mov	r0, r6
 8008f52:	4639      	mov	r1, r7
 8008f54:	f7f7 f9b8 	bl	80002c8 <__aeabi_dsub>
 8008f58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f5e:	ea43 0308 	orr.w	r3, r3, r8
 8008f62:	4313      	orrs	r3, r2
 8008f64:	4606      	mov	r6, r0
 8008f66:	460f      	mov	r7, r1
 8008f68:	d054      	beq.n	8009014 <_strtod_l+0xb6c>
 8008f6a:	a339      	add	r3, pc, #228	; (adr r3, 8009050 <_strtod_l+0xba8>)
 8008f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f70:	f7f7 fdd4 	bl	8000b1c <__aeabi_dcmplt>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	f47f ace5 	bne.w	8008944 <_strtod_l+0x49c>
 8008f7a:	a337      	add	r3, pc, #220	; (adr r3, 8009058 <_strtod_l+0xbb0>)
 8008f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f80:	4630      	mov	r0, r6
 8008f82:	4639      	mov	r1, r7
 8008f84:	f7f7 fde8 	bl	8000b58 <__aeabi_dcmpgt>
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	d095      	beq.n	8008eb8 <_strtod_l+0xa10>
 8008f8c:	e4da      	b.n	8008944 <_strtod_l+0x49c>
 8008f8e:	9b04      	ldr	r3, [sp, #16]
 8008f90:	b333      	cbz	r3, 8008fe0 <_strtod_l+0xb38>
 8008f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008f98:	d822      	bhi.n	8008fe0 <_strtod_l+0xb38>
 8008f9a:	a331      	add	r3, pc, #196	; (adr r3, 8009060 <_strtod_l+0xbb8>)
 8008f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	4639      	mov	r1, r7
 8008fa4:	f7f7 fdc4 	bl	8000b30 <__aeabi_dcmple>
 8008fa8:	b1a0      	cbz	r0, 8008fd4 <_strtod_l+0xb2c>
 8008faa:	4639      	mov	r1, r7
 8008fac:	4630      	mov	r0, r6
 8008fae:	f7f7 fe1b 	bl	8000be8 <__aeabi_d2uiz>
 8008fb2:	2801      	cmp	r0, #1
 8008fb4:	bf38      	it	cc
 8008fb6:	2001      	movcc	r0, #1
 8008fb8:	f7f7 fac4 	bl	8000544 <__aeabi_ui2d>
 8008fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fbe:	4606      	mov	r6, r0
 8008fc0:	460f      	mov	r7, r1
 8008fc2:	bb23      	cbnz	r3, 800900e <_strtod_l+0xb66>
 8008fc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fc8:	9010      	str	r0, [sp, #64]	; 0x40
 8008fca:	9311      	str	r3, [sp, #68]	; 0x44
 8008fcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008fd0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008fd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fd8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008fdc:	1a9b      	subs	r3, r3, r2
 8008fde:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fe0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008fe4:	eeb0 0a48 	vmov.f32	s0, s16
 8008fe8:	eef0 0a68 	vmov.f32	s1, s17
 8008fec:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008ff0:	f002 fd0e 	bl	800ba10 <__ulp>
 8008ff4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008ff8:	ec53 2b10 	vmov	r2, r3, d0
 8008ffc:	f7f7 fb1c 	bl	8000638 <__aeabi_dmul>
 8009000:	ec53 2b18 	vmov	r2, r3, d8
 8009004:	f7f7 f962 	bl	80002cc <__adddf3>
 8009008:	4680      	mov	r8, r0
 800900a:	4689      	mov	r9, r1
 800900c:	e78d      	b.n	8008f2a <_strtod_l+0xa82>
 800900e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009012:	e7db      	b.n	8008fcc <_strtod_l+0xb24>
 8009014:	a314      	add	r3, pc, #80	; (adr r3, 8009068 <_strtod_l+0xbc0>)
 8009016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901a:	f7f7 fd7f 	bl	8000b1c <__aeabi_dcmplt>
 800901e:	e7b3      	b.n	8008f88 <_strtod_l+0xae0>
 8009020:	2300      	movs	r3, #0
 8009022:	930a      	str	r3, [sp, #40]	; 0x28
 8009024:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009026:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009028:	6013      	str	r3, [r2, #0]
 800902a:	f7ff ba7c 	b.w	8008526 <_strtod_l+0x7e>
 800902e:	2a65      	cmp	r2, #101	; 0x65
 8009030:	f43f ab75 	beq.w	800871e <_strtod_l+0x276>
 8009034:	2a45      	cmp	r2, #69	; 0x45
 8009036:	f43f ab72 	beq.w	800871e <_strtod_l+0x276>
 800903a:	2301      	movs	r3, #1
 800903c:	f7ff bbaa 	b.w	8008794 <_strtod_l+0x2ec>
 8009040:	00000000 	.word	0x00000000
 8009044:	bff00000 	.word	0xbff00000
 8009048:	00000000 	.word	0x00000000
 800904c:	3ff00000 	.word	0x3ff00000
 8009050:	94a03595 	.word	0x94a03595
 8009054:	3fdfffff 	.word	0x3fdfffff
 8009058:	35afe535 	.word	0x35afe535
 800905c:	3fe00000 	.word	0x3fe00000
 8009060:	ffc00000 	.word	0xffc00000
 8009064:	41dfffff 	.word	0x41dfffff
 8009068:	94a03595 	.word	0x94a03595
 800906c:	3fcfffff 	.word	0x3fcfffff
 8009070:	3ff00000 	.word	0x3ff00000
 8009074:	3fe00000 	.word	0x3fe00000
 8009078:	7ff00000 	.word	0x7ff00000
 800907c:	7fe00000 	.word	0x7fe00000
 8009080:	7c9fffff 	.word	0x7c9fffff
 8009084:	7fefffff 	.word	0x7fefffff

08009088 <strtod>:
 8009088:	460a      	mov	r2, r1
 800908a:	4601      	mov	r1, r0
 800908c:	4802      	ldr	r0, [pc, #8]	; (8009098 <strtod+0x10>)
 800908e:	4b03      	ldr	r3, [pc, #12]	; (800909c <strtod+0x14>)
 8009090:	6800      	ldr	r0, [r0, #0]
 8009092:	f7ff ba09 	b.w	80084a8 <_strtod_l>
 8009096:	bf00      	nop
 8009098:	200001e4 	.word	0x200001e4
 800909c:	2000002c 	.word	0x2000002c

080090a0 <__cvt>:
 80090a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090a4:	ec55 4b10 	vmov	r4, r5, d0
 80090a8:	2d00      	cmp	r5, #0
 80090aa:	460e      	mov	r6, r1
 80090ac:	4619      	mov	r1, r3
 80090ae:	462b      	mov	r3, r5
 80090b0:	bfbb      	ittet	lt
 80090b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80090b6:	461d      	movlt	r5, r3
 80090b8:	2300      	movge	r3, #0
 80090ba:	232d      	movlt	r3, #45	; 0x2d
 80090bc:	700b      	strb	r3, [r1, #0]
 80090be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80090c4:	4691      	mov	r9, r2
 80090c6:	f023 0820 	bic.w	r8, r3, #32
 80090ca:	bfbc      	itt	lt
 80090cc:	4622      	movlt	r2, r4
 80090ce:	4614      	movlt	r4, r2
 80090d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80090d4:	d005      	beq.n	80090e2 <__cvt+0x42>
 80090d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80090da:	d100      	bne.n	80090de <__cvt+0x3e>
 80090dc:	3601      	adds	r6, #1
 80090de:	2102      	movs	r1, #2
 80090e0:	e000      	b.n	80090e4 <__cvt+0x44>
 80090e2:	2103      	movs	r1, #3
 80090e4:	ab03      	add	r3, sp, #12
 80090e6:	9301      	str	r3, [sp, #4]
 80090e8:	ab02      	add	r3, sp, #8
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	ec45 4b10 	vmov	d0, r4, r5
 80090f0:	4653      	mov	r3, sl
 80090f2:	4632      	mov	r2, r6
 80090f4:	f000 fec4 	bl	8009e80 <_dtoa_r>
 80090f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80090fc:	4607      	mov	r7, r0
 80090fe:	d102      	bne.n	8009106 <__cvt+0x66>
 8009100:	f019 0f01 	tst.w	r9, #1
 8009104:	d022      	beq.n	800914c <__cvt+0xac>
 8009106:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800910a:	eb07 0906 	add.w	r9, r7, r6
 800910e:	d110      	bne.n	8009132 <__cvt+0x92>
 8009110:	783b      	ldrb	r3, [r7, #0]
 8009112:	2b30      	cmp	r3, #48	; 0x30
 8009114:	d10a      	bne.n	800912c <__cvt+0x8c>
 8009116:	2200      	movs	r2, #0
 8009118:	2300      	movs	r3, #0
 800911a:	4620      	mov	r0, r4
 800911c:	4629      	mov	r1, r5
 800911e:	f7f7 fcf3 	bl	8000b08 <__aeabi_dcmpeq>
 8009122:	b918      	cbnz	r0, 800912c <__cvt+0x8c>
 8009124:	f1c6 0601 	rsb	r6, r6, #1
 8009128:	f8ca 6000 	str.w	r6, [sl]
 800912c:	f8da 3000 	ldr.w	r3, [sl]
 8009130:	4499      	add	r9, r3
 8009132:	2200      	movs	r2, #0
 8009134:	2300      	movs	r3, #0
 8009136:	4620      	mov	r0, r4
 8009138:	4629      	mov	r1, r5
 800913a:	f7f7 fce5 	bl	8000b08 <__aeabi_dcmpeq>
 800913e:	b108      	cbz	r0, 8009144 <__cvt+0xa4>
 8009140:	f8cd 900c 	str.w	r9, [sp, #12]
 8009144:	2230      	movs	r2, #48	; 0x30
 8009146:	9b03      	ldr	r3, [sp, #12]
 8009148:	454b      	cmp	r3, r9
 800914a:	d307      	bcc.n	800915c <__cvt+0xbc>
 800914c:	9b03      	ldr	r3, [sp, #12]
 800914e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009150:	1bdb      	subs	r3, r3, r7
 8009152:	4638      	mov	r0, r7
 8009154:	6013      	str	r3, [r2, #0]
 8009156:	b004      	add	sp, #16
 8009158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800915c:	1c59      	adds	r1, r3, #1
 800915e:	9103      	str	r1, [sp, #12]
 8009160:	701a      	strb	r2, [r3, #0]
 8009162:	e7f0      	b.n	8009146 <__cvt+0xa6>

08009164 <__exponent>:
 8009164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009166:	4603      	mov	r3, r0
 8009168:	2900      	cmp	r1, #0
 800916a:	bfb8      	it	lt
 800916c:	4249      	neglt	r1, r1
 800916e:	f803 2b02 	strb.w	r2, [r3], #2
 8009172:	bfb4      	ite	lt
 8009174:	222d      	movlt	r2, #45	; 0x2d
 8009176:	222b      	movge	r2, #43	; 0x2b
 8009178:	2909      	cmp	r1, #9
 800917a:	7042      	strb	r2, [r0, #1]
 800917c:	dd2a      	ble.n	80091d4 <__exponent+0x70>
 800917e:	f10d 0207 	add.w	r2, sp, #7
 8009182:	4617      	mov	r7, r2
 8009184:	260a      	movs	r6, #10
 8009186:	4694      	mov	ip, r2
 8009188:	fb91 f5f6 	sdiv	r5, r1, r6
 800918c:	fb06 1415 	mls	r4, r6, r5, r1
 8009190:	3430      	adds	r4, #48	; 0x30
 8009192:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009196:	460c      	mov	r4, r1
 8009198:	2c63      	cmp	r4, #99	; 0x63
 800919a:	f102 32ff 	add.w	r2, r2, #4294967295
 800919e:	4629      	mov	r1, r5
 80091a0:	dcf1      	bgt.n	8009186 <__exponent+0x22>
 80091a2:	3130      	adds	r1, #48	; 0x30
 80091a4:	f1ac 0402 	sub.w	r4, ip, #2
 80091a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80091ac:	1c41      	adds	r1, r0, #1
 80091ae:	4622      	mov	r2, r4
 80091b0:	42ba      	cmp	r2, r7
 80091b2:	d30a      	bcc.n	80091ca <__exponent+0x66>
 80091b4:	f10d 0209 	add.w	r2, sp, #9
 80091b8:	eba2 020c 	sub.w	r2, r2, ip
 80091bc:	42bc      	cmp	r4, r7
 80091be:	bf88      	it	hi
 80091c0:	2200      	movhi	r2, #0
 80091c2:	4413      	add	r3, r2
 80091c4:	1a18      	subs	r0, r3, r0
 80091c6:	b003      	add	sp, #12
 80091c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091ca:	f812 5b01 	ldrb.w	r5, [r2], #1
 80091ce:	f801 5f01 	strb.w	r5, [r1, #1]!
 80091d2:	e7ed      	b.n	80091b0 <__exponent+0x4c>
 80091d4:	2330      	movs	r3, #48	; 0x30
 80091d6:	3130      	adds	r1, #48	; 0x30
 80091d8:	7083      	strb	r3, [r0, #2]
 80091da:	70c1      	strb	r1, [r0, #3]
 80091dc:	1d03      	adds	r3, r0, #4
 80091de:	e7f1      	b.n	80091c4 <__exponent+0x60>

080091e0 <_printf_float>:
 80091e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e4:	ed2d 8b02 	vpush	{d8}
 80091e8:	b08d      	sub	sp, #52	; 0x34
 80091ea:	460c      	mov	r4, r1
 80091ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80091f0:	4616      	mov	r6, r2
 80091f2:	461f      	mov	r7, r3
 80091f4:	4605      	mov	r5, r0
 80091f6:	f000 fd2d 	bl	8009c54 <_localeconv_r>
 80091fa:	f8d0 a000 	ldr.w	sl, [r0]
 80091fe:	4650      	mov	r0, sl
 8009200:	f7f7 f856 	bl	80002b0 <strlen>
 8009204:	2300      	movs	r3, #0
 8009206:	930a      	str	r3, [sp, #40]	; 0x28
 8009208:	6823      	ldr	r3, [r4, #0]
 800920a:	9305      	str	r3, [sp, #20]
 800920c:	f8d8 3000 	ldr.w	r3, [r8]
 8009210:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009214:	3307      	adds	r3, #7
 8009216:	f023 0307 	bic.w	r3, r3, #7
 800921a:	f103 0208 	add.w	r2, r3, #8
 800921e:	f8c8 2000 	str.w	r2, [r8]
 8009222:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009226:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800922a:	9307      	str	r3, [sp, #28]
 800922c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009230:	ee08 0a10 	vmov	s16, r0
 8009234:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009238:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800923c:	4b9e      	ldr	r3, [pc, #632]	; (80094b8 <_printf_float+0x2d8>)
 800923e:	f04f 32ff 	mov.w	r2, #4294967295
 8009242:	f7f7 fc93 	bl	8000b6c <__aeabi_dcmpun>
 8009246:	bb88      	cbnz	r0, 80092ac <_printf_float+0xcc>
 8009248:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800924c:	4b9a      	ldr	r3, [pc, #616]	; (80094b8 <_printf_float+0x2d8>)
 800924e:	f04f 32ff 	mov.w	r2, #4294967295
 8009252:	f7f7 fc6d 	bl	8000b30 <__aeabi_dcmple>
 8009256:	bb48      	cbnz	r0, 80092ac <_printf_float+0xcc>
 8009258:	2200      	movs	r2, #0
 800925a:	2300      	movs	r3, #0
 800925c:	4640      	mov	r0, r8
 800925e:	4649      	mov	r1, r9
 8009260:	f7f7 fc5c 	bl	8000b1c <__aeabi_dcmplt>
 8009264:	b110      	cbz	r0, 800926c <_printf_float+0x8c>
 8009266:	232d      	movs	r3, #45	; 0x2d
 8009268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800926c:	4a93      	ldr	r2, [pc, #588]	; (80094bc <_printf_float+0x2dc>)
 800926e:	4b94      	ldr	r3, [pc, #592]	; (80094c0 <_printf_float+0x2e0>)
 8009270:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009274:	bf94      	ite	ls
 8009276:	4690      	movls	r8, r2
 8009278:	4698      	movhi	r8, r3
 800927a:	2303      	movs	r3, #3
 800927c:	6123      	str	r3, [r4, #16]
 800927e:	9b05      	ldr	r3, [sp, #20]
 8009280:	f023 0304 	bic.w	r3, r3, #4
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	f04f 0900 	mov.w	r9, #0
 800928a:	9700      	str	r7, [sp, #0]
 800928c:	4633      	mov	r3, r6
 800928e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009290:	4621      	mov	r1, r4
 8009292:	4628      	mov	r0, r5
 8009294:	f000 f9da 	bl	800964c <_printf_common>
 8009298:	3001      	adds	r0, #1
 800929a:	f040 8090 	bne.w	80093be <_printf_float+0x1de>
 800929e:	f04f 30ff 	mov.w	r0, #4294967295
 80092a2:	b00d      	add	sp, #52	; 0x34
 80092a4:	ecbd 8b02 	vpop	{d8}
 80092a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ac:	4642      	mov	r2, r8
 80092ae:	464b      	mov	r3, r9
 80092b0:	4640      	mov	r0, r8
 80092b2:	4649      	mov	r1, r9
 80092b4:	f7f7 fc5a 	bl	8000b6c <__aeabi_dcmpun>
 80092b8:	b140      	cbz	r0, 80092cc <_printf_float+0xec>
 80092ba:	464b      	mov	r3, r9
 80092bc:	2b00      	cmp	r3, #0
 80092be:	bfbc      	itt	lt
 80092c0:	232d      	movlt	r3, #45	; 0x2d
 80092c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80092c6:	4a7f      	ldr	r2, [pc, #508]	; (80094c4 <_printf_float+0x2e4>)
 80092c8:	4b7f      	ldr	r3, [pc, #508]	; (80094c8 <_printf_float+0x2e8>)
 80092ca:	e7d1      	b.n	8009270 <_printf_float+0x90>
 80092cc:	6863      	ldr	r3, [r4, #4]
 80092ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80092d2:	9206      	str	r2, [sp, #24]
 80092d4:	1c5a      	adds	r2, r3, #1
 80092d6:	d13f      	bne.n	8009358 <_printf_float+0x178>
 80092d8:	2306      	movs	r3, #6
 80092da:	6063      	str	r3, [r4, #4]
 80092dc:	9b05      	ldr	r3, [sp, #20]
 80092de:	6861      	ldr	r1, [r4, #4]
 80092e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80092e4:	2300      	movs	r3, #0
 80092e6:	9303      	str	r3, [sp, #12]
 80092e8:	ab0a      	add	r3, sp, #40	; 0x28
 80092ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80092ee:	ab09      	add	r3, sp, #36	; 0x24
 80092f0:	ec49 8b10 	vmov	d0, r8, r9
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	6022      	str	r2, [r4, #0]
 80092f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80092fc:	4628      	mov	r0, r5
 80092fe:	f7ff fecf 	bl	80090a0 <__cvt>
 8009302:	9b06      	ldr	r3, [sp, #24]
 8009304:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009306:	2b47      	cmp	r3, #71	; 0x47
 8009308:	4680      	mov	r8, r0
 800930a:	d108      	bne.n	800931e <_printf_float+0x13e>
 800930c:	1cc8      	adds	r0, r1, #3
 800930e:	db02      	blt.n	8009316 <_printf_float+0x136>
 8009310:	6863      	ldr	r3, [r4, #4]
 8009312:	4299      	cmp	r1, r3
 8009314:	dd41      	ble.n	800939a <_printf_float+0x1ba>
 8009316:	f1ab 0302 	sub.w	r3, fp, #2
 800931a:	fa5f fb83 	uxtb.w	fp, r3
 800931e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009322:	d820      	bhi.n	8009366 <_printf_float+0x186>
 8009324:	3901      	subs	r1, #1
 8009326:	465a      	mov	r2, fp
 8009328:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800932c:	9109      	str	r1, [sp, #36]	; 0x24
 800932e:	f7ff ff19 	bl	8009164 <__exponent>
 8009332:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009334:	1813      	adds	r3, r2, r0
 8009336:	2a01      	cmp	r2, #1
 8009338:	4681      	mov	r9, r0
 800933a:	6123      	str	r3, [r4, #16]
 800933c:	dc02      	bgt.n	8009344 <_printf_float+0x164>
 800933e:	6822      	ldr	r2, [r4, #0]
 8009340:	07d2      	lsls	r2, r2, #31
 8009342:	d501      	bpl.n	8009348 <_printf_float+0x168>
 8009344:	3301      	adds	r3, #1
 8009346:	6123      	str	r3, [r4, #16]
 8009348:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800934c:	2b00      	cmp	r3, #0
 800934e:	d09c      	beq.n	800928a <_printf_float+0xaa>
 8009350:	232d      	movs	r3, #45	; 0x2d
 8009352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009356:	e798      	b.n	800928a <_printf_float+0xaa>
 8009358:	9a06      	ldr	r2, [sp, #24]
 800935a:	2a47      	cmp	r2, #71	; 0x47
 800935c:	d1be      	bne.n	80092dc <_printf_float+0xfc>
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1bc      	bne.n	80092dc <_printf_float+0xfc>
 8009362:	2301      	movs	r3, #1
 8009364:	e7b9      	b.n	80092da <_printf_float+0xfa>
 8009366:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800936a:	d118      	bne.n	800939e <_printf_float+0x1be>
 800936c:	2900      	cmp	r1, #0
 800936e:	6863      	ldr	r3, [r4, #4]
 8009370:	dd0b      	ble.n	800938a <_printf_float+0x1aa>
 8009372:	6121      	str	r1, [r4, #16]
 8009374:	b913      	cbnz	r3, 800937c <_printf_float+0x19c>
 8009376:	6822      	ldr	r2, [r4, #0]
 8009378:	07d0      	lsls	r0, r2, #31
 800937a:	d502      	bpl.n	8009382 <_printf_float+0x1a2>
 800937c:	3301      	adds	r3, #1
 800937e:	440b      	add	r3, r1
 8009380:	6123      	str	r3, [r4, #16]
 8009382:	65a1      	str	r1, [r4, #88]	; 0x58
 8009384:	f04f 0900 	mov.w	r9, #0
 8009388:	e7de      	b.n	8009348 <_printf_float+0x168>
 800938a:	b913      	cbnz	r3, 8009392 <_printf_float+0x1b2>
 800938c:	6822      	ldr	r2, [r4, #0]
 800938e:	07d2      	lsls	r2, r2, #31
 8009390:	d501      	bpl.n	8009396 <_printf_float+0x1b6>
 8009392:	3302      	adds	r3, #2
 8009394:	e7f4      	b.n	8009380 <_printf_float+0x1a0>
 8009396:	2301      	movs	r3, #1
 8009398:	e7f2      	b.n	8009380 <_printf_float+0x1a0>
 800939a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800939e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093a0:	4299      	cmp	r1, r3
 80093a2:	db05      	blt.n	80093b0 <_printf_float+0x1d0>
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	6121      	str	r1, [r4, #16]
 80093a8:	07d8      	lsls	r0, r3, #31
 80093aa:	d5ea      	bpl.n	8009382 <_printf_float+0x1a2>
 80093ac:	1c4b      	adds	r3, r1, #1
 80093ae:	e7e7      	b.n	8009380 <_printf_float+0x1a0>
 80093b0:	2900      	cmp	r1, #0
 80093b2:	bfd4      	ite	le
 80093b4:	f1c1 0202 	rsble	r2, r1, #2
 80093b8:	2201      	movgt	r2, #1
 80093ba:	4413      	add	r3, r2
 80093bc:	e7e0      	b.n	8009380 <_printf_float+0x1a0>
 80093be:	6823      	ldr	r3, [r4, #0]
 80093c0:	055a      	lsls	r2, r3, #21
 80093c2:	d407      	bmi.n	80093d4 <_printf_float+0x1f4>
 80093c4:	6923      	ldr	r3, [r4, #16]
 80093c6:	4642      	mov	r2, r8
 80093c8:	4631      	mov	r1, r6
 80093ca:	4628      	mov	r0, r5
 80093cc:	47b8      	blx	r7
 80093ce:	3001      	adds	r0, #1
 80093d0:	d12c      	bne.n	800942c <_printf_float+0x24c>
 80093d2:	e764      	b.n	800929e <_printf_float+0xbe>
 80093d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80093d8:	f240 80e0 	bls.w	800959c <_printf_float+0x3bc>
 80093dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093e0:	2200      	movs	r2, #0
 80093e2:	2300      	movs	r3, #0
 80093e4:	f7f7 fb90 	bl	8000b08 <__aeabi_dcmpeq>
 80093e8:	2800      	cmp	r0, #0
 80093ea:	d034      	beq.n	8009456 <_printf_float+0x276>
 80093ec:	4a37      	ldr	r2, [pc, #220]	; (80094cc <_printf_float+0x2ec>)
 80093ee:	2301      	movs	r3, #1
 80093f0:	4631      	mov	r1, r6
 80093f2:	4628      	mov	r0, r5
 80093f4:	47b8      	blx	r7
 80093f6:	3001      	adds	r0, #1
 80093f8:	f43f af51 	beq.w	800929e <_printf_float+0xbe>
 80093fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009400:	429a      	cmp	r2, r3
 8009402:	db02      	blt.n	800940a <_printf_float+0x22a>
 8009404:	6823      	ldr	r3, [r4, #0]
 8009406:	07d8      	lsls	r0, r3, #31
 8009408:	d510      	bpl.n	800942c <_printf_float+0x24c>
 800940a:	ee18 3a10 	vmov	r3, s16
 800940e:	4652      	mov	r2, sl
 8009410:	4631      	mov	r1, r6
 8009412:	4628      	mov	r0, r5
 8009414:	47b8      	blx	r7
 8009416:	3001      	adds	r0, #1
 8009418:	f43f af41 	beq.w	800929e <_printf_float+0xbe>
 800941c:	f04f 0800 	mov.w	r8, #0
 8009420:	f104 091a 	add.w	r9, r4, #26
 8009424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009426:	3b01      	subs	r3, #1
 8009428:	4543      	cmp	r3, r8
 800942a:	dc09      	bgt.n	8009440 <_printf_float+0x260>
 800942c:	6823      	ldr	r3, [r4, #0]
 800942e:	079b      	lsls	r3, r3, #30
 8009430:	f100 8107 	bmi.w	8009642 <_printf_float+0x462>
 8009434:	68e0      	ldr	r0, [r4, #12]
 8009436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009438:	4298      	cmp	r0, r3
 800943a:	bfb8      	it	lt
 800943c:	4618      	movlt	r0, r3
 800943e:	e730      	b.n	80092a2 <_printf_float+0xc2>
 8009440:	2301      	movs	r3, #1
 8009442:	464a      	mov	r2, r9
 8009444:	4631      	mov	r1, r6
 8009446:	4628      	mov	r0, r5
 8009448:	47b8      	blx	r7
 800944a:	3001      	adds	r0, #1
 800944c:	f43f af27 	beq.w	800929e <_printf_float+0xbe>
 8009450:	f108 0801 	add.w	r8, r8, #1
 8009454:	e7e6      	b.n	8009424 <_printf_float+0x244>
 8009456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009458:	2b00      	cmp	r3, #0
 800945a:	dc39      	bgt.n	80094d0 <_printf_float+0x2f0>
 800945c:	4a1b      	ldr	r2, [pc, #108]	; (80094cc <_printf_float+0x2ec>)
 800945e:	2301      	movs	r3, #1
 8009460:	4631      	mov	r1, r6
 8009462:	4628      	mov	r0, r5
 8009464:	47b8      	blx	r7
 8009466:	3001      	adds	r0, #1
 8009468:	f43f af19 	beq.w	800929e <_printf_float+0xbe>
 800946c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009470:	4313      	orrs	r3, r2
 8009472:	d102      	bne.n	800947a <_printf_float+0x29a>
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	07d9      	lsls	r1, r3, #31
 8009478:	d5d8      	bpl.n	800942c <_printf_float+0x24c>
 800947a:	ee18 3a10 	vmov	r3, s16
 800947e:	4652      	mov	r2, sl
 8009480:	4631      	mov	r1, r6
 8009482:	4628      	mov	r0, r5
 8009484:	47b8      	blx	r7
 8009486:	3001      	adds	r0, #1
 8009488:	f43f af09 	beq.w	800929e <_printf_float+0xbe>
 800948c:	f04f 0900 	mov.w	r9, #0
 8009490:	f104 0a1a 	add.w	sl, r4, #26
 8009494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009496:	425b      	negs	r3, r3
 8009498:	454b      	cmp	r3, r9
 800949a:	dc01      	bgt.n	80094a0 <_printf_float+0x2c0>
 800949c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800949e:	e792      	b.n	80093c6 <_printf_float+0x1e6>
 80094a0:	2301      	movs	r3, #1
 80094a2:	4652      	mov	r2, sl
 80094a4:	4631      	mov	r1, r6
 80094a6:	4628      	mov	r0, r5
 80094a8:	47b8      	blx	r7
 80094aa:	3001      	adds	r0, #1
 80094ac:	f43f aef7 	beq.w	800929e <_printf_float+0xbe>
 80094b0:	f109 0901 	add.w	r9, r9, #1
 80094b4:	e7ee      	b.n	8009494 <_printf_float+0x2b4>
 80094b6:	bf00      	nop
 80094b8:	7fefffff 	.word	0x7fefffff
 80094bc:	0800c820 	.word	0x0800c820
 80094c0:	0800c824 	.word	0x0800c824
 80094c4:	0800c828 	.word	0x0800c828
 80094c8:	0800c82c 	.word	0x0800c82c
 80094cc:	0800c830 	.word	0x0800c830
 80094d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094d4:	429a      	cmp	r2, r3
 80094d6:	bfa8      	it	ge
 80094d8:	461a      	movge	r2, r3
 80094da:	2a00      	cmp	r2, #0
 80094dc:	4691      	mov	r9, r2
 80094de:	dc37      	bgt.n	8009550 <_printf_float+0x370>
 80094e0:	f04f 0b00 	mov.w	fp, #0
 80094e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094e8:	f104 021a 	add.w	r2, r4, #26
 80094ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094ee:	9305      	str	r3, [sp, #20]
 80094f0:	eba3 0309 	sub.w	r3, r3, r9
 80094f4:	455b      	cmp	r3, fp
 80094f6:	dc33      	bgt.n	8009560 <_printf_float+0x380>
 80094f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094fc:	429a      	cmp	r2, r3
 80094fe:	db3b      	blt.n	8009578 <_printf_float+0x398>
 8009500:	6823      	ldr	r3, [r4, #0]
 8009502:	07da      	lsls	r2, r3, #31
 8009504:	d438      	bmi.n	8009578 <_printf_float+0x398>
 8009506:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800950a:	eba2 0903 	sub.w	r9, r2, r3
 800950e:	9b05      	ldr	r3, [sp, #20]
 8009510:	1ad2      	subs	r2, r2, r3
 8009512:	4591      	cmp	r9, r2
 8009514:	bfa8      	it	ge
 8009516:	4691      	movge	r9, r2
 8009518:	f1b9 0f00 	cmp.w	r9, #0
 800951c:	dc35      	bgt.n	800958a <_printf_float+0x3aa>
 800951e:	f04f 0800 	mov.w	r8, #0
 8009522:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009526:	f104 0a1a 	add.w	sl, r4, #26
 800952a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800952e:	1a9b      	subs	r3, r3, r2
 8009530:	eba3 0309 	sub.w	r3, r3, r9
 8009534:	4543      	cmp	r3, r8
 8009536:	f77f af79 	ble.w	800942c <_printf_float+0x24c>
 800953a:	2301      	movs	r3, #1
 800953c:	4652      	mov	r2, sl
 800953e:	4631      	mov	r1, r6
 8009540:	4628      	mov	r0, r5
 8009542:	47b8      	blx	r7
 8009544:	3001      	adds	r0, #1
 8009546:	f43f aeaa 	beq.w	800929e <_printf_float+0xbe>
 800954a:	f108 0801 	add.w	r8, r8, #1
 800954e:	e7ec      	b.n	800952a <_printf_float+0x34a>
 8009550:	4613      	mov	r3, r2
 8009552:	4631      	mov	r1, r6
 8009554:	4642      	mov	r2, r8
 8009556:	4628      	mov	r0, r5
 8009558:	47b8      	blx	r7
 800955a:	3001      	adds	r0, #1
 800955c:	d1c0      	bne.n	80094e0 <_printf_float+0x300>
 800955e:	e69e      	b.n	800929e <_printf_float+0xbe>
 8009560:	2301      	movs	r3, #1
 8009562:	4631      	mov	r1, r6
 8009564:	4628      	mov	r0, r5
 8009566:	9205      	str	r2, [sp, #20]
 8009568:	47b8      	blx	r7
 800956a:	3001      	adds	r0, #1
 800956c:	f43f ae97 	beq.w	800929e <_printf_float+0xbe>
 8009570:	9a05      	ldr	r2, [sp, #20]
 8009572:	f10b 0b01 	add.w	fp, fp, #1
 8009576:	e7b9      	b.n	80094ec <_printf_float+0x30c>
 8009578:	ee18 3a10 	vmov	r3, s16
 800957c:	4652      	mov	r2, sl
 800957e:	4631      	mov	r1, r6
 8009580:	4628      	mov	r0, r5
 8009582:	47b8      	blx	r7
 8009584:	3001      	adds	r0, #1
 8009586:	d1be      	bne.n	8009506 <_printf_float+0x326>
 8009588:	e689      	b.n	800929e <_printf_float+0xbe>
 800958a:	9a05      	ldr	r2, [sp, #20]
 800958c:	464b      	mov	r3, r9
 800958e:	4442      	add	r2, r8
 8009590:	4631      	mov	r1, r6
 8009592:	4628      	mov	r0, r5
 8009594:	47b8      	blx	r7
 8009596:	3001      	adds	r0, #1
 8009598:	d1c1      	bne.n	800951e <_printf_float+0x33e>
 800959a:	e680      	b.n	800929e <_printf_float+0xbe>
 800959c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800959e:	2a01      	cmp	r2, #1
 80095a0:	dc01      	bgt.n	80095a6 <_printf_float+0x3c6>
 80095a2:	07db      	lsls	r3, r3, #31
 80095a4:	d53a      	bpl.n	800961c <_printf_float+0x43c>
 80095a6:	2301      	movs	r3, #1
 80095a8:	4642      	mov	r2, r8
 80095aa:	4631      	mov	r1, r6
 80095ac:	4628      	mov	r0, r5
 80095ae:	47b8      	blx	r7
 80095b0:	3001      	adds	r0, #1
 80095b2:	f43f ae74 	beq.w	800929e <_printf_float+0xbe>
 80095b6:	ee18 3a10 	vmov	r3, s16
 80095ba:	4652      	mov	r2, sl
 80095bc:	4631      	mov	r1, r6
 80095be:	4628      	mov	r0, r5
 80095c0:	47b8      	blx	r7
 80095c2:	3001      	adds	r0, #1
 80095c4:	f43f ae6b 	beq.w	800929e <_printf_float+0xbe>
 80095c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095cc:	2200      	movs	r2, #0
 80095ce:	2300      	movs	r3, #0
 80095d0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80095d4:	f7f7 fa98 	bl	8000b08 <__aeabi_dcmpeq>
 80095d8:	b9d8      	cbnz	r0, 8009612 <_printf_float+0x432>
 80095da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80095de:	f108 0201 	add.w	r2, r8, #1
 80095e2:	4631      	mov	r1, r6
 80095e4:	4628      	mov	r0, r5
 80095e6:	47b8      	blx	r7
 80095e8:	3001      	adds	r0, #1
 80095ea:	d10e      	bne.n	800960a <_printf_float+0x42a>
 80095ec:	e657      	b.n	800929e <_printf_float+0xbe>
 80095ee:	2301      	movs	r3, #1
 80095f0:	4652      	mov	r2, sl
 80095f2:	4631      	mov	r1, r6
 80095f4:	4628      	mov	r0, r5
 80095f6:	47b8      	blx	r7
 80095f8:	3001      	adds	r0, #1
 80095fa:	f43f ae50 	beq.w	800929e <_printf_float+0xbe>
 80095fe:	f108 0801 	add.w	r8, r8, #1
 8009602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009604:	3b01      	subs	r3, #1
 8009606:	4543      	cmp	r3, r8
 8009608:	dcf1      	bgt.n	80095ee <_printf_float+0x40e>
 800960a:	464b      	mov	r3, r9
 800960c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009610:	e6da      	b.n	80093c8 <_printf_float+0x1e8>
 8009612:	f04f 0800 	mov.w	r8, #0
 8009616:	f104 0a1a 	add.w	sl, r4, #26
 800961a:	e7f2      	b.n	8009602 <_printf_float+0x422>
 800961c:	2301      	movs	r3, #1
 800961e:	4642      	mov	r2, r8
 8009620:	e7df      	b.n	80095e2 <_printf_float+0x402>
 8009622:	2301      	movs	r3, #1
 8009624:	464a      	mov	r2, r9
 8009626:	4631      	mov	r1, r6
 8009628:	4628      	mov	r0, r5
 800962a:	47b8      	blx	r7
 800962c:	3001      	adds	r0, #1
 800962e:	f43f ae36 	beq.w	800929e <_printf_float+0xbe>
 8009632:	f108 0801 	add.w	r8, r8, #1
 8009636:	68e3      	ldr	r3, [r4, #12]
 8009638:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800963a:	1a5b      	subs	r3, r3, r1
 800963c:	4543      	cmp	r3, r8
 800963e:	dcf0      	bgt.n	8009622 <_printf_float+0x442>
 8009640:	e6f8      	b.n	8009434 <_printf_float+0x254>
 8009642:	f04f 0800 	mov.w	r8, #0
 8009646:	f104 0919 	add.w	r9, r4, #25
 800964a:	e7f4      	b.n	8009636 <_printf_float+0x456>

0800964c <_printf_common>:
 800964c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009650:	4616      	mov	r6, r2
 8009652:	4699      	mov	r9, r3
 8009654:	688a      	ldr	r2, [r1, #8]
 8009656:	690b      	ldr	r3, [r1, #16]
 8009658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800965c:	4293      	cmp	r3, r2
 800965e:	bfb8      	it	lt
 8009660:	4613      	movlt	r3, r2
 8009662:	6033      	str	r3, [r6, #0]
 8009664:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009668:	4607      	mov	r7, r0
 800966a:	460c      	mov	r4, r1
 800966c:	b10a      	cbz	r2, 8009672 <_printf_common+0x26>
 800966e:	3301      	adds	r3, #1
 8009670:	6033      	str	r3, [r6, #0]
 8009672:	6823      	ldr	r3, [r4, #0]
 8009674:	0699      	lsls	r1, r3, #26
 8009676:	bf42      	ittt	mi
 8009678:	6833      	ldrmi	r3, [r6, #0]
 800967a:	3302      	addmi	r3, #2
 800967c:	6033      	strmi	r3, [r6, #0]
 800967e:	6825      	ldr	r5, [r4, #0]
 8009680:	f015 0506 	ands.w	r5, r5, #6
 8009684:	d106      	bne.n	8009694 <_printf_common+0x48>
 8009686:	f104 0a19 	add.w	sl, r4, #25
 800968a:	68e3      	ldr	r3, [r4, #12]
 800968c:	6832      	ldr	r2, [r6, #0]
 800968e:	1a9b      	subs	r3, r3, r2
 8009690:	42ab      	cmp	r3, r5
 8009692:	dc26      	bgt.n	80096e2 <_printf_common+0x96>
 8009694:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009698:	1e13      	subs	r3, r2, #0
 800969a:	6822      	ldr	r2, [r4, #0]
 800969c:	bf18      	it	ne
 800969e:	2301      	movne	r3, #1
 80096a0:	0692      	lsls	r2, r2, #26
 80096a2:	d42b      	bmi.n	80096fc <_printf_common+0xb0>
 80096a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096a8:	4649      	mov	r1, r9
 80096aa:	4638      	mov	r0, r7
 80096ac:	47c0      	blx	r8
 80096ae:	3001      	adds	r0, #1
 80096b0:	d01e      	beq.n	80096f0 <_printf_common+0xa4>
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	6922      	ldr	r2, [r4, #16]
 80096b6:	f003 0306 	and.w	r3, r3, #6
 80096ba:	2b04      	cmp	r3, #4
 80096bc:	bf02      	ittt	eq
 80096be:	68e5      	ldreq	r5, [r4, #12]
 80096c0:	6833      	ldreq	r3, [r6, #0]
 80096c2:	1aed      	subeq	r5, r5, r3
 80096c4:	68a3      	ldr	r3, [r4, #8]
 80096c6:	bf0c      	ite	eq
 80096c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096cc:	2500      	movne	r5, #0
 80096ce:	4293      	cmp	r3, r2
 80096d0:	bfc4      	itt	gt
 80096d2:	1a9b      	subgt	r3, r3, r2
 80096d4:	18ed      	addgt	r5, r5, r3
 80096d6:	2600      	movs	r6, #0
 80096d8:	341a      	adds	r4, #26
 80096da:	42b5      	cmp	r5, r6
 80096dc:	d11a      	bne.n	8009714 <_printf_common+0xc8>
 80096de:	2000      	movs	r0, #0
 80096e0:	e008      	b.n	80096f4 <_printf_common+0xa8>
 80096e2:	2301      	movs	r3, #1
 80096e4:	4652      	mov	r2, sl
 80096e6:	4649      	mov	r1, r9
 80096e8:	4638      	mov	r0, r7
 80096ea:	47c0      	blx	r8
 80096ec:	3001      	adds	r0, #1
 80096ee:	d103      	bne.n	80096f8 <_printf_common+0xac>
 80096f0:	f04f 30ff 	mov.w	r0, #4294967295
 80096f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096f8:	3501      	adds	r5, #1
 80096fa:	e7c6      	b.n	800968a <_printf_common+0x3e>
 80096fc:	18e1      	adds	r1, r4, r3
 80096fe:	1c5a      	adds	r2, r3, #1
 8009700:	2030      	movs	r0, #48	; 0x30
 8009702:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009706:	4422      	add	r2, r4
 8009708:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800970c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009710:	3302      	adds	r3, #2
 8009712:	e7c7      	b.n	80096a4 <_printf_common+0x58>
 8009714:	2301      	movs	r3, #1
 8009716:	4622      	mov	r2, r4
 8009718:	4649      	mov	r1, r9
 800971a:	4638      	mov	r0, r7
 800971c:	47c0      	blx	r8
 800971e:	3001      	adds	r0, #1
 8009720:	d0e6      	beq.n	80096f0 <_printf_common+0xa4>
 8009722:	3601      	adds	r6, #1
 8009724:	e7d9      	b.n	80096da <_printf_common+0x8e>
	...

08009728 <_printf_i>:
 8009728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800972c:	7e0f      	ldrb	r7, [r1, #24]
 800972e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009730:	2f78      	cmp	r7, #120	; 0x78
 8009732:	4691      	mov	r9, r2
 8009734:	4680      	mov	r8, r0
 8009736:	460c      	mov	r4, r1
 8009738:	469a      	mov	sl, r3
 800973a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800973e:	d807      	bhi.n	8009750 <_printf_i+0x28>
 8009740:	2f62      	cmp	r7, #98	; 0x62
 8009742:	d80a      	bhi.n	800975a <_printf_i+0x32>
 8009744:	2f00      	cmp	r7, #0
 8009746:	f000 80d4 	beq.w	80098f2 <_printf_i+0x1ca>
 800974a:	2f58      	cmp	r7, #88	; 0x58
 800974c:	f000 80c0 	beq.w	80098d0 <_printf_i+0x1a8>
 8009750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009754:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009758:	e03a      	b.n	80097d0 <_printf_i+0xa8>
 800975a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800975e:	2b15      	cmp	r3, #21
 8009760:	d8f6      	bhi.n	8009750 <_printf_i+0x28>
 8009762:	a101      	add	r1, pc, #4	; (adr r1, 8009768 <_printf_i+0x40>)
 8009764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009768:	080097c1 	.word	0x080097c1
 800976c:	080097d5 	.word	0x080097d5
 8009770:	08009751 	.word	0x08009751
 8009774:	08009751 	.word	0x08009751
 8009778:	08009751 	.word	0x08009751
 800977c:	08009751 	.word	0x08009751
 8009780:	080097d5 	.word	0x080097d5
 8009784:	08009751 	.word	0x08009751
 8009788:	08009751 	.word	0x08009751
 800978c:	08009751 	.word	0x08009751
 8009790:	08009751 	.word	0x08009751
 8009794:	080098d9 	.word	0x080098d9
 8009798:	08009801 	.word	0x08009801
 800979c:	08009893 	.word	0x08009893
 80097a0:	08009751 	.word	0x08009751
 80097a4:	08009751 	.word	0x08009751
 80097a8:	080098fb 	.word	0x080098fb
 80097ac:	08009751 	.word	0x08009751
 80097b0:	08009801 	.word	0x08009801
 80097b4:	08009751 	.word	0x08009751
 80097b8:	08009751 	.word	0x08009751
 80097bc:	0800989b 	.word	0x0800989b
 80097c0:	682b      	ldr	r3, [r5, #0]
 80097c2:	1d1a      	adds	r2, r3, #4
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	602a      	str	r2, [r5, #0]
 80097c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097d0:	2301      	movs	r3, #1
 80097d2:	e09f      	b.n	8009914 <_printf_i+0x1ec>
 80097d4:	6820      	ldr	r0, [r4, #0]
 80097d6:	682b      	ldr	r3, [r5, #0]
 80097d8:	0607      	lsls	r7, r0, #24
 80097da:	f103 0104 	add.w	r1, r3, #4
 80097de:	6029      	str	r1, [r5, #0]
 80097e0:	d501      	bpl.n	80097e6 <_printf_i+0xbe>
 80097e2:	681e      	ldr	r6, [r3, #0]
 80097e4:	e003      	b.n	80097ee <_printf_i+0xc6>
 80097e6:	0646      	lsls	r6, r0, #25
 80097e8:	d5fb      	bpl.n	80097e2 <_printf_i+0xba>
 80097ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80097ee:	2e00      	cmp	r6, #0
 80097f0:	da03      	bge.n	80097fa <_printf_i+0xd2>
 80097f2:	232d      	movs	r3, #45	; 0x2d
 80097f4:	4276      	negs	r6, r6
 80097f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097fa:	485a      	ldr	r0, [pc, #360]	; (8009964 <_printf_i+0x23c>)
 80097fc:	230a      	movs	r3, #10
 80097fe:	e012      	b.n	8009826 <_printf_i+0xfe>
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	6820      	ldr	r0, [r4, #0]
 8009804:	1d19      	adds	r1, r3, #4
 8009806:	6029      	str	r1, [r5, #0]
 8009808:	0605      	lsls	r5, r0, #24
 800980a:	d501      	bpl.n	8009810 <_printf_i+0xe8>
 800980c:	681e      	ldr	r6, [r3, #0]
 800980e:	e002      	b.n	8009816 <_printf_i+0xee>
 8009810:	0641      	lsls	r1, r0, #25
 8009812:	d5fb      	bpl.n	800980c <_printf_i+0xe4>
 8009814:	881e      	ldrh	r6, [r3, #0]
 8009816:	4853      	ldr	r0, [pc, #332]	; (8009964 <_printf_i+0x23c>)
 8009818:	2f6f      	cmp	r7, #111	; 0x6f
 800981a:	bf0c      	ite	eq
 800981c:	2308      	moveq	r3, #8
 800981e:	230a      	movne	r3, #10
 8009820:	2100      	movs	r1, #0
 8009822:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009826:	6865      	ldr	r5, [r4, #4]
 8009828:	60a5      	str	r5, [r4, #8]
 800982a:	2d00      	cmp	r5, #0
 800982c:	bfa2      	ittt	ge
 800982e:	6821      	ldrge	r1, [r4, #0]
 8009830:	f021 0104 	bicge.w	r1, r1, #4
 8009834:	6021      	strge	r1, [r4, #0]
 8009836:	b90e      	cbnz	r6, 800983c <_printf_i+0x114>
 8009838:	2d00      	cmp	r5, #0
 800983a:	d04b      	beq.n	80098d4 <_printf_i+0x1ac>
 800983c:	4615      	mov	r5, r2
 800983e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009842:	fb03 6711 	mls	r7, r3, r1, r6
 8009846:	5dc7      	ldrb	r7, [r0, r7]
 8009848:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800984c:	4637      	mov	r7, r6
 800984e:	42bb      	cmp	r3, r7
 8009850:	460e      	mov	r6, r1
 8009852:	d9f4      	bls.n	800983e <_printf_i+0x116>
 8009854:	2b08      	cmp	r3, #8
 8009856:	d10b      	bne.n	8009870 <_printf_i+0x148>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	07de      	lsls	r6, r3, #31
 800985c:	d508      	bpl.n	8009870 <_printf_i+0x148>
 800985e:	6923      	ldr	r3, [r4, #16]
 8009860:	6861      	ldr	r1, [r4, #4]
 8009862:	4299      	cmp	r1, r3
 8009864:	bfde      	ittt	le
 8009866:	2330      	movle	r3, #48	; 0x30
 8009868:	f805 3c01 	strble.w	r3, [r5, #-1]
 800986c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009870:	1b52      	subs	r2, r2, r5
 8009872:	6122      	str	r2, [r4, #16]
 8009874:	f8cd a000 	str.w	sl, [sp]
 8009878:	464b      	mov	r3, r9
 800987a:	aa03      	add	r2, sp, #12
 800987c:	4621      	mov	r1, r4
 800987e:	4640      	mov	r0, r8
 8009880:	f7ff fee4 	bl	800964c <_printf_common>
 8009884:	3001      	adds	r0, #1
 8009886:	d14a      	bne.n	800991e <_printf_i+0x1f6>
 8009888:	f04f 30ff 	mov.w	r0, #4294967295
 800988c:	b004      	add	sp, #16
 800988e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009892:	6823      	ldr	r3, [r4, #0]
 8009894:	f043 0320 	orr.w	r3, r3, #32
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	4833      	ldr	r0, [pc, #204]	; (8009968 <_printf_i+0x240>)
 800989c:	2778      	movs	r7, #120	; 0x78
 800989e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80098a2:	6823      	ldr	r3, [r4, #0]
 80098a4:	6829      	ldr	r1, [r5, #0]
 80098a6:	061f      	lsls	r7, r3, #24
 80098a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80098ac:	d402      	bmi.n	80098b4 <_printf_i+0x18c>
 80098ae:	065f      	lsls	r7, r3, #25
 80098b0:	bf48      	it	mi
 80098b2:	b2b6      	uxthmi	r6, r6
 80098b4:	07df      	lsls	r7, r3, #31
 80098b6:	bf48      	it	mi
 80098b8:	f043 0320 	orrmi.w	r3, r3, #32
 80098bc:	6029      	str	r1, [r5, #0]
 80098be:	bf48      	it	mi
 80098c0:	6023      	strmi	r3, [r4, #0]
 80098c2:	b91e      	cbnz	r6, 80098cc <_printf_i+0x1a4>
 80098c4:	6823      	ldr	r3, [r4, #0]
 80098c6:	f023 0320 	bic.w	r3, r3, #32
 80098ca:	6023      	str	r3, [r4, #0]
 80098cc:	2310      	movs	r3, #16
 80098ce:	e7a7      	b.n	8009820 <_printf_i+0xf8>
 80098d0:	4824      	ldr	r0, [pc, #144]	; (8009964 <_printf_i+0x23c>)
 80098d2:	e7e4      	b.n	800989e <_printf_i+0x176>
 80098d4:	4615      	mov	r5, r2
 80098d6:	e7bd      	b.n	8009854 <_printf_i+0x12c>
 80098d8:	682b      	ldr	r3, [r5, #0]
 80098da:	6826      	ldr	r6, [r4, #0]
 80098dc:	6961      	ldr	r1, [r4, #20]
 80098de:	1d18      	adds	r0, r3, #4
 80098e0:	6028      	str	r0, [r5, #0]
 80098e2:	0635      	lsls	r5, r6, #24
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	d501      	bpl.n	80098ec <_printf_i+0x1c4>
 80098e8:	6019      	str	r1, [r3, #0]
 80098ea:	e002      	b.n	80098f2 <_printf_i+0x1ca>
 80098ec:	0670      	lsls	r0, r6, #25
 80098ee:	d5fb      	bpl.n	80098e8 <_printf_i+0x1c0>
 80098f0:	8019      	strh	r1, [r3, #0]
 80098f2:	2300      	movs	r3, #0
 80098f4:	6123      	str	r3, [r4, #16]
 80098f6:	4615      	mov	r5, r2
 80098f8:	e7bc      	b.n	8009874 <_printf_i+0x14c>
 80098fa:	682b      	ldr	r3, [r5, #0]
 80098fc:	1d1a      	adds	r2, r3, #4
 80098fe:	602a      	str	r2, [r5, #0]
 8009900:	681d      	ldr	r5, [r3, #0]
 8009902:	6862      	ldr	r2, [r4, #4]
 8009904:	2100      	movs	r1, #0
 8009906:	4628      	mov	r0, r5
 8009908:	f7f6 fc82 	bl	8000210 <memchr>
 800990c:	b108      	cbz	r0, 8009912 <_printf_i+0x1ea>
 800990e:	1b40      	subs	r0, r0, r5
 8009910:	6060      	str	r0, [r4, #4]
 8009912:	6863      	ldr	r3, [r4, #4]
 8009914:	6123      	str	r3, [r4, #16]
 8009916:	2300      	movs	r3, #0
 8009918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800991c:	e7aa      	b.n	8009874 <_printf_i+0x14c>
 800991e:	6923      	ldr	r3, [r4, #16]
 8009920:	462a      	mov	r2, r5
 8009922:	4649      	mov	r1, r9
 8009924:	4640      	mov	r0, r8
 8009926:	47d0      	blx	sl
 8009928:	3001      	adds	r0, #1
 800992a:	d0ad      	beq.n	8009888 <_printf_i+0x160>
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	079b      	lsls	r3, r3, #30
 8009930:	d413      	bmi.n	800995a <_printf_i+0x232>
 8009932:	68e0      	ldr	r0, [r4, #12]
 8009934:	9b03      	ldr	r3, [sp, #12]
 8009936:	4298      	cmp	r0, r3
 8009938:	bfb8      	it	lt
 800993a:	4618      	movlt	r0, r3
 800993c:	e7a6      	b.n	800988c <_printf_i+0x164>
 800993e:	2301      	movs	r3, #1
 8009940:	4632      	mov	r2, r6
 8009942:	4649      	mov	r1, r9
 8009944:	4640      	mov	r0, r8
 8009946:	47d0      	blx	sl
 8009948:	3001      	adds	r0, #1
 800994a:	d09d      	beq.n	8009888 <_printf_i+0x160>
 800994c:	3501      	adds	r5, #1
 800994e:	68e3      	ldr	r3, [r4, #12]
 8009950:	9903      	ldr	r1, [sp, #12]
 8009952:	1a5b      	subs	r3, r3, r1
 8009954:	42ab      	cmp	r3, r5
 8009956:	dcf2      	bgt.n	800993e <_printf_i+0x216>
 8009958:	e7eb      	b.n	8009932 <_printf_i+0x20a>
 800995a:	2500      	movs	r5, #0
 800995c:	f104 0619 	add.w	r6, r4, #25
 8009960:	e7f5      	b.n	800994e <_printf_i+0x226>
 8009962:	bf00      	nop
 8009964:	0800c832 	.word	0x0800c832
 8009968:	0800c843 	.word	0x0800c843

0800996c <std>:
 800996c:	2300      	movs	r3, #0
 800996e:	b510      	push	{r4, lr}
 8009970:	4604      	mov	r4, r0
 8009972:	e9c0 3300 	strd	r3, r3, [r0]
 8009976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800997a:	6083      	str	r3, [r0, #8]
 800997c:	8181      	strh	r1, [r0, #12]
 800997e:	6643      	str	r3, [r0, #100]	; 0x64
 8009980:	81c2      	strh	r2, [r0, #14]
 8009982:	6183      	str	r3, [r0, #24]
 8009984:	4619      	mov	r1, r3
 8009986:	2208      	movs	r2, #8
 8009988:	305c      	adds	r0, #92	; 0x5c
 800998a:	f000 f948 	bl	8009c1e <memset>
 800998e:	4b0d      	ldr	r3, [pc, #52]	; (80099c4 <std+0x58>)
 8009990:	6263      	str	r3, [r4, #36]	; 0x24
 8009992:	4b0d      	ldr	r3, [pc, #52]	; (80099c8 <std+0x5c>)
 8009994:	62a3      	str	r3, [r4, #40]	; 0x28
 8009996:	4b0d      	ldr	r3, [pc, #52]	; (80099cc <std+0x60>)
 8009998:	62e3      	str	r3, [r4, #44]	; 0x2c
 800999a:	4b0d      	ldr	r3, [pc, #52]	; (80099d0 <std+0x64>)
 800999c:	6323      	str	r3, [r4, #48]	; 0x30
 800999e:	4b0d      	ldr	r3, [pc, #52]	; (80099d4 <std+0x68>)
 80099a0:	6224      	str	r4, [r4, #32]
 80099a2:	429c      	cmp	r4, r3
 80099a4:	d006      	beq.n	80099b4 <std+0x48>
 80099a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80099aa:	4294      	cmp	r4, r2
 80099ac:	d002      	beq.n	80099b4 <std+0x48>
 80099ae:	33d0      	adds	r3, #208	; 0xd0
 80099b0:	429c      	cmp	r4, r3
 80099b2:	d105      	bne.n	80099c0 <std+0x54>
 80099b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099bc:	f000 b9be 	b.w	8009d3c <__retarget_lock_init_recursive>
 80099c0:	bd10      	pop	{r4, pc}
 80099c2:	bf00      	nop
 80099c4:	08009b99 	.word	0x08009b99
 80099c8:	08009bbb 	.word	0x08009bbb
 80099cc:	08009bf3 	.word	0x08009bf3
 80099d0:	08009c17 	.word	0x08009c17
 80099d4:	20000994 	.word	0x20000994

080099d8 <stdio_exit_handler>:
 80099d8:	4a02      	ldr	r2, [pc, #8]	; (80099e4 <stdio_exit_handler+0xc>)
 80099da:	4903      	ldr	r1, [pc, #12]	; (80099e8 <stdio_exit_handler+0x10>)
 80099dc:	4803      	ldr	r0, [pc, #12]	; (80099ec <stdio_exit_handler+0x14>)
 80099de:	f000 b869 	b.w	8009ab4 <_fwalk_sglue>
 80099e2:	bf00      	nop
 80099e4:	20000020 	.word	0x20000020
 80099e8:	0800c069 	.word	0x0800c069
 80099ec:	20000198 	.word	0x20000198

080099f0 <cleanup_stdio>:
 80099f0:	6841      	ldr	r1, [r0, #4]
 80099f2:	4b0c      	ldr	r3, [pc, #48]	; (8009a24 <cleanup_stdio+0x34>)
 80099f4:	4299      	cmp	r1, r3
 80099f6:	b510      	push	{r4, lr}
 80099f8:	4604      	mov	r4, r0
 80099fa:	d001      	beq.n	8009a00 <cleanup_stdio+0x10>
 80099fc:	f002 fb34 	bl	800c068 <_fflush_r>
 8009a00:	68a1      	ldr	r1, [r4, #8]
 8009a02:	4b09      	ldr	r3, [pc, #36]	; (8009a28 <cleanup_stdio+0x38>)
 8009a04:	4299      	cmp	r1, r3
 8009a06:	d002      	beq.n	8009a0e <cleanup_stdio+0x1e>
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f002 fb2d 	bl	800c068 <_fflush_r>
 8009a0e:	68e1      	ldr	r1, [r4, #12]
 8009a10:	4b06      	ldr	r3, [pc, #24]	; (8009a2c <cleanup_stdio+0x3c>)
 8009a12:	4299      	cmp	r1, r3
 8009a14:	d004      	beq.n	8009a20 <cleanup_stdio+0x30>
 8009a16:	4620      	mov	r0, r4
 8009a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a1c:	f002 bb24 	b.w	800c068 <_fflush_r>
 8009a20:	bd10      	pop	{r4, pc}
 8009a22:	bf00      	nop
 8009a24:	20000994 	.word	0x20000994
 8009a28:	200009fc 	.word	0x200009fc
 8009a2c:	20000a64 	.word	0x20000a64

08009a30 <global_stdio_init.part.0>:
 8009a30:	b510      	push	{r4, lr}
 8009a32:	4b0b      	ldr	r3, [pc, #44]	; (8009a60 <global_stdio_init.part.0+0x30>)
 8009a34:	4c0b      	ldr	r4, [pc, #44]	; (8009a64 <global_stdio_init.part.0+0x34>)
 8009a36:	4a0c      	ldr	r2, [pc, #48]	; (8009a68 <global_stdio_init.part.0+0x38>)
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	2104      	movs	r1, #4
 8009a40:	f7ff ff94 	bl	800996c <std>
 8009a44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009a48:	2201      	movs	r2, #1
 8009a4a:	2109      	movs	r1, #9
 8009a4c:	f7ff ff8e 	bl	800996c <std>
 8009a50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009a54:	2202      	movs	r2, #2
 8009a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a5a:	2112      	movs	r1, #18
 8009a5c:	f7ff bf86 	b.w	800996c <std>
 8009a60:	20000acc 	.word	0x20000acc
 8009a64:	20000994 	.word	0x20000994
 8009a68:	080099d9 	.word	0x080099d9

08009a6c <__sfp_lock_acquire>:
 8009a6c:	4801      	ldr	r0, [pc, #4]	; (8009a74 <__sfp_lock_acquire+0x8>)
 8009a6e:	f000 b966 	b.w	8009d3e <__retarget_lock_acquire_recursive>
 8009a72:	bf00      	nop
 8009a74:	20000ad5 	.word	0x20000ad5

08009a78 <__sfp_lock_release>:
 8009a78:	4801      	ldr	r0, [pc, #4]	; (8009a80 <__sfp_lock_release+0x8>)
 8009a7a:	f000 b961 	b.w	8009d40 <__retarget_lock_release_recursive>
 8009a7e:	bf00      	nop
 8009a80:	20000ad5 	.word	0x20000ad5

08009a84 <__sinit>:
 8009a84:	b510      	push	{r4, lr}
 8009a86:	4604      	mov	r4, r0
 8009a88:	f7ff fff0 	bl	8009a6c <__sfp_lock_acquire>
 8009a8c:	6a23      	ldr	r3, [r4, #32]
 8009a8e:	b11b      	cbz	r3, 8009a98 <__sinit+0x14>
 8009a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a94:	f7ff bff0 	b.w	8009a78 <__sfp_lock_release>
 8009a98:	4b04      	ldr	r3, [pc, #16]	; (8009aac <__sinit+0x28>)
 8009a9a:	6223      	str	r3, [r4, #32]
 8009a9c:	4b04      	ldr	r3, [pc, #16]	; (8009ab0 <__sinit+0x2c>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1f5      	bne.n	8009a90 <__sinit+0xc>
 8009aa4:	f7ff ffc4 	bl	8009a30 <global_stdio_init.part.0>
 8009aa8:	e7f2      	b.n	8009a90 <__sinit+0xc>
 8009aaa:	bf00      	nop
 8009aac:	080099f1 	.word	0x080099f1
 8009ab0:	20000acc 	.word	0x20000acc

08009ab4 <_fwalk_sglue>:
 8009ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ab8:	4607      	mov	r7, r0
 8009aba:	4688      	mov	r8, r1
 8009abc:	4614      	mov	r4, r2
 8009abe:	2600      	movs	r6, #0
 8009ac0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ac4:	f1b9 0901 	subs.w	r9, r9, #1
 8009ac8:	d505      	bpl.n	8009ad6 <_fwalk_sglue+0x22>
 8009aca:	6824      	ldr	r4, [r4, #0]
 8009acc:	2c00      	cmp	r4, #0
 8009ace:	d1f7      	bne.n	8009ac0 <_fwalk_sglue+0xc>
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ad6:	89ab      	ldrh	r3, [r5, #12]
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d907      	bls.n	8009aec <_fwalk_sglue+0x38>
 8009adc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	d003      	beq.n	8009aec <_fwalk_sglue+0x38>
 8009ae4:	4629      	mov	r1, r5
 8009ae6:	4638      	mov	r0, r7
 8009ae8:	47c0      	blx	r8
 8009aea:	4306      	orrs	r6, r0
 8009aec:	3568      	adds	r5, #104	; 0x68
 8009aee:	e7e9      	b.n	8009ac4 <_fwalk_sglue+0x10>

08009af0 <sniprintf>:
 8009af0:	b40c      	push	{r2, r3}
 8009af2:	b530      	push	{r4, r5, lr}
 8009af4:	4b17      	ldr	r3, [pc, #92]	; (8009b54 <sniprintf+0x64>)
 8009af6:	1e0c      	subs	r4, r1, #0
 8009af8:	681d      	ldr	r5, [r3, #0]
 8009afa:	b09d      	sub	sp, #116	; 0x74
 8009afc:	da08      	bge.n	8009b10 <sniprintf+0x20>
 8009afe:	238b      	movs	r3, #139	; 0x8b
 8009b00:	602b      	str	r3, [r5, #0]
 8009b02:	f04f 30ff 	mov.w	r0, #4294967295
 8009b06:	b01d      	add	sp, #116	; 0x74
 8009b08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b0c:	b002      	add	sp, #8
 8009b0e:	4770      	bx	lr
 8009b10:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009b14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009b18:	bf14      	ite	ne
 8009b1a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009b1e:	4623      	moveq	r3, r4
 8009b20:	9304      	str	r3, [sp, #16]
 8009b22:	9307      	str	r3, [sp, #28]
 8009b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b28:	9002      	str	r0, [sp, #8]
 8009b2a:	9006      	str	r0, [sp, #24]
 8009b2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009b30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009b32:	ab21      	add	r3, sp, #132	; 0x84
 8009b34:	a902      	add	r1, sp, #8
 8009b36:	4628      	mov	r0, r5
 8009b38:	9301      	str	r3, [sp, #4]
 8009b3a:	f002 f911 	bl	800bd60 <_svfiprintf_r>
 8009b3e:	1c43      	adds	r3, r0, #1
 8009b40:	bfbc      	itt	lt
 8009b42:	238b      	movlt	r3, #139	; 0x8b
 8009b44:	602b      	strlt	r3, [r5, #0]
 8009b46:	2c00      	cmp	r4, #0
 8009b48:	d0dd      	beq.n	8009b06 <sniprintf+0x16>
 8009b4a:	9b02      	ldr	r3, [sp, #8]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	701a      	strb	r2, [r3, #0]
 8009b50:	e7d9      	b.n	8009b06 <sniprintf+0x16>
 8009b52:	bf00      	nop
 8009b54:	200001e4 	.word	0x200001e4

08009b58 <siprintf>:
 8009b58:	b40e      	push	{r1, r2, r3}
 8009b5a:	b500      	push	{lr}
 8009b5c:	b09c      	sub	sp, #112	; 0x70
 8009b5e:	ab1d      	add	r3, sp, #116	; 0x74
 8009b60:	9002      	str	r0, [sp, #8]
 8009b62:	9006      	str	r0, [sp, #24]
 8009b64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b68:	4809      	ldr	r0, [pc, #36]	; (8009b90 <siprintf+0x38>)
 8009b6a:	9107      	str	r1, [sp, #28]
 8009b6c:	9104      	str	r1, [sp, #16]
 8009b6e:	4909      	ldr	r1, [pc, #36]	; (8009b94 <siprintf+0x3c>)
 8009b70:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b74:	9105      	str	r1, [sp, #20]
 8009b76:	6800      	ldr	r0, [r0, #0]
 8009b78:	9301      	str	r3, [sp, #4]
 8009b7a:	a902      	add	r1, sp, #8
 8009b7c:	f002 f8f0 	bl	800bd60 <_svfiprintf_r>
 8009b80:	9b02      	ldr	r3, [sp, #8]
 8009b82:	2200      	movs	r2, #0
 8009b84:	701a      	strb	r2, [r3, #0]
 8009b86:	b01c      	add	sp, #112	; 0x70
 8009b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b8c:	b003      	add	sp, #12
 8009b8e:	4770      	bx	lr
 8009b90:	200001e4 	.word	0x200001e4
 8009b94:	ffff0208 	.word	0xffff0208

08009b98 <__sread>:
 8009b98:	b510      	push	{r4, lr}
 8009b9a:	460c      	mov	r4, r1
 8009b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba0:	f000 f87e 	bl	8009ca0 <_read_r>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	bfab      	itete	ge
 8009ba8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009baa:	89a3      	ldrhlt	r3, [r4, #12]
 8009bac:	181b      	addge	r3, r3, r0
 8009bae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009bb2:	bfac      	ite	ge
 8009bb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009bb6:	81a3      	strhlt	r3, [r4, #12]
 8009bb8:	bd10      	pop	{r4, pc}

08009bba <__swrite>:
 8009bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bbe:	461f      	mov	r7, r3
 8009bc0:	898b      	ldrh	r3, [r1, #12]
 8009bc2:	05db      	lsls	r3, r3, #23
 8009bc4:	4605      	mov	r5, r0
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	4616      	mov	r6, r2
 8009bca:	d505      	bpl.n	8009bd8 <__swrite+0x1e>
 8009bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bd0:	2302      	movs	r3, #2
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f000 f852 	bl	8009c7c <_lseek_r>
 8009bd8:	89a3      	ldrh	r3, [r4, #12]
 8009bda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009be2:	81a3      	strh	r3, [r4, #12]
 8009be4:	4632      	mov	r2, r6
 8009be6:	463b      	mov	r3, r7
 8009be8:	4628      	mov	r0, r5
 8009bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bee:	f000 b869 	b.w	8009cc4 <_write_r>

08009bf2 <__sseek>:
 8009bf2:	b510      	push	{r4, lr}
 8009bf4:	460c      	mov	r4, r1
 8009bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bfa:	f000 f83f 	bl	8009c7c <_lseek_r>
 8009bfe:	1c43      	adds	r3, r0, #1
 8009c00:	89a3      	ldrh	r3, [r4, #12]
 8009c02:	bf15      	itete	ne
 8009c04:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c0e:	81a3      	strheq	r3, [r4, #12]
 8009c10:	bf18      	it	ne
 8009c12:	81a3      	strhne	r3, [r4, #12]
 8009c14:	bd10      	pop	{r4, pc}

08009c16 <__sclose>:
 8009c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c1a:	f000 b81f 	b.w	8009c5c <_close_r>

08009c1e <memset>:
 8009c1e:	4402      	add	r2, r0
 8009c20:	4603      	mov	r3, r0
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d100      	bne.n	8009c28 <memset+0xa>
 8009c26:	4770      	bx	lr
 8009c28:	f803 1b01 	strb.w	r1, [r3], #1
 8009c2c:	e7f9      	b.n	8009c22 <memset+0x4>

08009c2e <strncmp>:
 8009c2e:	b510      	push	{r4, lr}
 8009c30:	b16a      	cbz	r2, 8009c4e <strncmp+0x20>
 8009c32:	3901      	subs	r1, #1
 8009c34:	1884      	adds	r4, r0, r2
 8009c36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c3a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d103      	bne.n	8009c4a <strncmp+0x1c>
 8009c42:	42a0      	cmp	r0, r4
 8009c44:	d001      	beq.n	8009c4a <strncmp+0x1c>
 8009c46:	2a00      	cmp	r2, #0
 8009c48:	d1f5      	bne.n	8009c36 <strncmp+0x8>
 8009c4a:	1ad0      	subs	r0, r2, r3
 8009c4c:	bd10      	pop	{r4, pc}
 8009c4e:	4610      	mov	r0, r2
 8009c50:	e7fc      	b.n	8009c4c <strncmp+0x1e>
	...

08009c54 <_localeconv_r>:
 8009c54:	4800      	ldr	r0, [pc, #0]	; (8009c58 <_localeconv_r+0x4>)
 8009c56:	4770      	bx	lr
 8009c58:	2000011c 	.word	0x2000011c

08009c5c <_close_r>:
 8009c5c:	b538      	push	{r3, r4, r5, lr}
 8009c5e:	4d06      	ldr	r5, [pc, #24]	; (8009c78 <_close_r+0x1c>)
 8009c60:	2300      	movs	r3, #0
 8009c62:	4604      	mov	r4, r0
 8009c64:	4608      	mov	r0, r1
 8009c66:	602b      	str	r3, [r5, #0]
 8009c68:	f7f8 ff79 	bl	8002b5e <_close>
 8009c6c:	1c43      	adds	r3, r0, #1
 8009c6e:	d102      	bne.n	8009c76 <_close_r+0x1a>
 8009c70:	682b      	ldr	r3, [r5, #0]
 8009c72:	b103      	cbz	r3, 8009c76 <_close_r+0x1a>
 8009c74:	6023      	str	r3, [r4, #0]
 8009c76:	bd38      	pop	{r3, r4, r5, pc}
 8009c78:	20000ad0 	.word	0x20000ad0

08009c7c <_lseek_r>:
 8009c7c:	b538      	push	{r3, r4, r5, lr}
 8009c7e:	4d07      	ldr	r5, [pc, #28]	; (8009c9c <_lseek_r+0x20>)
 8009c80:	4604      	mov	r4, r0
 8009c82:	4608      	mov	r0, r1
 8009c84:	4611      	mov	r1, r2
 8009c86:	2200      	movs	r2, #0
 8009c88:	602a      	str	r2, [r5, #0]
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	f7f8 ff8e 	bl	8002bac <_lseek>
 8009c90:	1c43      	adds	r3, r0, #1
 8009c92:	d102      	bne.n	8009c9a <_lseek_r+0x1e>
 8009c94:	682b      	ldr	r3, [r5, #0]
 8009c96:	b103      	cbz	r3, 8009c9a <_lseek_r+0x1e>
 8009c98:	6023      	str	r3, [r4, #0]
 8009c9a:	bd38      	pop	{r3, r4, r5, pc}
 8009c9c:	20000ad0 	.word	0x20000ad0

08009ca0 <_read_r>:
 8009ca0:	b538      	push	{r3, r4, r5, lr}
 8009ca2:	4d07      	ldr	r5, [pc, #28]	; (8009cc0 <_read_r+0x20>)
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	4608      	mov	r0, r1
 8009ca8:	4611      	mov	r1, r2
 8009caa:	2200      	movs	r2, #0
 8009cac:	602a      	str	r2, [r5, #0]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	f7f8 ff1c 	bl	8002aec <_read>
 8009cb4:	1c43      	adds	r3, r0, #1
 8009cb6:	d102      	bne.n	8009cbe <_read_r+0x1e>
 8009cb8:	682b      	ldr	r3, [r5, #0]
 8009cba:	b103      	cbz	r3, 8009cbe <_read_r+0x1e>
 8009cbc:	6023      	str	r3, [r4, #0]
 8009cbe:	bd38      	pop	{r3, r4, r5, pc}
 8009cc0:	20000ad0 	.word	0x20000ad0

08009cc4 <_write_r>:
 8009cc4:	b538      	push	{r3, r4, r5, lr}
 8009cc6:	4d07      	ldr	r5, [pc, #28]	; (8009ce4 <_write_r+0x20>)
 8009cc8:	4604      	mov	r4, r0
 8009cca:	4608      	mov	r0, r1
 8009ccc:	4611      	mov	r1, r2
 8009cce:	2200      	movs	r2, #0
 8009cd0:	602a      	str	r2, [r5, #0]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	f7f8 ff27 	bl	8002b26 <_write>
 8009cd8:	1c43      	adds	r3, r0, #1
 8009cda:	d102      	bne.n	8009ce2 <_write_r+0x1e>
 8009cdc:	682b      	ldr	r3, [r5, #0]
 8009cde:	b103      	cbz	r3, 8009ce2 <_write_r+0x1e>
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	bd38      	pop	{r3, r4, r5, pc}
 8009ce4:	20000ad0 	.word	0x20000ad0

08009ce8 <__errno>:
 8009ce8:	4b01      	ldr	r3, [pc, #4]	; (8009cf0 <__errno+0x8>)
 8009cea:	6818      	ldr	r0, [r3, #0]
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	200001e4 	.word	0x200001e4

08009cf4 <__libc_init_array>:
 8009cf4:	b570      	push	{r4, r5, r6, lr}
 8009cf6:	4d0d      	ldr	r5, [pc, #52]	; (8009d2c <__libc_init_array+0x38>)
 8009cf8:	4c0d      	ldr	r4, [pc, #52]	; (8009d30 <__libc_init_array+0x3c>)
 8009cfa:	1b64      	subs	r4, r4, r5
 8009cfc:	10a4      	asrs	r4, r4, #2
 8009cfe:	2600      	movs	r6, #0
 8009d00:	42a6      	cmp	r6, r4
 8009d02:	d109      	bne.n	8009d18 <__libc_init_array+0x24>
 8009d04:	4d0b      	ldr	r5, [pc, #44]	; (8009d34 <__libc_init_array+0x40>)
 8009d06:	4c0c      	ldr	r4, [pc, #48]	; (8009d38 <__libc_init_array+0x44>)
 8009d08:	f002 fd26 	bl	800c758 <_init>
 8009d0c:	1b64      	subs	r4, r4, r5
 8009d0e:	10a4      	asrs	r4, r4, #2
 8009d10:	2600      	movs	r6, #0
 8009d12:	42a6      	cmp	r6, r4
 8009d14:	d105      	bne.n	8009d22 <__libc_init_array+0x2e>
 8009d16:	bd70      	pop	{r4, r5, r6, pc}
 8009d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d1c:	4798      	blx	r3
 8009d1e:	3601      	adds	r6, #1
 8009d20:	e7ee      	b.n	8009d00 <__libc_init_array+0xc>
 8009d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d26:	4798      	blx	r3
 8009d28:	3601      	adds	r6, #1
 8009d2a:	e7f2      	b.n	8009d12 <__libc_init_array+0x1e>
 8009d2c:	0800cbfc 	.word	0x0800cbfc
 8009d30:	0800cbfc 	.word	0x0800cbfc
 8009d34:	0800cbfc 	.word	0x0800cbfc
 8009d38:	0800cc00 	.word	0x0800cc00

08009d3c <__retarget_lock_init_recursive>:
 8009d3c:	4770      	bx	lr

08009d3e <__retarget_lock_acquire_recursive>:
 8009d3e:	4770      	bx	lr

08009d40 <__retarget_lock_release_recursive>:
 8009d40:	4770      	bx	lr

08009d42 <memcpy>:
 8009d42:	440a      	add	r2, r1
 8009d44:	4291      	cmp	r1, r2
 8009d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d4a:	d100      	bne.n	8009d4e <memcpy+0xc>
 8009d4c:	4770      	bx	lr
 8009d4e:	b510      	push	{r4, lr}
 8009d50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d58:	4291      	cmp	r1, r2
 8009d5a:	d1f9      	bne.n	8009d50 <memcpy+0xe>
 8009d5c:	bd10      	pop	{r4, pc}
	...

08009d60 <nan>:
 8009d60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009d68 <nan+0x8>
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	00000000 	.word	0x00000000
 8009d6c:	7ff80000 	.word	0x7ff80000

08009d70 <quorem>:
 8009d70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d74:	6903      	ldr	r3, [r0, #16]
 8009d76:	690c      	ldr	r4, [r1, #16]
 8009d78:	42a3      	cmp	r3, r4
 8009d7a:	4607      	mov	r7, r0
 8009d7c:	db7e      	blt.n	8009e7c <quorem+0x10c>
 8009d7e:	3c01      	subs	r4, #1
 8009d80:	f101 0814 	add.w	r8, r1, #20
 8009d84:	f100 0514 	add.w	r5, r0, #20
 8009d88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d8c:	9301      	str	r3, [sp, #4]
 8009d8e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d96:	3301      	adds	r3, #1
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009d9e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009da2:	fbb2 f6f3 	udiv	r6, r2, r3
 8009da6:	d331      	bcc.n	8009e0c <quorem+0x9c>
 8009da8:	f04f 0e00 	mov.w	lr, #0
 8009dac:	4640      	mov	r0, r8
 8009dae:	46ac      	mov	ip, r5
 8009db0:	46f2      	mov	sl, lr
 8009db2:	f850 2b04 	ldr.w	r2, [r0], #4
 8009db6:	b293      	uxth	r3, r2
 8009db8:	fb06 e303 	mla	r3, r6, r3, lr
 8009dbc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009dc0:	0c1a      	lsrs	r2, r3, #16
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	ebaa 0303 	sub.w	r3, sl, r3
 8009dc8:	f8dc a000 	ldr.w	sl, [ip]
 8009dcc:	fa13 f38a 	uxtah	r3, r3, sl
 8009dd0:	fb06 220e 	mla	r2, r6, lr, r2
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	9b00      	ldr	r3, [sp, #0]
 8009dd8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ddc:	b292      	uxth	r2, r2
 8009dde:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009de2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009de6:	f8bd 3000 	ldrh.w	r3, [sp]
 8009dea:	4581      	cmp	r9, r0
 8009dec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009df0:	f84c 3b04 	str.w	r3, [ip], #4
 8009df4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009df8:	d2db      	bcs.n	8009db2 <quorem+0x42>
 8009dfa:	f855 300b 	ldr.w	r3, [r5, fp]
 8009dfe:	b92b      	cbnz	r3, 8009e0c <quorem+0x9c>
 8009e00:	9b01      	ldr	r3, [sp, #4]
 8009e02:	3b04      	subs	r3, #4
 8009e04:	429d      	cmp	r5, r3
 8009e06:	461a      	mov	r2, r3
 8009e08:	d32c      	bcc.n	8009e64 <quorem+0xf4>
 8009e0a:	613c      	str	r4, [r7, #16]
 8009e0c:	4638      	mov	r0, r7
 8009e0e:	f001 fd59 	bl	800b8c4 <__mcmp>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	db22      	blt.n	8009e5c <quorem+0xec>
 8009e16:	3601      	adds	r6, #1
 8009e18:	4629      	mov	r1, r5
 8009e1a:	2000      	movs	r0, #0
 8009e1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e20:	f8d1 c000 	ldr.w	ip, [r1]
 8009e24:	b293      	uxth	r3, r2
 8009e26:	1ac3      	subs	r3, r0, r3
 8009e28:	0c12      	lsrs	r2, r2, #16
 8009e2a:	fa13 f38c 	uxtah	r3, r3, ip
 8009e2e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009e32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e3c:	45c1      	cmp	r9, r8
 8009e3e:	f841 3b04 	str.w	r3, [r1], #4
 8009e42:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e46:	d2e9      	bcs.n	8009e1c <quorem+0xac>
 8009e48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e50:	b922      	cbnz	r2, 8009e5c <quorem+0xec>
 8009e52:	3b04      	subs	r3, #4
 8009e54:	429d      	cmp	r5, r3
 8009e56:	461a      	mov	r2, r3
 8009e58:	d30a      	bcc.n	8009e70 <quorem+0x100>
 8009e5a:	613c      	str	r4, [r7, #16]
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	b003      	add	sp, #12
 8009e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e64:	6812      	ldr	r2, [r2, #0]
 8009e66:	3b04      	subs	r3, #4
 8009e68:	2a00      	cmp	r2, #0
 8009e6a:	d1ce      	bne.n	8009e0a <quorem+0x9a>
 8009e6c:	3c01      	subs	r4, #1
 8009e6e:	e7c9      	b.n	8009e04 <quorem+0x94>
 8009e70:	6812      	ldr	r2, [r2, #0]
 8009e72:	3b04      	subs	r3, #4
 8009e74:	2a00      	cmp	r2, #0
 8009e76:	d1f0      	bne.n	8009e5a <quorem+0xea>
 8009e78:	3c01      	subs	r4, #1
 8009e7a:	e7eb      	b.n	8009e54 <quorem+0xe4>
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	e7ee      	b.n	8009e5e <quorem+0xee>

08009e80 <_dtoa_r>:
 8009e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e84:	ed2d 8b04 	vpush	{d8-d9}
 8009e88:	69c5      	ldr	r5, [r0, #28]
 8009e8a:	b093      	sub	sp, #76	; 0x4c
 8009e8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009e90:	ec57 6b10 	vmov	r6, r7, d0
 8009e94:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e98:	9107      	str	r1, [sp, #28]
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	920a      	str	r2, [sp, #40]	; 0x28
 8009e9e:	930d      	str	r3, [sp, #52]	; 0x34
 8009ea0:	b975      	cbnz	r5, 8009ec0 <_dtoa_r+0x40>
 8009ea2:	2010      	movs	r0, #16
 8009ea4:	f001 f982 	bl	800b1ac <malloc>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	61e0      	str	r0, [r4, #28]
 8009eac:	b920      	cbnz	r0, 8009eb8 <_dtoa_r+0x38>
 8009eae:	4bae      	ldr	r3, [pc, #696]	; (800a168 <_dtoa_r+0x2e8>)
 8009eb0:	21ef      	movs	r1, #239	; 0xef
 8009eb2:	48ae      	ldr	r0, [pc, #696]	; (800a16c <_dtoa_r+0x2ec>)
 8009eb4:	f002 f92a 	bl	800c10c <__assert_func>
 8009eb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ebc:	6005      	str	r5, [r0, #0]
 8009ebe:	60c5      	str	r5, [r0, #12]
 8009ec0:	69e3      	ldr	r3, [r4, #28]
 8009ec2:	6819      	ldr	r1, [r3, #0]
 8009ec4:	b151      	cbz	r1, 8009edc <_dtoa_r+0x5c>
 8009ec6:	685a      	ldr	r2, [r3, #4]
 8009ec8:	604a      	str	r2, [r1, #4]
 8009eca:	2301      	movs	r3, #1
 8009ecc:	4093      	lsls	r3, r2
 8009ece:	608b      	str	r3, [r1, #8]
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f001 fa71 	bl	800b3b8 <_Bfree>
 8009ed6:	69e3      	ldr	r3, [r4, #28]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	601a      	str	r2, [r3, #0]
 8009edc:	1e3b      	subs	r3, r7, #0
 8009ede:	bfbb      	ittet	lt
 8009ee0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009ee4:	9303      	strlt	r3, [sp, #12]
 8009ee6:	2300      	movge	r3, #0
 8009ee8:	2201      	movlt	r2, #1
 8009eea:	bfac      	ite	ge
 8009eec:	f8c8 3000 	strge.w	r3, [r8]
 8009ef0:	f8c8 2000 	strlt.w	r2, [r8]
 8009ef4:	4b9e      	ldr	r3, [pc, #632]	; (800a170 <_dtoa_r+0x2f0>)
 8009ef6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009efa:	ea33 0308 	bics.w	r3, r3, r8
 8009efe:	d11b      	bne.n	8009f38 <_dtoa_r+0xb8>
 8009f00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f02:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f06:	6013      	str	r3, [r2, #0]
 8009f08:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009f0c:	4333      	orrs	r3, r6
 8009f0e:	f000 8593 	beq.w	800aa38 <_dtoa_r+0xbb8>
 8009f12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f14:	b963      	cbnz	r3, 8009f30 <_dtoa_r+0xb0>
 8009f16:	4b97      	ldr	r3, [pc, #604]	; (800a174 <_dtoa_r+0x2f4>)
 8009f18:	e027      	b.n	8009f6a <_dtoa_r+0xea>
 8009f1a:	4b97      	ldr	r3, [pc, #604]	; (800a178 <_dtoa_r+0x2f8>)
 8009f1c:	9300      	str	r3, [sp, #0]
 8009f1e:	3308      	adds	r3, #8
 8009f20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f22:	6013      	str	r3, [r2, #0]
 8009f24:	9800      	ldr	r0, [sp, #0]
 8009f26:	b013      	add	sp, #76	; 0x4c
 8009f28:	ecbd 8b04 	vpop	{d8-d9}
 8009f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f30:	4b90      	ldr	r3, [pc, #576]	; (800a174 <_dtoa_r+0x2f4>)
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	3303      	adds	r3, #3
 8009f36:	e7f3      	b.n	8009f20 <_dtoa_r+0xa0>
 8009f38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	ec51 0b17 	vmov	r0, r1, d7
 8009f42:	eeb0 8a47 	vmov.f32	s16, s14
 8009f46:	eef0 8a67 	vmov.f32	s17, s15
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f7f6 fddc 	bl	8000b08 <__aeabi_dcmpeq>
 8009f50:	4681      	mov	r9, r0
 8009f52:	b160      	cbz	r0, 8009f6e <_dtoa_r+0xee>
 8009f54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f56:	2301      	movs	r3, #1
 8009f58:	6013      	str	r3, [r2, #0]
 8009f5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f000 8568 	beq.w	800aa32 <_dtoa_r+0xbb2>
 8009f62:	4b86      	ldr	r3, [pc, #536]	; (800a17c <_dtoa_r+0x2fc>)
 8009f64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f66:	6013      	str	r3, [r2, #0]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	e7da      	b.n	8009f24 <_dtoa_r+0xa4>
 8009f6e:	aa10      	add	r2, sp, #64	; 0x40
 8009f70:	a911      	add	r1, sp, #68	; 0x44
 8009f72:	4620      	mov	r0, r4
 8009f74:	eeb0 0a48 	vmov.f32	s0, s16
 8009f78:	eef0 0a68 	vmov.f32	s1, s17
 8009f7c:	f001 fdb8 	bl	800baf0 <__d2b>
 8009f80:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009f84:	4682      	mov	sl, r0
 8009f86:	2d00      	cmp	r5, #0
 8009f88:	d07f      	beq.n	800a08a <_dtoa_r+0x20a>
 8009f8a:	ee18 3a90 	vmov	r3, s17
 8009f8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f92:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009f96:	ec51 0b18 	vmov	r0, r1, d8
 8009f9a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009f9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009fa2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	2200      	movs	r2, #0
 8009faa:	4b75      	ldr	r3, [pc, #468]	; (800a180 <_dtoa_r+0x300>)
 8009fac:	f7f6 f98c 	bl	80002c8 <__aeabi_dsub>
 8009fb0:	a367      	add	r3, pc, #412	; (adr r3, 800a150 <_dtoa_r+0x2d0>)
 8009fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb6:	f7f6 fb3f 	bl	8000638 <__aeabi_dmul>
 8009fba:	a367      	add	r3, pc, #412	; (adr r3, 800a158 <_dtoa_r+0x2d8>)
 8009fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc0:	f7f6 f984 	bl	80002cc <__adddf3>
 8009fc4:	4606      	mov	r6, r0
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	460f      	mov	r7, r1
 8009fca:	f7f6 facb 	bl	8000564 <__aeabi_i2d>
 8009fce:	a364      	add	r3, pc, #400	; (adr r3, 800a160 <_dtoa_r+0x2e0>)
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	f7f6 fb30 	bl	8000638 <__aeabi_dmul>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4630      	mov	r0, r6
 8009fde:	4639      	mov	r1, r7
 8009fe0:	f7f6 f974 	bl	80002cc <__adddf3>
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	460f      	mov	r7, r1
 8009fe8:	f7f6 fdd6 	bl	8000b98 <__aeabi_d2iz>
 8009fec:	2200      	movs	r2, #0
 8009fee:	4683      	mov	fp, r0
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	4639      	mov	r1, r7
 8009ff6:	f7f6 fd91 	bl	8000b1c <__aeabi_dcmplt>
 8009ffa:	b148      	cbz	r0, 800a010 <_dtoa_r+0x190>
 8009ffc:	4658      	mov	r0, fp
 8009ffe:	f7f6 fab1 	bl	8000564 <__aeabi_i2d>
 800a002:	4632      	mov	r2, r6
 800a004:	463b      	mov	r3, r7
 800a006:	f7f6 fd7f 	bl	8000b08 <__aeabi_dcmpeq>
 800a00a:	b908      	cbnz	r0, 800a010 <_dtoa_r+0x190>
 800a00c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a010:	f1bb 0f16 	cmp.w	fp, #22
 800a014:	d857      	bhi.n	800a0c6 <_dtoa_r+0x246>
 800a016:	4b5b      	ldr	r3, [pc, #364]	; (800a184 <_dtoa_r+0x304>)
 800a018:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a020:	ec51 0b18 	vmov	r0, r1, d8
 800a024:	f7f6 fd7a 	bl	8000b1c <__aeabi_dcmplt>
 800a028:	2800      	cmp	r0, #0
 800a02a:	d04e      	beq.n	800a0ca <_dtoa_r+0x24a>
 800a02c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a030:	2300      	movs	r3, #0
 800a032:	930c      	str	r3, [sp, #48]	; 0x30
 800a034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a036:	1b5b      	subs	r3, r3, r5
 800a038:	1e5a      	subs	r2, r3, #1
 800a03a:	bf45      	ittet	mi
 800a03c:	f1c3 0301 	rsbmi	r3, r3, #1
 800a040:	9305      	strmi	r3, [sp, #20]
 800a042:	2300      	movpl	r3, #0
 800a044:	2300      	movmi	r3, #0
 800a046:	9206      	str	r2, [sp, #24]
 800a048:	bf54      	ite	pl
 800a04a:	9305      	strpl	r3, [sp, #20]
 800a04c:	9306      	strmi	r3, [sp, #24]
 800a04e:	f1bb 0f00 	cmp.w	fp, #0
 800a052:	db3c      	blt.n	800a0ce <_dtoa_r+0x24e>
 800a054:	9b06      	ldr	r3, [sp, #24]
 800a056:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a05a:	445b      	add	r3, fp
 800a05c:	9306      	str	r3, [sp, #24]
 800a05e:	2300      	movs	r3, #0
 800a060:	9308      	str	r3, [sp, #32]
 800a062:	9b07      	ldr	r3, [sp, #28]
 800a064:	2b09      	cmp	r3, #9
 800a066:	d868      	bhi.n	800a13a <_dtoa_r+0x2ba>
 800a068:	2b05      	cmp	r3, #5
 800a06a:	bfc4      	itt	gt
 800a06c:	3b04      	subgt	r3, #4
 800a06e:	9307      	strgt	r3, [sp, #28]
 800a070:	9b07      	ldr	r3, [sp, #28]
 800a072:	f1a3 0302 	sub.w	r3, r3, #2
 800a076:	bfcc      	ite	gt
 800a078:	2500      	movgt	r5, #0
 800a07a:	2501      	movle	r5, #1
 800a07c:	2b03      	cmp	r3, #3
 800a07e:	f200 8085 	bhi.w	800a18c <_dtoa_r+0x30c>
 800a082:	e8df f003 	tbb	[pc, r3]
 800a086:	3b2e      	.short	0x3b2e
 800a088:	5839      	.short	0x5839
 800a08a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a08e:	441d      	add	r5, r3
 800a090:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a094:	2b20      	cmp	r3, #32
 800a096:	bfc1      	itttt	gt
 800a098:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a09c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a0a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a0a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a0a8:	bfd6      	itet	le
 800a0aa:	f1c3 0320 	rsble	r3, r3, #32
 800a0ae:	ea48 0003 	orrgt.w	r0, r8, r3
 800a0b2:	fa06 f003 	lslle.w	r0, r6, r3
 800a0b6:	f7f6 fa45 	bl	8000544 <__aeabi_ui2d>
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a0c0:	3d01      	subs	r5, #1
 800a0c2:	920e      	str	r2, [sp, #56]	; 0x38
 800a0c4:	e76f      	b.n	8009fa6 <_dtoa_r+0x126>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e7b3      	b.n	800a032 <_dtoa_r+0x1b2>
 800a0ca:	900c      	str	r0, [sp, #48]	; 0x30
 800a0cc:	e7b2      	b.n	800a034 <_dtoa_r+0x1b4>
 800a0ce:	9b05      	ldr	r3, [sp, #20]
 800a0d0:	eba3 030b 	sub.w	r3, r3, fp
 800a0d4:	9305      	str	r3, [sp, #20]
 800a0d6:	f1cb 0300 	rsb	r3, fp, #0
 800a0da:	9308      	str	r3, [sp, #32]
 800a0dc:	2300      	movs	r3, #0
 800a0de:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0e0:	e7bf      	b.n	800a062 <_dtoa_r+0x1e2>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	dc52      	bgt.n	800a192 <_dtoa_r+0x312>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	9301      	str	r3, [sp, #4]
 800a0f0:	9304      	str	r3, [sp, #16]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	920a      	str	r2, [sp, #40]	; 0x28
 800a0f6:	e00b      	b.n	800a110 <_dtoa_r+0x290>
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e7f3      	b.n	800a0e4 <_dtoa_r+0x264>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a102:	445b      	add	r3, fp
 800a104:	9301      	str	r3, [sp, #4]
 800a106:	3301      	adds	r3, #1
 800a108:	2b01      	cmp	r3, #1
 800a10a:	9304      	str	r3, [sp, #16]
 800a10c:	bfb8      	it	lt
 800a10e:	2301      	movlt	r3, #1
 800a110:	69e0      	ldr	r0, [r4, #28]
 800a112:	2100      	movs	r1, #0
 800a114:	2204      	movs	r2, #4
 800a116:	f102 0614 	add.w	r6, r2, #20
 800a11a:	429e      	cmp	r6, r3
 800a11c:	d93d      	bls.n	800a19a <_dtoa_r+0x31a>
 800a11e:	6041      	str	r1, [r0, #4]
 800a120:	4620      	mov	r0, r4
 800a122:	f001 f909 	bl	800b338 <_Balloc>
 800a126:	9000      	str	r0, [sp, #0]
 800a128:	2800      	cmp	r0, #0
 800a12a:	d139      	bne.n	800a1a0 <_dtoa_r+0x320>
 800a12c:	4b16      	ldr	r3, [pc, #88]	; (800a188 <_dtoa_r+0x308>)
 800a12e:	4602      	mov	r2, r0
 800a130:	f240 11af 	movw	r1, #431	; 0x1af
 800a134:	e6bd      	b.n	8009eb2 <_dtoa_r+0x32>
 800a136:	2301      	movs	r3, #1
 800a138:	e7e1      	b.n	800a0fe <_dtoa_r+0x27e>
 800a13a:	2501      	movs	r5, #1
 800a13c:	2300      	movs	r3, #0
 800a13e:	9307      	str	r3, [sp, #28]
 800a140:	9509      	str	r5, [sp, #36]	; 0x24
 800a142:	f04f 33ff 	mov.w	r3, #4294967295
 800a146:	9301      	str	r3, [sp, #4]
 800a148:	9304      	str	r3, [sp, #16]
 800a14a:	2200      	movs	r2, #0
 800a14c:	2312      	movs	r3, #18
 800a14e:	e7d1      	b.n	800a0f4 <_dtoa_r+0x274>
 800a150:	636f4361 	.word	0x636f4361
 800a154:	3fd287a7 	.word	0x3fd287a7
 800a158:	8b60c8b3 	.word	0x8b60c8b3
 800a15c:	3fc68a28 	.word	0x3fc68a28
 800a160:	509f79fb 	.word	0x509f79fb
 800a164:	3fd34413 	.word	0x3fd34413
 800a168:	0800c869 	.word	0x0800c869
 800a16c:	0800c880 	.word	0x0800c880
 800a170:	7ff00000 	.word	0x7ff00000
 800a174:	0800c865 	.word	0x0800c865
 800a178:	0800c85c 	.word	0x0800c85c
 800a17c:	0800c831 	.word	0x0800c831
 800a180:	3ff80000 	.word	0x3ff80000
 800a184:	0800c9d0 	.word	0x0800c9d0
 800a188:	0800c8d8 	.word	0x0800c8d8
 800a18c:	2301      	movs	r3, #1
 800a18e:	9309      	str	r3, [sp, #36]	; 0x24
 800a190:	e7d7      	b.n	800a142 <_dtoa_r+0x2c2>
 800a192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a194:	9301      	str	r3, [sp, #4]
 800a196:	9304      	str	r3, [sp, #16]
 800a198:	e7ba      	b.n	800a110 <_dtoa_r+0x290>
 800a19a:	3101      	adds	r1, #1
 800a19c:	0052      	lsls	r2, r2, #1
 800a19e:	e7ba      	b.n	800a116 <_dtoa_r+0x296>
 800a1a0:	69e3      	ldr	r3, [r4, #28]
 800a1a2:	9a00      	ldr	r2, [sp, #0]
 800a1a4:	601a      	str	r2, [r3, #0]
 800a1a6:	9b04      	ldr	r3, [sp, #16]
 800a1a8:	2b0e      	cmp	r3, #14
 800a1aa:	f200 80a8 	bhi.w	800a2fe <_dtoa_r+0x47e>
 800a1ae:	2d00      	cmp	r5, #0
 800a1b0:	f000 80a5 	beq.w	800a2fe <_dtoa_r+0x47e>
 800a1b4:	f1bb 0f00 	cmp.w	fp, #0
 800a1b8:	dd38      	ble.n	800a22c <_dtoa_r+0x3ac>
 800a1ba:	4bc0      	ldr	r3, [pc, #768]	; (800a4bc <_dtoa_r+0x63c>)
 800a1bc:	f00b 020f 	and.w	r2, fp, #15
 800a1c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a1c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a1cc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a1d0:	d019      	beq.n	800a206 <_dtoa_r+0x386>
 800a1d2:	4bbb      	ldr	r3, [pc, #748]	; (800a4c0 <_dtoa_r+0x640>)
 800a1d4:	ec51 0b18 	vmov	r0, r1, d8
 800a1d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1dc:	f7f6 fb56 	bl	800088c <__aeabi_ddiv>
 800a1e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1e4:	f008 080f 	and.w	r8, r8, #15
 800a1e8:	2503      	movs	r5, #3
 800a1ea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a4c0 <_dtoa_r+0x640>
 800a1ee:	f1b8 0f00 	cmp.w	r8, #0
 800a1f2:	d10a      	bne.n	800a20a <_dtoa_r+0x38a>
 800a1f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1f8:	4632      	mov	r2, r6
 800a1fa:	463b      	mov	r3, r7
 800a1fc:	f7f6 fb46 	bl	800088c <__aeabi_ddiv>
 800a200:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a204:	e02b      	b.n	800a25e <_dtoa_r+0x3de>
 800a206:	2502      	movs	r5, #2
 800a208:	e7ef      	b.n	800a1ea <_dtoa_r+0x36a>
 800a20a:	f018 0f01 	tst.w	r8, #1
 800a20e:	d008      	beq.n	800a222 <_dtoa_r+0x3a2>
 800a210:	4630      	mov	r0, r6
 800a212:	4639      	mov	r1, r7
 800a214:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a218:	f7f6 fa0e 	bl	8000638 <__aeabi_dmul>
 800a21c:	3501      	adds	r5, #1
 800a21e:	4606      	mov	r6, r0
 800a220:	460f      	mov	r7, r1
 800a222:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a226:	f109 0908 	add.w	r9, r9, #8
 800a22a:	e7e0      	b.n	800a1ee <_dtoa_r+0x36e>
 800a22c:	f000 809f 	beq.w	800a36e <_dtoa_r+0x4ee>
 800a230:	f1cb 0600 	rsb	r6, fp, #0
 800a234:	4ba1      	ldr	r3, [pc, #644]	; (800a4bc <_dtoa_r+0x63c>)
 800a236:	4fa2      	ldr	r7, [pc, #648]	; (800a4c0 <_dtoa_r+0x640>)
 800a238:	f006 020f 	and.w	r2, r6, #15
 800a23c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a244:	ec51 0b18 	vmov	r0, r1, d8
 800a248:	f7f6 f9f6 	bl	8000638 <__aeabi_dmul>
 800a24c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a250:	1136      	asrs	r6, r6, #4
 800a252:	2300      	movs	r3, #0
 800a254:	2502      	movs	r5, #2
 800a256:	2e00      	cmp	r6, #0
 800a258:	d17e      	bne.n	800a358 <_dtoa_r+0x4d8>
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d1d0      	bne.n	800a200 <_dtoa_r+0x380>
 800a25e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a260:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 8084 	beq.w	800a372 <_dtoa_r+0x4f2>
 800a26a:	4b96      	ldr	r3, [pc, #600]	; (800a4c4 <_dtoa_r+0x644>)
 800a26c:	2200      	movs	r2, #0
 800a26e:	4640      	mov	r0, r8
 800a270:	4649      	mov	r1, r9
 800a272:	f7f6 fc53 	bl	8000b1c <__aeabi_dcmplt>
 800a276:	2800      	cmp	r0, #0
 800a278:	d07b      	beq.n	800a372 <_dtoa_r+0x4f2>
 800a27a:	9b04      	ldr	r3, [sp, #16]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d078      	beq.n	800a372 <_dtoa_r+0x4f2>
 800a280:	9b01      	ldr	r3, [sp, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	dd39      	ble.n	800a2fa <_dtoa_r+0x47a>
 800a286:	4b90      	ldr	r3, [pc, #576]	; (800a4c8 <_dtoa_r+0x648>)
 800a288:	2200      	movs	r2, #0
 800a28a:	4640      	mov	r0, r8
 800a28c:	4649      	mov	r1, r9
 800a28e:	f7f6 f9d3 	bl	8000638 <__aeabi_dmul>
 800a292:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a296:	9e01      	ldr	r6, [sp, #4]
 800a298:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a29c:	3501      	adds	r5, #1
 800a29e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	f7f6 f95e 	bl	8000564 <__aeabi_i2d>
 800a2a8:	4642      	mov	r2, r8
 800a2aa:	464b      	mov	r3, r9
 800a2ac:	f7f6 f9c4 	bl	8000638 <__aeabi_dmul>
 800a2b0:	4b86      	ldr	r3, [pc, #536]	; (800a4cc <_dtoa_r+0x64c>)
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f7f6 f80a 	bl	80002cc <__adddf3>
 800a2b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a2bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2c0:	9303      	str	r3, [sp, #12]
 800a2c2:	2e00      	cmp	r6, #0
 800a2c4:	d158      	bne.n	800a378 <_dtoa_r+0x4f8>
 800a2c6:	4b82      	ldr	r3, [pc, #520]	; (800a4d0 <_dtoa_r+0x650>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	4640      	mov	r0, r8
 800a2cc:	4649      	mov	r1, r9
 800a2ce:	f7f5 fffb 	bl	80002c8 <__aeabi_dsub>
 800a2d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2d6:	4680      	mov	r8, r0
 800a2d8:	4689      	mov	r9, r1
 800a2da:	f7f6 fc3d 	bl	8000b58 <__aeabi_dcmpgt>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	f040 8296 	bne.w	800a810 <_dtoa_r+0x990>
 800a2e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a2e8:	4640      	mov	r0, r8
 800a2ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2ee:	4649      	mov	r1, r9
 800a2f0:	f7f6 fc14 	bl	8000b1c <__aeabi_dcmplt>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	f040 8289 	bne.w	800a80c <_dtoa_r+0x98c>
 800a2fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a2fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a300:	2b00      	cmp	r3, #0
 800a302:	f2c0 814e 	blt.w	800a5a2 <_dtoa_r+0x722>
 800a306:	f1bb 0f0e 	cmp.w	fp, #14
 800a30a:	f300 814a 	bgt.w	800a5a2 <_dtoa_r+0x722>
 800a30e:	4b6b      	ldr	r3, [pc, #428]	; (800a4bc <_dtoa_r+0x63c>)
 800a310:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a314:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	f280 80dc 	bge.w	800a4d8 <_dtoa_r+0x658>
 800a320:	9b04      	ldr	r3, [sp, #16]
 800a322:	2b00      	cmp	r3, #0
 800a324:	f300 80d8 	bgt.w	800a4d8 <_dtoa_r+0x658>
 800a328:	f040 826f 	bne.w	800a80a <_dtoa_r+0x98a>
 800a32c:	4b68      	ldr	r3, [pc, #416]	; (800a4d0 <_dtoa_r+0x650>)
 800a32e:	2200      	movs	r2, #0
 800a330:	4640      	mov	r0, r8
 800a332:	4649      	mov	r1, r9
 800a334:	f7f6 f980 	bl	8000638 <__aeabi_dmul>
 800a338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a33c:	f7f6 fc02 	bl	8000b44 <__aeabi_dcmpge>
 800a340:	9e04      	ldr	r6, [sp, #16]
 800a342:	4637      	mov	r7, r6
 800a344:	2800      	cmp	r0, #0
 800a346:	f040 8245 	bne.w	800a7d4 <_dtoa_r+0x954>
 800a34a:	9d00      	ldr	r5, [sp, #0]
 800a34c:	2331      	movs	r3, #49	; 0x31
 800a34e:	f805 3b01 	strb.w	r3, [r5], #1
 800a352:	f10b 0b01 	add.w	fp, fp, #1
 800a356:	e241      	b.n	800a7dc <_dtoa_r+0x95c>
 800a358:	07f2      	lsls	r2, r6, #31
 800a35a:	d505      	bpl.n	800a368 <_dtoa_r+0x4e8>
 800a35c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a360:	f7f6 f96a 	bl	8000638 <__aeabi_dmul>
 800a364:	3501      	adds	r5, #1
 800a366:	2301      	movs	r3, #1
 800a368:	1076      	asrs	r6, r6, #1
 800a36a:	3708      	adds	r7, #8
 800a36c:	e773      	b.n	800a256 <_dtoa_r+0x3d6>
 800a36e:	2502      	movs	r5, #2
 800a370:	e775      	b.n	800a25e <_dtoa_r+0x3de>
 800a372:	9e04      	ldr	r6, [sp, #16]
 800a374:	465f      	mov	r7, fp
 800a376:	e792      	b.n	800a29e <_dtoa_r+0x41e>
 800a378:	9900      	ldr	r1, [sp, #0]
 800a37a:	4b50      	ldr	r3, [pc, #320]	; (800a4bc <_dtoa_r+0x63c>)
 800a37c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a380:	4431      	add	r1, r6
 800a382:	9102      	str	r1, [sp, #8]
 800a384:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a386:	eeb0 9a47 	vmov.f32	s18, s14
 800a38a:	eef0 9a67 	vmov.f32	s19, s15
 800a38e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a392:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a396:	2900      	cmp	r1, #0
 800a398:	d044      	beq.n	800a424 <_dtoa_r+0x5a4>
 800a39a:	494e      	ldr	r1, [pc, #312]	; (800a4d4 <_dtoa_r+0x654>)
 800a39c:	2000      	movs	r0, #0
 800a39e:	f7f6 fa75 	bl	800088c <__aeabi_ddiv>
 800a3a2:	ec53 2b19 	vmov	r2, r3, d9
 800a3a6:	f7f5 ff8f 	bl	80002c8 <__aeabi_dsub>
 800a3aa:	9d00      	ldr	r5, [sp, #0]
 800a3ac:	ec41 0b19 	vmov	d9, r0, r1
 800a3b0:	4649      	mov	r1, r9
 800a3b2:	4640      	mov	r0, r8
 800a3b4:	f7f6 fbf0 	bl	8000b98 <__aeabi_d2iz>
 800a3b8:	4606      	mov	r6, r0
 800a3ba:	f7f6 f8d3 	bl	8000564 <__aeabi_i2d>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	4640      	mov	r0, r8
 800a3c4:	4649      	mov	r1, r9
 800a3c6:	f7f5 ff7f 	bl	80002c8 <__aeabi_dsub>
 800a3ca:	3630      	adds	r6, #48	; 0x30
 800a3cc:	f805 6b01 	strb.w	r6, [r5], #1
 800a3d0:	ec53 2b19 	vmov	r2, r3, d9
 800a3d4:	4680      	mov	r8, r0
 800a3d6:	4689      	mov	r9, r1
 800a3d8:	f7f6 fba0 	bl	8000b1c <__aeabi_dcmplt>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d164      	bne.n	800a4aa <_dtoa_r+0x62a>
 800a3e0:	4642      	mov	r2, r8
 800a3e2:	464b      	mov	r3, r9
 800a3e4:	4937      	ldr	r1, [pc, #220]	; (800a4c4 <_dtoa_r+0x644>)
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	f7f5 ff6e 	bl	80002c8 <__aeabi_dsub>
 800a3ec:	ec53 2b19 	vmov	r2, r3, d9
 800a3f0:	f7f6 fb94 	bl	8000b1c <__aeabi_dcmplt>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	f040 80b6 	bne.w	800a566 <_dtoa_r+0x6e6>
 800a3fa:	9b02      	ldr	r3, [sp, #8]
 800a3fc:	429d      	cmp	r5, r3
 800a3fe:	f43f af7c 	beq.w	800a2fa <_dtoa_r+0x47a>
 800a402:	4b31      	ldr	r3, [pc, #196]	; (800a4c8 <_dtoa_r+0x648>)
 800a404:	ec51 0b19 	vmov	r0, r1, d9
 800a408:	2200      	movs	r2, #0
 800a40a:	f7f6 f915 	bl	8000638 <__aeabi_dmul>
 800a40e:	4b2e      	ldr	r3, [pc, #184]	; (800a4c8 <_dtoa_r+0x648>)
 800a410:	ec41 0b19 	vmov	d9, r0, r1
 800a414:	2200      	movs	r2, #0
 800a416:	4640      	mov	r0, r8
 800a418:	4649      	mov	r1, r9
 800a41a:	f7f6 f90d 	bl	8000638 <__aeabi_dmul>
 800a41e:	4680      	mov	r8, r0
 800a420:	4689      	mov	r9, r1
 800a422:	e7c5      	b.n	800a3b0 <_dtoa_r+0x530>
 800a424:	ec51 0b17 	vmov	r0, r1, d7
 800a428:	f7f6 f906 	bl	8000638 <__aeabi_dmul>
 800a42c:	9b02      	ldr	r3, [sp, #8]
 800a42e:	9d00      	ldr	r5, [sp, #0]
 800a430:	930f      	str	r3, [sp, #60]	; 0x3c
 800a432:	ec41 0b19 	vmov	d9, r0, r1
 800a436:	4649      	mov	r1, r9
 800a438:	4640      	mov	r0, r8
 800a43a:	f7f6 fbad 	bl	8000b98 <__aeabi_d2iz>
 800a43e:	4606      	mov	r6, r0
 800a440:	f7f6 f890 	bl	8000564 <__aeabi_i2d>
 800a444:	3630      	adds	r6, #48	; 0x30
 800a446:	4602      	mov	r2, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	4640      	mov	r0, r8
 800a44c:	4649      	mov	r1, r9
 800a44e:	f7f5 ff3b 	bl	80002c8 <__aeabi_dsub>
 800a452:	f805 6b01 	strb.w	r6, [r5], #1
 800a456:	9b02      	ldr	r3, [sp, #8]
 800a458:	429d      	cmp	r5, r3
 800a45a:	4680      	mov	r8, r0
 800a45c:	4689      	mov	r9, r1
 800a45e:	f04f 0200 	mov.w	r2, #0
 800a462:	d124      	bne.n	800a4ae <_dtoa_r+0x62e>
 800a464:	4b1b      	ldr	r3, [pc, #108]	; (800a4d4 <_dtoa_r+0x654>)
 800a466:	ec51 0b19 	vmov	r0, r1, d9
 800a46a:	f7f5 ff2f 	bl	80002cc <__adddf3>
 800a46e:	4602      	mov	r2, r0
 800a470:	460b      	mov	r3, r1
 800a472:	4640      	mov	r0, r8
 800a474:	4649      	mov	r1, r9
 800a476:	f7f6 fb6f 	bl	8000b58 <__aeabi_dcmpgt>
 800a47a:	2800      	cmp	r0, #0
 800a47c:	d173      	bne.n	800a566 <_dtoa_r+0x6e6>
 800a47e:	ec53 2b19 	vmov	r2, r3, d9
 800a482:	4914      	ldr	r1, [pc, #80]	; (800a4d4 <_dtoa_r+0x654>)
 800a484:	2000      	movs	r0, #0
 800a486:	f7f5 ff1f 	bl	80002c8 <__aeabi_dsub>
 800a48a:	4602      	mov	r2, r0
 800a48c:	460b      	mov	r3, r1
 800a48e:	4640      	mov	r0, r8
 800a490:	4649      	mov	r1, r9
 800a492:	f7f6 fb43 	bl	8000b1c <__aeabi_dcmplt>
 800a496:	2800      	cmp	r0, #0
 800a498:	f43f af2f 	beq.w	800a2fa <_dtoa_r+0x47a>
 800a49c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a49e:	1e6b      	subs	r3, r5, #1
 800a4a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a4a6:	2b30      	cmp	r3, #48	; 0x30
 800a4a8:	d0f8      	beq.n	800a49c <_dtoa_r+0x61c>
 800a4aa:	46bb      	mov	fp, r7
 800a4ac:	e04a      	b.n	800a544 <_dtoa_r+0x6c4>
 800a4ae:	4b06      	ldr	r3, [pc, #24]	; (800a4c8 <_dtoa_r+0x648>)
 800a4b0:	f7f6 f8c2 	bl	8000638 <__aeabi_dmul>
 800a4b4:	4680      	mov	r8, r0
 800a4b6:	4689      	mov	r9, r1
 800a4b8:	e7bd      	b.n	800a436 <_dtoa_r+0x5b6>
 800a4ba:	bf00      	nop
 800a4bc:	0800c9d0 	.word	0x0800c9d0
 800a4c0:	0800c9a8 	.word	0x0800c9a8
 800a4c4:	3ff00000 	.word	0x3ff00000
 800a4c8:	40240000 	.word	0x40240000
 800a4cc:	401c0000 	.word	0x401c0000
 800a4d0:	40140000 	.word	0x40140000
 800a4d4:	3fe00000 	.word	0x3fe00000
 800a4d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4dc:	9d00      	ldr	r5, [sp, #0]
 800a4de:	4642      	mov	r2, r8
 800a4e0:	464b      	mov	r3, r9
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	4639      	mov	r1, r7
 800a4e6:	f7f6 f9d1 	bl	800088c <__aeabi_ddiv>
 800a4ea:	f7f6 fb55 	bl	8000b98 <__aeabi_d2iz>
 800a4ee:	9001      	str	r0, [sp, #4]
 800a4f0:	f7f6 f838 	bl	8000564 <__aeabi_i2d>
 800a4f4:	4642      	mov	r2, r8
 800a4f6:	464b      	mov	r3, r9
 800a4f8:	f7f6 f89e 	bl	8000638 <__aeabi_dmul>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	460b      	mov	r3, r1
 800a500:	4630      	mov	r0, r6
 800a502:	4639      	mov	r1, r7
 800a504:	f7f5 fee0 	bl	80002c8 <__aeabi_dsub>
 800a508:	9e01      	ldr	r6, [sp, #4]
 800a50a:	9f04      	ldr	r7, [sp, #16]
 800a50c:	3630      	adds	r6, #48	; 0x30
 800a50e:	f805 6b01 	strb.w	r6, [r5], #1
 800a512:	9e00      	ldr	r6, [sp, #0]
 800a514:	1bae      	subs	r6, r5, r6
 800a516:	42b7      	cmp	r7, r6
 800a518:	4602      	mov	r2, r0
 800a51a:	460b      	mov	r3, r1
 800a51c:	d134      	bne.n	800a588 <_dtoa_r+0x708>
 800a51e:	f7f5 fed5 	bl	80002cc <__adddf3>
 800a522:	4642      	mov	r2, r8
 800a524:	464b      	mov	r3, r9
 800a526:	4606      	mov	r6, r0
 800a528:	460f      	mov	r7, r1
 800a52a:	f7f6 fb15 	bl	8000b58 <__aeabi_dcmpgt>
 800a52e:	b9c8      	cbnz	r0, 800a564 <_dtoa_r+0x6e4>
 800a530:	4642      	mov	r2, r8
 800a532:	464b      	mov	r3, r9
 800a534:	4630      	mov	r0, r6
 800a536:	4639      	mov	r1, r7
 800a538:	f7f6 fae6 	bl	8000b08 <__aeabi_dcmpeq>
 800a53c:	b110      	cbz	r0, 800a544 <_dtoa_r+0x6c4>
 800a53e:	9b01      	ldr	r3, [sp, #4]
 800a540:	07db      	lsls	r3, r3, #31
 800a542:	d40f      	bmi.n	800a564 <_dtoa_r+0x6e4>
 800a544:	4651      	mov	r1, sl
 800a546:	4620      	mov	r0, r4
 800a548:	f000 ff36 	bl	800b3b8 <_Bfree>
 800a54c:	2300      	movs	r3, #0
 800a54e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a550:	702b      	strb	r3, [r5, #0]
 800a552:	f10b 0301 	add.w	r3, fp, #1
 800a556:	6013      	str	r3, [r2, #0]
 800a558:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	f43f ace2 	beq.w	8009f24 <_dtoa_r+0xa4>
 800a560:	601d      	str	r5, [r3, #0]
 800a562:	e4df      	b.n	8009f24 <_dtoa_r+0xa4>
 800a564:	465f      	mov	r7, fp
 800a566:	462b      	mov	r3, r5
 800a568:	461d      	mov	r5, r3
 800a56a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a56e:	2a39      	cmp	r2, #57	; 0x39
 800a570:	d106      	bne.n	800a580 <_dtoa_r+0x700>
 800a572:	9a00      	ldr	r2, [sp, #0]
 800a574:	429a      	cmp	r2, r3
 800a576:	d1f7      	bne.n	800a568 <_dtoa_r+0x6e8>
 800a578:	9900      	ldr	r1, [sp, #0]
 800a57a:	2230      	movs	r2, #48	; 0x30
 800a57c:	3701      	adds	r7, #1
 800a57e:	700a      	strb	r2, [r1, #0]
 800a580:	781a      	ldrb	r2, [r3, #0]
 800a582:	3201      	adds	r2, #1
 800a584:	701a      	strb	r2, [r3, #0]
 800a586:	e790      	b.n	800a4aa <_dtoa_r+0x62a>
 800a588:	4ba3      	ldr	r3, [pc, #652]	; (800a818 <_dtoa_r+0x998>)
 800a58a:	2200      	movs	r2, #0
 800a58c:	f7f6 f854 	bl	8000638 <__aeabi_dmul>
 800a590:	2200      	movs	r2, #0
 800a592:	2300      	movs	r3, #0
 800a594:	4606      	mov	r6, r0
 800a596:	460f      	mov	r7, r1
 800a598:	f7f6 fab6 	bl	8000b08 <__aeabi_dcmpeq>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	d09e      	beq.n	800a4de <_dtoa_r+0x65e>
 800a5a0:	e7d0      	b.n	800a544 <_dtoa_r+0x6c4>
 800a5a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5a4:	2a00      	cmp	r2, #0
 800a5a6:	f000 80ca 	beq.w	800a73e <_dtoa_r+0x8be>
 800a5aa:	9a07      	ldr	r2, [sp, #28]
 800a5ac:	2a01      	cmp	r2, #1
 800a5ae:	f300 80ad 	bgt.w	800a70c <_dtoa_r+0x88c>
 800a5b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5b4:	2a00      	cmp	r2, #0
 800a5b6:	f000 80a5 	beq.w	800a704 <_dtoa_r+0x884>
 800a5ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a5be:	9e08      	ldr	r6, [sp, #32]
 800a5c0:	9d05      	ldr	r5, [sp, #20]
 800a5c2:	9a05      	ldr	r2, [sp, #20]
 800a5c4:	441a      	add	r2, r3
 800a5c6:	9205      	str	r2, [sp, #20]
 800a5c8:	9a06      	ldr	r2, [sp, #24]
 800a5ca:	2101      	movs	r1, #1
 800a5cc:	441a      	add	r2, r3
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	9206      	str	r2, [sp, #24]
 800a5d2:	f000 fff1 	bl	800b5b8 <__i2b>
 800a5d6:	4607      	mov	r7, r0
 800a5d8:	b165      	cbz	r5, 800a5f4 <_dtoa_r+0x774>
 800a5da:	9b06      	ldr	r3, [sp, #24]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	dd09      	ble.n	800a5f4 <_dtoa_r+0x774>
 800a5e0:	42ab      	cmp	r3, r5
 800a5e2:	9a05      	ldr	r2, [sp, #20]
 800a5e4:	bfa8      	it	ge
 800a5e6:	462b      	movge	r3, r5
 800a5e8:	1ad2      	subs	r2, r2, r3
 800a5ea:	9205      	str	r2, [sp, #20]
 800a5ec:	9a06      	ldr	r2, [sp, #24]
 800a5ee:	1aed      	subs	r5, r5, r3
 800a5f0:	1ad3      	subs	r3, r2, r3
 800a5f2:	9306      	str	r3, [sp, #24]
 800a5f4:	9b08      	ldr	r3, [sp, #32]
 800a5f6:	b1f3      	cbz	r3, 800a636 <_dtoa_r+0x7b6>
 800a5f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f000 80a3 	beq.w	800a746 <_dtoa_r+0x8c6>
 800a600:	2e00      	cmp	r6, #0
 800a602:	dd10      	ble.n	800a626 <_dtoa_r+0x7a6>
 800a604:	4639      	mov	r1, r7
 800a606:	4632      	mov	r2, r6
 800a608:	4620      	mov	r0, r4
 800a60a:	f001 f895 	bl	800b738 <__pow5mult>
 800a60e:	4652      	mov	r2, sl
 800a610:	4601      	mov	r1, r0
 800a612:	4607      	mov	r7, r0
 800a614:	4620      	mov	r0, r4
 800a616:	f000 ffe5 	bl	800b5e4 <__multiply>
 800a61a:	4651      	mov	r1, sl
 800a61c:	4680      	mov	r8, r0
 800a61e:	4620      	mov	r0, r4
 800a620:	f000 feca 	bl	800b3b8 <_Bfree>
 800a624:	46c2      	mov	sl, r8
 800a626:	9b08      	ldr	r3, [sp, #32]
 800a628:	1b9a      	subs	r2, r3, r6
 800a62a:	d004      	beq.n	800a636 <_dtoa_r+0x7b6>
 800a62c:	4651      	mov	r1, sl
 800a62e:	4620      	mov	r0, r4
 800a630:	f001 f882 	bl	800b738 <__pow5mult>
 800a634:	4682      	mov	sl, r0
 800a636:	2101      	movs	r1, #1
 800a638:	4620      	mov	r0, r4
 800a63a:	f000 ffbd 	bl	800b5b8 <__i2b>
 800a63e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a640:	2b00      	cmp	r3, #0
 800a642:	4606      	mov	r6, r0
 800a644:	f340 8081 	ble.w	800a74a <_dtoa_r+0x8ca>
 800a648:	461a      	mov	r2, r3
 800a64a:	4601      	mov	r1, r0
 800a64c:	4620      	mov	r0, r4
 800a64e:	f001 f873 	bl	800b738 <__pow5mult>
 800a652:	9b07      	ldr	r3, [sp, #28]
 800a654:	2b01      	cmp	r3, #1
 800a656:	4606      	mov	r6, r0
 800a658:	dd7a      	ble.n	800a750 <_dtoa_r+0x8d0>
 800a65a:	f04f 0800 	mov.w	r8, #0
 800a65e:	6933      	ldr	r3, [r6, #16]
 800a660:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a664:	6918      	ldr	r0, [r3, #16]
 800a666:	f000 ff59 	bl	800b51c <__hi0bits>
 800a66a:	f1c0 0020 	rsb	r0, r0, #32
 800a66e:	9b06      	ldr	r3, [sp, #24]
 800a670:	4418      	add	r0, r3
 800a672:	f010 001f 	ands.w	r0, r0, #31
 800a676:	f000 8094 	beq.w	800a7a2 <_dtoa_r+0x922>
 800a67a:	f1c0 0320 	rsb	r3, r0, #32
 800a67e:	2b04      	cmp	r3, #4
 800a680:	f340 8085 	ble.w	800a78e <_dtoa_r+0x90e>
 800a684:	9b05      	ldr	r3, [sp, #20]
 800a686:	f1c0 001c 	rsb	r0, r0, #28
 800a68a:	4403      	add	r3, r0
 800a68c:	9305      	str	r3, [sp, #20]
 800a68e:	9b06      	ldr	r3, [sp, #24]
 800a690:	4403      	add	r3, r0
 800a692:	4405      	add	r5, r0
 800a694:	9306      	str	r3, [sp, #24]
 800a696:	9b05      	ldr	r3, [sp, #20]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	dd05      	ble.n	800a6a8 <_dtoa_r+0x828>
 800a69c:	4651      	mov	r1, sl
 800a69e:	461a      	mov	r2, r3
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f001 f8a3 	bl	800b7ec <__lshift>
 800a6a6:	4682      	mov	sl, r0
 800a6a8:	9b06      	ldr	r3, [sp, #24]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	dd05      	ble.n	800a6ba <_dtoa_r+0x83a>
 800a6ae:	4631      	mov	r1, r6
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f001 f89a 	bl	800b7ec <__lshift>
 800a6b8:	4606      	mov	r6, r0
 800a6ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d072      	beq.n	800a7a6 <_dtoa_r+0x926>
 800a6c0:	4631      	mov	r1, r6
 800a6c2:	4650      	mov	r0, sl
 800a6c4:	f001 f8fe 	bl	800b8c4 <__mcmp>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	da6c      	bge.n	800a7a6 <_dtoa_r+0x926>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	4651      	mov	r1, sl
 800a6d0:	220a      	movs	r2, #10
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f000 fe92 	bl	800b3fc <__multadd>
 800a6d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6da:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a6de:	4682      	mov	sl, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f000 81b0 	beq.w	800aa46 <_dtoa_r+0xbc6>
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	4639      	mov	r1, r7
 800a6ea:	220a      	movs	r2, #10
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f000 fe85 	bl	800b3fc <__multadd>
 800a6f2:	9b01      	ldr	r3, [sp, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	4607      	mov	r7, r0
 800a6f8:	f300 8096 	bgt.w	800a828 <_dtoa_r+0x9a8>
 800a6fc:	9b07      	ldr	r3, [sp, #28]
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	dc59      	bgt.n	800a7b6 <_dtoa_r+0x936>
 800a702:	e091      	b.n	800a828 <_dtoa_r+0x9a8>
 800a704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a706:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a70a:	e758      	b.n	800a5be <_dtoa_r+0x73e>
 800a70c:	9b04      	ldr	r3, [sp, #16]
 800a70e:	1e5e      	subs	r6, r3, #1
 800a710:	9b08      	ldr	r3, [sp, #32]
 800a712:	42b3      	cmp	r3, r6
 800a714:	bfbf      	itttt	lt
 800a716:	9b08      	ldrlt	r3, [sp, #32]
 800a718:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a71a:	9608      	strlt	r6, [sp, #32]
 800a71c:	1af3      	sublt	r3, r6, r3
 800a71e:	bfb4      	ite	lt
 800a720:	18d2      	addlt	r2, r2, r3
 800a722:	1b9e      	subge	r6, r3, r6
 800a724:	9b04      	ldr	r3, [sp, #16]
 800a726:	bfbc      	itt	lt
 800a728:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a72a:	2600      	movlt	r6, #0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	bfb7      	itett	lt
 800a730:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a734:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a738:	1a9d      	sublt	r5, r3, r2
 800a73a:	2300      	movlt	r3, #0
 800a73c:	e741      	b.n	800a5c2 <_dtoa_r+0x742>
 800a73e:	9e08      	ldr	r6, [sp, #32]
 800a740:	9d05      	ldr	r5, [sp, #20]
 800a742:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a744:	e748      	b.n	800a5d8 <_dtoa_r+0x758>
 800a746:	9a08      	ldr	r2, [sp, #32]
 800a748:	e770      	b.n	800a62c <_dtoa_r+0x7ac>
 800a74a:	9b07      	ldr	r3, [sp, #28]
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	dc19      	bgt.n	800a784 <_dtoa_r+0x904>
 800a750:	9b02      	ldr	r3, [sp, #8]
 800a752:	b9bb      	cbnz	r3, 800a784 <_dtoa_r+0x904>
 800a754:	9b03      	ldr	r3, [sp, #12]
 800a756:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a75a:	b99b      	cbnz	r3, 800a784 <_dtoa_r+0x904>
 800a75c:	9b03      	ldr	r3, [sp, #12]
 800a75e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a762:	0d1b      	lsrs	r3, r3, #20
 800a764:	051b      	lsls	r3, r3, #20
 800a766:	b183      	cbz	r3, 800a78a <_dtoa_r+0x90a>
 800a768:	9b05      	ldr	r3, [sp, #20]
 800a76a:	3301      	adds	r3, #1
 800a76c:	9305      	str	r3, [sp, #20]
 800a76e:	9b06      	ldr	r3, [sp, #24]
 800a770:	3301      	adds	r3, #1
 800a772:	9306      	str	r3, [sp, #24]
 800a774:	f04f 0801 	mov.w	r8, #1
 800a778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f47f af6f 	bne.w	800a65e <_dtoa_r+0x7de>
 800a780:	2001      	movs	r0, #1
 800a782:	e774      	b.n	800a66e <_dtoa_r+0x7ee>
 800a784:	f04f 0800 	mov.w	r8, #0
 800a788:	e7f6      	b.n	800a778 <_dtoa_r+0x8f8>
 800a78a:	4698      	mov	r8, r3
 800a78c:	e7f4      	b.n	800a778 <_dtoa_r+0x8f8>
 800a78e:	d082      	beq.n	800a696 <_dtoa_r+0x816>
 800a790:	9a05      	ldr	r2, [sp, #20]
 800a792:	331c      	adds	r3, #28
 800a794:	441a      	add	r2, r3
 800a796:	9205      	str	r2, [sp, #20]
 800a798:	9a06      	ldr	r2, [sp, #24]
 800a79a:	441a      	add	r2, r3
 800a79c:	441d      	add	r5, r3
 800a79e:	9206      	str	r2, [sp, #24]
 800a7a0:	e779      	b.n	800a696 <_dtoa_r+0x816>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	e7f4      	b.n	800a790 <_dtoa_r+0x910>
 800a7a6:	9b04      	ldr	r3, [sp, #16]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	dc37      	bgt.n	800a81c <_dtoa_r+0x99c>
 800a7ac:	9b07      	ldr	r3, [sp, #28]
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	dd34      	ble.n	800a81c <_dtoa_r+0x99c>
 800a7b2:	9b04      	ldr	r3, [sp, #16]
 800a7b4:	9301      	str	r3, [sp, #4]
 800a7b6:	9b01      	ldr	r3, [sp, #4]
 800a7b8:	b963      	cbnz	r3, 800a7d4 <_dtoa_r+0x954>
 800a7ba:	4631      	mov	r1, r6
 800a7bc:	2205      	movs	r2, #5
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f000 fe1c 	bl	800b3fc <__multadd>
 800a7c4:	4601      	mov	r1, r0
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	4650      	mov	r0, sl
 800a7ca:	f001 f87b 	bl	800b8c4 <__mcmp>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	f73f adbb 	bgt.w	800a34a <_dtoa_r+0x4ca>
 800a7d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7d6:	9d00      	ldr	r5, [sp, #0]
 800a7d8:	ea6f 0b03 	mvn.w	fp, r3
 800a7dc:	f04f 0800 	mov.w	r8, #0
 800a7e0:	4631      	mov	r1, r6
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f000 fde8 	bl	800b3b8 <_Bfree>
 800a7e8:	2f00      	cmp	r7, #0
 800a7ea:	f43f aeab 	beq.w	800a544 <_dtoa_r+0x6c4>
 800a7ee:	f1b8 0f00 	cmp.w	r8, #0
 800a7f2:	d005      	beq.n	800a800 <_dtoa_r+0x980>
 800a7f4:	45b8      	cmp	r8, r7
 800a7f6:	d003      	beq.n	800a800 <_dtoa_r+0x980>
 800a7f8:	4641      	mov	r1, r8
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f000 fddc 	bl	800b3b8 <_Bfree>
 800a800:	4639      	mov	r1, r7
 800a802:	4620      	mov	r0, r4
 800a804:	f000 fdd8 	bl	800b3b8 <_Bfree>
 800a808:	e69c      	b.n	800a544 <_dtoa_r+0x6c4>
 800a80a:	2600      	movs	r6, #0
 800a80c:	4637      	mov	r7, r6
 800a80e:	e7e1      	b.n	800a7d4 <_dtoa_r+0x954>
 800a810:	46bb      	mov	fp, r7
 800a812:	4637      	mov	r7, r6
 800a814:	e599      	b.n	800a34a <_dtoa_r+0x4ca>
 800a816:	bf00      	nop
 800a818:	40240000 	.word	0x40240000
 800a81c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a81e:	2b00      	cmp	r3, #0
 800a820:	f000 80c8 	beq.w	800a9b4 <_dtoa_r+0xb34>
 800a824:	9b04      	ldr	r3, [sp, #16]
 800a826:	9301      	str	r3, [sp, #4]
 800a828:	2d00      	cmp	r5, #0
 800a82a:	dd05      	ble.n	800a838 <_dtoa_r+0x9b8>
 800a82c:	4639      	mov	r1, r7
 800a82e:	462a      	mov	r2, r5
 800a830:	4620      	mov	r0, r4
 800a832:	f000 ffdb 	bl	800b7ec <__lshift>
 800a836:	4607      	mov	r7, r0
 800a838:	f1b8 0f00 	cmp.w	r8, #0
 800a83c:	d05b      	beq.n	800a8f6 <_dtoa_r+0xa76>
 800a83e:	6879      	ldr	r1, [r7, #4]
 800a840:	4620      	mov	r0, r4
 800a842:	f000 fd79 	bl	800b338 <_Balloc>
 800a846:	4605      	mov	r5, r0
 800a848:	b928      	cbnz	r0, 800a856 <_dtoa_r+0x9d6>
 800a84a:	4b83      	ldr	r3, [pc, #524]	; (800aa58 <_dtoa_r+0xbd8>)
 800a84c:	4602      	mov	r2, r0
 800a84e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a852:	f7ff bb2e 	b.w	8009eb2 <_dtoa_r+0x32>
 800a856:	693a      	ldr	r2, [r7, #16]
 800a858:	3202      	adds	r2, #2
 800a85a:	0092      	lsls	r2, r2, #2
 800a85c:	f107 010c 	add.w	r1, r7, #12
 800a860:	300c      	adds	r0, #12
 800a862:	f7ff fa6e 	bl	8009d42 <memcpy>
 800a866:	2201      	movs	r2, #1
 800a868:	4629      	mov	r1, r5
 800a86a:	4620      	mov	r0, r4
 800a86c:	f000 ffbe 	bl	800b7ec <__lshift>
 800a870:	9b00      	ldr	r3, [sp, #0]
 800a872:	3301      	adds	r3, #1
 800a874:	9304      	str	r3, [sp, #16]
 800a876:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a87a:	4413      	add	r3, r2
 800a87c:	9308      	str	r3, [sp, #32]
 800a87e:	9b02      	ldr	r3, [sp, #8]
 800a880:	f003 0301 	and.w	r3, r3, #1
 800a884:	46b8      	mov	r8, r7
 800a886:	9306      	str	r3, [sp, #24]
 800a888:	4607      	mov	r7, r0
 800a88a:	9b04      	ldr	r3, [sp, #16]
 800a88c:	4631      	mov	r1, r6
 800a88e:	3b01      	subs	r3, #1
 800a890:	4650      	mov	r0, sl
 800a892:	9301      	str	r3, [sp, #4]
 800a894:	f7ff fa6c 	bl	8009d70 <quorem>
 800a898:	4641      	mov	r1, r8
 800a89a:	9002      	str	r0, [sp, #8]
 800a89c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a8a0:	4650      	mov	r0, sl
 800a8a2:	f001 f80f 	bl	800b8c4 <__mcmp>
 800a8a6:	463a      	mov	r2, r7
 800a8a8:	9005      	str	r0, [sp, #20]
 800a8aa:	4631      	mov	r1, r6
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f001 f825 	bl	800b8fc <__mdiff>
 800a8b2:	68c2      	ldr	r2, [r0, #12]
 800a8b4:	4605      	mov	r5, r0
 800a8b6:	bb02      	cbnz	r2, 800a8fa <_dtoa_r+0xa7a>
 800a8b8:	4601      	mov	r1, r0
 800a8ba:	4650      	mov	r0, sl
 800a8bc:	f001 f802 	bl	800b8c4 <__mcmp>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	9209      	str	r2, [sp, #36]	; 0x24
 800a8c8:	f000 fd76 	bl	800b3b8 <_Bfree>
 800a8cc:	9b07      	ldr	r3, [sp, #28]
 800a8ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8d0:	9d04      	ldr	r5, [sp, #16]
 800a8d2:	ea43 0102 	orr.w	r1, r3, r2
 800a8d6:	9b06      	ldr	r3, [sp, #24]
 800a8d8:	4319      	orrs	r1, r3
 800a8da:	d110      	bne.n	800a8fe <_dtoa_r+0xa7e>
 800a8dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a8e0:	d029      	beq.n	800a936 <_dtoa_r+0xab6>
 800a8e2:	9b05      	ldr	r3, [sp, #20]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	dd02      	ble.n	800a8ee <_dtoa_r+0xa6e>
 800a8e8:	9b02      	ldr	r3, [sp, #8]
 800a8ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a8ee:	9b01      	ldr	r3, [sp, #4]
 800a8f0:	f883 9000 	strb.w	r9, [r3]
 800a8f4:	e774      	b.n	800a7e0 <_dtoa_r+0x960>
 800a8f6:	4638      	mov	r0, r7
 800a8f8:	e7ba      	b.n	800a870 <_dtoa_r+0x9f0>
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	e7e1      	b.n	800a8c2 <_dtoa_r+0xa42>
 800a8fe:	9b05      	ldr	r3, [sp, #20]
 800a900:	2b00      	cmp	r3, #0
 800a902:	db04      	blt.n	800a90e <_dtoa_r+0xa8e>
 800a904:	9907      	ldr	r1, [sp, #28]
 800a906:	430b      	orrs	r3, r1
 800a908:	9906      	ldr	r1, [sp, #24]
 800a90a:	430b      	orrs	r3, r1
 800a90c:	d120      	bne.n	800a950 <_dtoa_r+0xad0>
 800a90e:	2a00      	cmp	r2, #0
 800a910:	dded      	ble.n	800a8ee <_dtoa_r+0xa6e>
 800a912:	4651      	mov	r1, sl
 800a914:	2201      	movs	r2, #1
 800a916:	4620      	mov	r0, r4
 800a918:	f000 ff68 	bl	800b7ec <__lshift>
 800a91c:	4631      	mov	r1, r6
 800a91e:	4682      	mov	sl, r0
 800a920:	f000 ffd0 	bl	800b8c4 <__mcmp>
 800a924:	2800      	cmp	r0, #0
 800a926:	dc03      	bgt.n	800a930 <_dtoa_r+0xab0>
 800a928:	d1e1      	bne.n	800a8ee <_dtoa_r+0xa6e>
 800a92a:	f019 0f01 	tst.w	r9, #1
 800a92e:	d0de      	beq.n	800a8ee <_dtoa_r+0xa6e>
 800a930:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a934:	d1d8      	bne.n	800a8e8 <_dtoa_r+0xa68>
 800a936:	9a01      	ldr	r2, [sp, #4]
 800a938:	2339      	movs	r3, #57	; 0x39
 800a93a:	7013      	strb	r3, [r2, #0]
 800a93c:	462b      	mov	r3, r5
 800a93e:	461d      	mov	r5, r3
 800a940:	3b01      	subs	r3, #1
 800a942:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a946:	2a39      	cmp	r2, #57	; 0x39
 800a948:	d06c      	beq.n	800aa24 <_dtoa_r+0xba4>
 800a94a:	3201      	adds	r2, #1
 800a94c:	701a      	strb	r2, [r3, #0]
 800a94e:	e747      	b.n	800a7e0 <_dtoa_r+0x960>
 800a950:	2a00      	cmp	r2, #0
 800a952:	dd07      	ble.n	800a964 <_dtoa_r+0xae4>
 800a954:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a958:	d0ed      	beq.n	800a936 <_dtoa_r+0xab6>
 800a95a:	9a01      	ldr	r2, [sp, #4]
 800a95c:	f109 0301 	add.w	r3, r9, #1
 800a960:	7013      	strb	r3, [r2, #0]
 800a962:	e73d      	b.n	800a7e0 <_dtoa_r+0x960>
 800a964:	9b04      	ldr	r3, [sp, #16]
 800a966:	9a08      	ldr	r2, [sp, #32]
 800a968:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d043      	beq.n	800a9f8 <_dtoa_r+0xb78>
 800a970:	4651      	mov	r1, sl
 800a972:	2300      	movs	r3, #0
 800a974:	220a      	movs	r2, #10
 800a976:	4620      	mov	r0, r4
 800a978:	f000 fd40 	bl	800b3fc <__multadd>
 800a97c:	45b8      	cmp	r8, r7
 800a97e:	4682      	mov	sl, r0
 800a980:	f04f 0300 	mov.w	r3, #0
 800a984:	f04f 020a 	mov.w	r2, #10
 800a988:	4641      	mov	r1, r8
 800a98a:	4620      	mov	r0, r4
 800a98c:	d107      	bne.n	800a99e <_dtoa_r+0xb1e>
 800a98e:	f000 fd35 	bl	800b3fc <__multadd>
 800a992:	4680      	mov	r8, r0
 800a994:	4607      	mov	r7, r0
 800a996:	9b04      	ldr	r3, [sp, #16]
 800a998:	3301      	adds	r3, #1
 800a99a:	9304      	str	r3, [sp, #16]
 800a99c:	e775      	b.n	800a88a <_dtoa_r+0xa0a>
 800a99e:	f000 fd2d 	bl	800b3fc <__multadd>
 800a9a2:	4639      	mov	r1, r7
 800a9a4:	4680      	mov	r8, r0
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	220a      	movs	r2, #10
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f000 fd26 	bl	800b3fc <__multadd>
 800a9b0:	4607      	mov	r7, r0
 800a9b2:	e7f0      	b.n	800a996 <_dtoa_r+0xb16>
 800a9b4:	9b04      	ldr	r3, [sp, #16]
 800a9b6:	9301      	str	r3, [sp, #4]
 800a9b8:	9d00      	ldr	r5, [sp, #0]
 800a9ba:	4631      	mov	r1, r6
 800a9bc:	4650      	mov	r0, sl
 800a9be:	f7ff f9d7 	bl	8009d70 <quorem>
 800a9c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a9c6:	9b00      	ldr	r3, [sp, #0]
 800a9c8:	f805 9b01 	strb.w	r9, [r5], #1
 800a9cc:	1aea      	subs	r2, r5, r3
 800a9ce:	9b01      	ldr	r3, [sp, #4]
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	dd07      	ble.n	800a9e4 <_dtoa_r+0xb64>
 800a9d4:	4651      	mov	r1, sl
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	220a      	movs	r2, #10
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f000 fd0e 	bl	800b3fc <__multadd>
 800a9e0:	4682      	mov	sl, r0
 800a9e2:	e7ea      	b.n	800a9ba <_dtoa_r+0xb3a>
 800a9e4:	9b01      	ldr	r3, [sp, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	bfc8      	it	gt
 800a9ea:	461d      	movgt	r5, r3
 800a9ec:	9b00      	ldr	r3, [sp, #0]
 800a9ee:	bfd8      	it	le
 800a9f0:	2501      	movle	r5, #1
 800a9f2:	441d      	add	r5, r3
 800a9f4:	f04f 0800 	mov.w	r8, #0
 800a9f8:	4651      	mov	r1, sl
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	f000 fef5 	bl	800b7ec <__lshift>
 800aa02:	4631      	mov	r1, r6
 800aa04:	4682      	mov	sl, r0
 800aa06:	f000 ff5d 	bl	800b8c4 <__mcmp>
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	dc96      	bgt.n	800a93c <_dtoa_r+0xabc>
 800aa0e:	d102      	bne.n	800aa16 <_dtoa_r+0xb96>
 800aa10:	f019 0f01 	tst.w	r9, #1
 800aa14:	d192      	bne.n	800a93c <_dtoa_r+0xabc>
 800aa16:	462b      	mov	r3, r5
 800aa18:	461d      	mov	r5, r3
 800aa1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa1e:	2a30      	cmp	r2, #48	; 0x30
 800aa20:	d0fa      	beq.n	800aa18 <_dtoa_r+0xb98>
 800aa22:	e6dd      	b.n	800a7e0 <_dtoa_r+0x960>
 800aa24:	9a00      	ldr	r2, [sp, #0]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d189      	bne.n	800a93e <_dtoa_r+0xabe>
 800aa2a:	f10b 0b01 	add.w	fp, fp, #1
 800aa2e:	2331      	movs	r3, #49	; 0x31
 800aa30:	e796      	b.n	800a960 <_dtoa_r+0xae0>
 800aa32:	4b0a      	ldr	r3, [pc, #40]	; (800aa5c <_dtoa_r+0xbdc>)
 800aa34:	f7ff ba99 	b.w	8009f6a <_dtoa_r+0xea>
 800aa38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f47f aa6d 	bne.w	8009f1a <_dtoa_r+0x9a>
 800aa40:	4b07      	ldr	r3, [pc, #28]	; (800aa60 <_dtoa_r+0xbe0>)
 800aa42:	f7ff ba92 	b.w	8009f6a <_dtoa_r+0xea>
 800aa46:	9b01      	ldr	r3, [sp, #4]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	dcb5      	bgt.n	800a9b8 <_dtoa_r+0xb38>
 800aa4c:	9b07      	ldr	r3, [sp, #28]
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	f73f aeb1 	bgt.w	800a7b6 <_dtoa_r+0x936>
 800aa54:	e7b0      	b.n	800a9b8 <_dtoa_r+0xb38>
 800aa56:	bf00      	nop
 800aa58:	0800c8d8 	.word	0x0800c8d8
 800aa5c:	0800c830 	.word	0x0800c830
 800aa60:	0800c85c 	.word	0x0800c85c

0800aa64 <_free_r>:
 800aa64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa66:	2900      	cmp	r1, #0
 800aa68:	d044      	beq.n	800aaf4 <_free_r+0x90>
 800aa6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa6e:	9001      	str	r0, [sp, #4]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f1a1 0404 	sub.w	r4, r1, #4
 800aa76:	bfb8      	it	lt
 800aa78:	18e4      	addlt	r4, r4, r3
 800aa7a:	f000 fc51 	bl	800b320 <__malloc_lock>
 800aa7e:	4a1e      	ldr	r2, [pc, #120]	; (800aaf8 <_free_r+0x94>)
 800aa80:	9801      	ldr	r0, [sp, #4]
 800aa82:	6813      	ldr	r3, [r2, #0]
 800aa84:	b933      	cbnz	r3, 800aa94 <_free_r+0x30>
 800aa86:	6063      	str	r3, [r4, #4]
 800aa88:	6014      	str	r4, [r2, #0]
 800aa8a:	b003      	add	sp, #12
 800aa8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa90:	f000 bc4c 	b.w	800b32c <__malloc_unlock>
 800aa94:	42a3      	cmp	r3, r4
 800aa96:	d908      	bls.n	800aaaa <_free_r+0x46>
 800aa98:	6825      	ldr	r5, [r4, #0]
 800aa9a:	1961      	adds	r1, r4, r5
 800aa9c:	428b      	cmp	r3, r1
 800aa9e:	bf01      	itttt	eq
 800aaa0:	6819      	ldreq	r1, [r3, #0]
 800aaa2:	685b      	ldreq	r3, [r3, #4]
 800aaa4:	1949      	addeq	r1, r1, r5
 800aaa6:	6021      	streq	r1, [r4, #0]
 800aaa8:	e7ed      	b.n	800aa86 <_free_r+0x22>
 800aaaa:	461a      	mov	r2, r3
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	b10b      	cbz	r3, 800aab4 <_free_r+0x50>
 800aab0:	42a3      	cmp	r3, r4
 800aab2:	d9fa      	bls.n	800aaaa <_free_r+0x46>
 800aab4:	6811      	ldr	r1, [r2, #0]
 800aab6:	1855      	adds	r5, r2, r1
 800aab8:	42a5      	cmp	r5, r4
 800aaba:	d10b      	bne.n	800aad4 <_free_r+0x70>
 800aabc:	6824      	ldr	r4, [r4, #0]
 800aabe:	4421      	add	r1, r4
 800aac0:	1854      	adds	r4, r2, r1
 800aac2:	42a3      	cmp	r3, r4
 800aac4:	6011      	str	r1, [r2, #0]
 800aac6:	d1e0      	bne.n	800aa8a <_free_r+0x26>
 800aac8:	681c      	ldr	r4, [r3, #0]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	6053      	str	r3, [r2, #4]
 800aace:	440c      	add	r4, r1
 800aad0:	6014      	str	r4, [r2, #0]
 800aad2:	e7da      	b.n	800aa8a <_free_r+0x26>
 800aad4:	d902      	bls.n	800aadc <_free_r+0x78>
 800aad6:	230c      	movs	r3, #12
 800aad8:	6003      	str	r3, [r0, #0]
 800aada:	e7d6      	b.n	800aa8a <_free_r+0x26>
 800aadc:	6825      	ldr	r5, [r4, #0]
 800aade:	1961      	adds	r1, r4, r5
 800aae0:	428b      	cmp	r3, r1
 800aae2:	bf04      	itt	eq
 800aae4:	6819      	ldreq	r1, [r3, #0]
 800aae6:	685b      	ldreq	r3, [r3, #4]
 800aae8:	6063      	str	r3, [r4, #4]
 800aaea:	bf04      	itt	eq
 800aaec:	1949      	addeq	r1, r1, r5
 800aaee:	6021      	streq	r1, [r4, #0]
 800aaf0:	6054      	str	r4, [r2, #4]
 800aaf2:	e7ca      	b.n	800aa8a <_free_r+0x26>
 800aaf4:	b003      	add	sp, #12
 800aaf6:	bd30      	pop	{r4, r5, pc}
 800aaf8:	20000ad8 	.word	0x20000ad8

0800aafc <rshift>:
 800aafc:	6903      	ldr	r3, [r0, #16]
 800aafe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ab02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab06:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ab0a:	f100 0414 	add.w	r4, r0, #20
 800ab0e:	dd45      	ble.n	800ab9c <rshift+0xa0>
 800ab10:	f011 011f 	ands.w	r1, r1, #31
 800ab14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ab18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ab1c:	d10c      	bne.n	800ab38 <rshift+0x3c>
 800ab1e:	f100 0710 	add.w	r7, r0, #16
 800ab22:	4629      	mov	r1, r5
 800ab24:	42b1      	cmp	r1, r6
 800ab26:	d334      	bcc.n	800ab92 <rshift+0x96>
 800ab28:	1a9b      	subs	r3, r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	1eea      	subs	r2, r5, #3
 800ab2e:	4296      	cmp	r6, r2
 800ab30:	bf38      	it	cc
 800ab32:	2300      	movcc	r3, #0
 800ab34:	4423      	add	r3, r4
 800ab36:	e015      	b.n	800ab64 <rshift+0x68>
 800ab38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ab3c:	f1c1 0820 	rsb	r8, r1, #32
 800ab40:	40cf      	lsrs	r7, r1
 800ab42:	f105 0e04 	add.w	lr, r5, #4
 800ab46:	46a1      	mov	r9, r4
 800ab48:	4576      	cmp	r6, lr
 800ab4a:	46f4      	mov	ip, lr
 800ab4c:	d815      	bhi.n	800ab7a <rshift+0x7e>
 800ab4e:	1a9a      	subs	r2, r3, r2
 800ab50:	0092      	lsls	r2, r2, #2
 800ab52:	3a04      	subs	r2, #4
 800ab54:	3501      	adds	r5, #1
 800ab56:	42ae      	cmp	r6, r5
 800ab58:	bf38      	it	cc
 800ab5a:	2200      	movcc	r2, #0
 800ab5c:	18a3      	adds	r3, r4, r2
 800ab5e:	50a7      	str	r7, [r4, r2]
 800ab60:	b107      	cbz	r7, 800ab64 <rshift+0x68>
 800ab62:	3304      	adds	r3, #4
 800ab64:	1b1a      	subs	r2, r3, r4
 800ab66:	42a3      	cmp	r3, r4
 800ab68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ab6c:	bf08      	it	eq
 800ab6e:	2300      	moveq	r3, #0
 800ab70:	6102      	str	r2, [r0, #16]
 800ab72:	bf08      	it	eq
 800ab74:	6143      	streq	r3, [r0, #20]
 800ab76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab7a:	f8dc c000 	ldr.w	ip, [ip]
 800ab7e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ab82:	ea4c 0707 	orr.w	r7, ip, r7
 800ab86:	f849 7b04 	str.w	r7, [r9], #4
 800ab8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab8e:	40cf      	lsrs	r7, r1
 800ab90:	e7da      	b.n	800ab48 <rshift+0x4c>
 800ab92:	f851 cb04 	ldr.w	ip, [r1], #4
 800ab96:	f847 cf04 	str.w	ip, [r7, #4]!
 800ab9a:	e7c3      	b.n	800ab24 <rshift+0x28>
 800ab9c:	4623      	mov	r3, r4
 800ab9e:	e7e1      	b.n	800ab64 <rshift+0x68>

0800aba0 <__hexdig_fun>:
 800aba0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aba4:	2b09      	cmp	r3, #9
 800aba6:	d802      	bhi.n	800abae <__hexdig_fun+0xe>
 800aba8:	3820      	subs	r0, #32
 800abaa:	b2c0      	uxtb	r0, r0
 800abac:	4770      	bx	lr
 800abae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800abb2:	2b05      	cmp	r3, #5
 800abb4:	d801      	bhi.n	800abba <__hexdig_fun+0x1a>
 800abb6:	3847      	subs	r0, #71	; 0x47
 800abb8:	e7f7      	b.n	800abaa <__hexdig_fun+0xa>
 800abba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800abbe:	2b05      	cmp	r3, #5
 800abc0:	d801      	bhi.n	800abc6 <__hexdig_fun+0x26>
 800abc2:	3827      	subs	r0, #39	; 0x27
 800abc4:	e7f1      	b.n	800abaa <__hexdig_fun+0xa>
 800abc6:	2000      	movs	r0, #0
 800abc8:	4770      	bx	lr
	...

0800abcc <__gethex>:
 800abcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd0:	4617      	mov	r7, r2
 800abd2:	680a      	ldr	r2, [r1, #0]
 800abd4:	b085      	sub	sp, #20
 800abd6:	f102 0b02 	add.w	fp, r2, #2
 800abda:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800abde:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800abe2:	4681      	mov	r9, r0
 800abe4:	468a      	mov	sl, r1
 800abe6:	9302      	str	r3, [sp, #8]
 800abe8:	32fe      	adds	r2, #254	; 0xfe
 800abea:	eb02 030b 	add.w	r3, r2, fp
 800abee:	46d8      	mov	r8, fp
 800abf0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800abf4:	9301      	str	r3, [sp, #4]
 800abf6:	2830      	cmp	r0, #48	; 0x30
 800abf8:	d0f7      	beq.n	800abea <__gethex+0x1e>
 800abfa:	f7ff ffd1 	bl	800aba0 <__hexdig_fun>
 800abfe:	4604      	mov	r4, r0
 800ac00:	2800      	cmp	r0, #0
 800ac02:	d138      	bne.n	800ac76 <__gethex+0xaa>
 800ac04:	49a7      	ldr	r1, [pc, #668]	; (800aea4 <__gethex+0x2d8>)
 800ac06:	2201      	movs	r2, #1
 800ac08:	4640      	mov	r0, r8
 800ac0a:	f7ff f810 	bl	8009c2e <strncmp>
 800ac0e:	4606      	mov	r6, r0
 800ac10:	2800      	cmp	r0, #0
 800ac12:	d169      	bne.n	800ace8 <__gethex+0x11c>
 800ac14:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ac18:	465d      	mov	r5, fp
 800ac1a:	f7ff ffc1 	bl	800aba0 <__hexdig_fun>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	d064      	beq.n	800acec <__gethex+0x120>
 800ac22:	465a      	mov	r2, fp
 800ac24:	7810      	ldrb	r0, [r2, #0]
 800ac26:	2830      	cmp	r0, #48	; 0x30
 800ac28:	4690      	mov	r8, r2
 800ac2a:	f102 0201 	add.w	r2, r2, #1
 800ac2e:	d0f9      	beq.n	800ac24 <__gethex+0x58>
 800ac30:	f7ff ffb6 	bl	800aba0 <__hexdig_fun>
 800ac34:	2301      	movs	r3, #1
 800ac36:	fab0 f480 	clz	r4, r0
 800ac3a:	0964      	lsrs	r4, r4, #5
 800ac3c:	465e      	mov	r6, fp
 800ac3e:	9301      	str	r3, [sp, #4]
 800ac40:	4642      	mov	r2, r8
 800ac42:	4615      	mov	r5, r2
 800ac44:	3201      	adds	r2, #1
 800ac46:	7828      	ldrb	r0, [r5, #0]
 800ac48:	f7ff ffaa 	bl	800aba0 <__hexdig_fun>
 800ac4c:	2800      	cmp	r0, #0
 800ac4e:	d1f8      	bne.n	800ac42 <__gethex+0x76>
 800ac50:	4994      	ldr	r1, [pc, #592]	; (800aea4 <__gethex+0x2d8>)
 800ac52:	2201      	movs	r2, #1
 800ac54:	4628      	mov	r0, r5
 800ac56:	f7fe ffea 	bl	8009c2e <strncmp>
 800ac5a:	b978      	cbnz	r0, 800ac7c <__gethex+0xb0>
 800ac5c:	b946      	cbnz	r6, 800ac70 <__gethex+0xa4>
 800ac5e:	1c6e      	adds	r6, r5, #1
 800ac60:	4632      	mov	r2, r6
 800ac62:	4615      	mov	r5, r2
 800ac64:	3201      	adds	r2, #1
 800ac66:	7828      	ldrb	r0, [r5, #0]
 800ac68:	f7ff ff9a 	bl	800aba0 <__hexdig_fun>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d1f8      	bne.n	800ac62 <__gethex+0x96>
 800ac70:	1b73      	subs	r3, r6, r5
 800ac72:	009e      	lsls	r6, r3, #2
 800ac74:	e004      	b.n	800ac80 <__gethex+0xb4>
 800ac76:	2400      	movs	r4, #0
 800ac78:	4626      	mov	r6, r4
 800ac7a:	e7e1      	b.n	800ac40 <__gethex+0x74>
 800ac7c:	2e00      	cmp	r6, #0
 800ac7e:	d1f7      	bne.n	800ac70 <__gethex+0xa4>
 800ac80:	782b      	ldrb	r3, [r5, #0]
 800ac82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac86:	2b50      	cmp	r3, #80	; 0x50
 800ac88:	d13d      	bne.n	800ad06 <__gethex+0x13a>
 800ac8a:	786b      	ldrb	r3, [r5, #1]
 800ac8c:	2b2b      	cmp	r3, #43	; 0x2b
 800ac8e:	d02f      	beq.n	800acf0 <__gethex+0x124>
 800ac90:	2b2d      	cmp	r3, #45	; 0x2d
 800ac92:	d031      	beq.n	800acf8 <__gethex+0x12c>
 800ac94:	1c69      	adds	r1, r5, #1
 800ac96:	f04f 0b00 	mov.w	fp, #0
 800ac9a:	7808      	ldrb	r0, [r1, #0]
 800ac9c:	f7ff ff80 	bl	800aba0 <__hexdig_fun>
 800aca0:	1e42      	subs	r2, r0, #1
 800aca2:	b2d2      	uxtb	r2, r2
 800aca4:	2a18      	cmp	r2, #24
 800aca6:	d82e      	bhi.n	800ad06 <__gethex+0x13a>
 800aca8:	f1a0 0210 	sub.w	r2, r0, #16
 800acac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800acb0:	f7ff ff76 	bl	800aba0 <__hexdig_fun>
 800acb4:	f100 3cff 	add.w	ip, r0, #4294967295
 800acb8:	fa5f fc8c 	uxtb.w	ip, ip
 800acbc:	f1bc 0f18 	cmp.w	ip, #24
 800acc0:	d91d      	bls.n	800acfe <__gethex+0x132>
 800acc2:	f1bb 0f00 	cmp.w	fp, #0
 800acc6:	d000      	beq.n	800acca <__gethex+0xfe>
 800acc8:	4252      	negs	r2, r2
 800acca:	4416      	add	r6, r2
 800accc:	f8ca 1000 	str.w	r1, [sl]
 800acd0:	b1dc      	cbz	r4, 800ad0a <__gethex+0x13e>
 800acd2:	9b01      	ldr	r3, [sp, #4]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	bf14      	ite	ne
 800acd8:	f04f 0800 	movne.w	r8, #0
 800acdc:	f04f 0806 	moveq.w	r8, #6
 800ace0:	4640      	mov	r0, r8
 800ace2:	b005      	add	sp, #20
 800ace4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace8:	4645      	mov	r5, r8
 800acea:	4626      	mov	r6, r4
 800acec:	2401      	movs	r4, #1
 800acee:	e7c7      	b.n	800ac80 <__gethex+0xb4>
 800acf0:	f04f 0b00 	mov.w	fp, #0
 800acf4:	1ca9      	adds	r1, r5, #2
 800acf6:	e7d0      	b.n	800ac9a <__gethex+0xce>
 800acf8:	f04f 0b01 	mov.w	fp, #1
 800acfc:	e7fa      	b.n	800acf4 <__gethex+0x128>
 800acfe:	230a      	movs	r3, #10
 800ad00:	fb03 0002 	mla	r0, r3, r2, r0
 800ad04:	e7d0      	b.n	800aca8 <__gethex+0xdc>
 800ad06:	4629      	mov	r1, r5
 800ad08:	e7e0      	b.n	800accc <__gethex+0x100>
 800ad0a:	eba5 0308 	sub.w	r3, r5, r8
 800ad0e:	3b01      	subs	r3, #1
 800ad10:	4621      	mov	r1, r4
 800ad12:	2b07      	cmp	r3, #7
 800ad14:	dc0a      	bgt.n	800ad2c <__gethex+0x160>
 800ad16:	4648      	mov	r0, r9
 800ad18:	f000 fb0e 	bl	800b338 <_Balloc>
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	b940      	cbnz	r0, 800ad32 <__gethex+0x166>
 800ad20:	4b61      	ldr	r3, [pc, #388]	; (800aea8 <__gethex+0x2dc>)
 800ad22:	4602      	mov	r2, r0
 800ad24:	21e4      	movs	r1, #228	; 0xe4
 800ad26:	4861      	ldr	r0, [pc, #388]	; (800aeac <__gethex+0x2e0>)
 800ad28:	f001 f9f0 	bl	800c10c <__assert_func>
 800ad2c:	3101      	adds	r1, #1
 800ad2e:	105b      	asrs	r3, r3, #1
 800ad30:	e7ef      	b.n	800ad12 <__gethex+0x146>
 800ad32:	f100 0a14 	add.w	sl, r0, #20
 800ad36:	2300      	movs	r3, #0
 800ad38:	495a      	ldr	r1, [pc, #360]	; (800aea4 <__gethex+0x2d8>)
 800ad3a:	f8cd a004 	str.w	sl, [sp, #4]
 800ad3e:	469b      	mov	fp, r3
 800ad40:	45a8      	cmp	r8, r5
 800ad42:	d342      	bcc.n	800adca <__gethex+0x1fe>
 800ad44:	9801      	ldr	r0, [sp, #4]
 800ad46:	f840 bb04 	str.w	fp, [r0], #4
 800ad4a:	eba0 000a 	sub.w	r0, r0, sl
 800ad4e:	1080      	asrs	r0, r0, #2
 800ad50:	6120      	str	r0, [r4, #16]
 800ad52:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ad56:	4658      	mov	r0, fp
 800ad58:	f000 fbe0 	bl	800b51c <__hi0bits>
 800ad5c:	683d      	ldr	r5, [r7, #0]
 800ad5e:	eba8 0000 	sub.w	r0, r8, r0
 800ad62:	42a8      	cmp	r0, r5
 800ad64:	dd59      	ble.n	800ae1a <__gethex+0x24e>
 800ad66:	eba0 0805 	sub.w	r8, r0, r5
 800ad6a:	4641      	mov	r1, r8
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f000 ff6f 	bl	800bc50 <__any_on>
 800ad72:	4683      	mov	fp, r0
 800ad74:	b1b8      	cbz	r0, 800ada6 <__gethex+0x1da>
 800ad76:	f108 33ff 	add.w	r3, r8, #4294967295
 800ad7a:	1159      	asrs	r1, r3, #5
 800ad7c:	f003 021f 	and.w	r2, r3, #31
 800ad80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ad84:	f04f 0b01 	mov.w	fp, #1
 800ad88:	fa0b f202 	lsl.w	r2, fp, r2
 800ad8c:	420a      	tst	r2, r1
 800ad8e:	d00a      	beq.n	800ada6 <__gethex+0x1da>
 800ad90:	455b      	cmp	r3, fp
 800ad92:	dd06      	ble.n	800ada2 <__gethex+0x1d6>
 800ad94:	f1a8 0102 	sub.w	r1, r8, #2
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f000 ff59 	bl	800bc50 <__any_on>
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	d138      	bne.n	800ae14 <__gethex+0x248>
 800ada2:	f04f 0b02 	mov.w	fp, #2
 800ada6:	4641      	mov	r1, r8
 800ada8:	4620      	mov	r0, r4
 800adaa:	f7ff fea7 	bl	800aafc <rshift>
 800adae:	4446      	add	r6, r8
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	42b3      	cmp	r3, r6
 800adb4:	da41      	bge.n	800ae3a <__gethex+0x26e>
 800adb6:	4621      	mov	r1, r4
 800adb8:	4648      	mov	r0, r9
 800adba:	f000 fafd 	bl	800b3b8 <_Bfree>
 800adbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adc0:	2300      	movs	r3, #0
 800adc2:	6013      	str	r3, [r2, #0]
 800adc4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800adc8:	e78a      	b.n	800ace0 <__gethex+0x114>
 800adca:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800adce:	2a2e      	cmp	r2, #46	; 0x2e
 800add0:	d014      	beq.n	800adfc <__gethex+0x230>
 800add2:	2b20      	cmp	r3, #32
 800add4:	d106      	bne.n	800ade4 <__gethex+0x218>
 800add6:	9b01      	ldr	r3, [sp, #4]
 800add8:	f843 bb04 	str.w	fp, [r3], #4
 800addc:	f04f 0b00 	mov.w	fp, #0
 800ade0:	9301      	str	r3, [sp, #4]
 800ade2:	465b      	mov	r3, fp
 800ade4:	7828      	ldrb	r0, [r5, #0]
 800ade6:	9303      	str	r3, [sp, #12]
 800ade8:	f7ff feda 	bl	800aba0 <__hexdig_fun>
 800adec:	9b03      	ldr	r3, [sp, #12]
 800adee:	f000 000f 	and.w	r0, r0, #15
 800adf2:	4098      	lsls	r0, r3
 800adf4:	ea4b 0b00 	orr.w	fp, fp, r0
 800adf8:	3304      	adds	r3, #4
 800adfa:	e7a1      	b.n	800ad40 <__gethex+0x174>
 800adfc:	45a8      	cmp	r8, r5
 800adfe:	d8e8      	bhi.n	800add2 <__gethex+0x206>
 800ae00:	2201      	movs	r2, #1
 800ae02:	4628      	mov	r0, r5
 800ae04:	9303      	str	r3, [sp, #12]
 800ae06:	f7fe ff12 	bl	8009c2e <strncmp>
 800ae0a:	4926      	ldr	r1, [pc, #152]	; (800aea4 <__gethex+0x2d8>)
 800ae0c:	9b03      	ldr	r3, [sp, #12]
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	d1df      	bne.n	800add2 <__gethex+0x206>
 800ae12:	e795      	b.n	800ad40 <__gethex+0x174>
 800ae14:	f04f 0b03 	mov.w	fp, #3
 800ae18:	e7c5      	b.n	800ada6 <__gethex+0x1da>
 800ae1a:	da0b      	bge.n	800ae34 <__gethex+0x268>
 800ae1c:	eba5 0800 	sub.w	r8, r5, r0
 800ae20:	4621      	mov	r1, r4
 800ae22:	4642      	mov	r2, r8
 800ae24:	4648      	mov	r0, r9
 800ae26:	f000 fce1 	bl	800b7ec <__lshift>
 800ae2a:	eba6 0608 	sub.w	r6, r6, r8
 800ae2e:	4604      	mov	r4, r0
 800ae30:	f100 0a14 	add.w	sl, r0, #20
 800ae34:	f04f 0b00 	mov.w	fp, #0
 800ae38:	e7ba      	b.n	800adb0 <__gethex+0x1e4>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	42b3      	cmp	r3, r6
 800ae3e:	dd73      	ble.n	800af28 <__gethex+0x35c>
 800ae40:	1b9e      	subs	r6, r3, r6
 800ae42:	42b5      	cmp	r5, r6
 800ae44:	dc34      	bgt.n	800aeb0 <__gethex+0x2e4>
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2b02      	cmp	r3, #2
 800ae4a:	d023      	beq.n	800ae94 <__gethex+0x2c8>
 800ae4c:	2b03      	cmp	r3, #3
 800ae4e:	d025      	beq.n	800ae9c <__gethex+0x2d0>
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d115      	bne.n	800ae80 <__gethex+0x2b4>
 800ae54:	42b5      	cmp	r5, r6
 800ae56:	d113      	bne.n	800ae80 <__gethex+0x2b4>
 800ae58:	2d01      	cmp	r5, #1
 800ae5a:	d10b      	bne.n	800ae74 <__gethex+0x2a8>
 800ae5c:	9a02      	ldr	r2, [sp, #8]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6013      	str	r3, [r2, #0]
 800ae62:	2301      	movs	r3, #1
 800ae64:	6123      	str	r3, [r4, #16]
 800ae66:	f8ca 3000 	str.w	r3, [sl]
 800ae6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae6c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ae70:	601c      	str	r4, [r3, #0]
 800ae72:	e735      	b.n	800ace0 <__gethex+0x114>
 800ae74:	1e69      	subs	r1, r5, #1
 800ae76:	4620      	mov	r0, r4
 800ae78:	f000 feea 	bl	800bc50 <__any_on>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	d1ed      	bne.n	800ae5c <__gethex+0x290>
 800ae80:	4621      	mov	r1, r4
 800ae82:	4648      	mov	r0, r9
 800ae84:	f000 fa98 	bl	800b3b8 <_Bfree>
 800ae88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	6013      	str	r3, [r2, #0]
 800ae8e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ae92:	e725      	b.n	800ace0 <__gethex+0x114>
 800ae94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1f2      	bne.n	800ae80 <__gethex+0x2b4>
 800ae9a:	e7df      	b.n	800ae5c <__gethex+0x290>
 800ae9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1dc      	bne.n	800ae5c <__gethex+0x290>
 800aea2:	e7ed      	b.n	800ae80 <__gethex+0x2b4>
 800aea4:	0800c7c8 	.word	0x0800c7c8
 800aea8:	0800c8d8 	.word	0x0800c8d8
 800aeac:	0800c8e9 	.word	0x0800c8e9
 800aeb0:	f106 38ff 	add.w	r8, r6, #4294967295
 800aeb4:	f1bb 0f00 	cmp.w	fp, #0
 800aeb8:	d133      	bne.n	800af22 <__gethex+0x356>
 800aeba:	f1b8 0f00 	cmp.w	r8, #0
 800aebe:	d004      	beq.n	800aeca <__gethex+0x2fe>
 800aec0:	4641      	mov	r1, r8
 800aec2:	4620      	mov	r0, r4
 800aec4:	f000 fec4 	bl	800bc50 <__any_on>
 800aec8:	4683      	mov	fp, r0
 800aeca:	ea4f 1268 	mov.w	r2, r8, asr #5
 800aece:	2301      	movs	r3, #1
 800aed0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800aed4:	f008 081f 	and.w	r8, r8, #31
 800aed8:	fa03 f308 	lsl.w	r3, r3, r8
 800aedc:	4213      	tst	r3, r2
 800aede:	4631      	mov	r1, r6
 800aee0:	4620      	mov	r0, r4
 800aee2:	bf18      	it	ne
 800aee4:	f04b 0b02 	orrne.w	fp, fp, #2
 800aee8:	1bad      	subs	r5, r5, r6
 800aeea:	f7ff fe07 	bl	800aafc <rshift>
 800aeee:	687e      	ldr	r6, [r7, #4]
 800aef0:	f04f 0802 	mov.w	r8, #2
 800aef4:	f1bb 0f00 	cmp.w	fp, #0
 800aef8:	d04a      	beq.n	800af90 <__gethex+0x3c4>
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d016      	beq.n	800af2e <__gethex+0x362>
 800af00:	2b03      	cmp	r3, #3
 800af02:	d018      	beq.n	800af36 <__gethex+0x36a>
 800af04:	2b01      	cmp	r3, #1
 800af06:	d109      	bne.n	800af1c <__gethex+0x350>
 800af08:	f01b 0f02 	tst.w	fp, #2
 800af0c:	d006      	beq.n	800af1c <__gethex+0x350>
 800af0e:	f8da 3000 	ldr.w	r3, [sl]
 800af12:	ea4b 0b03 	orr.w	fp, fp, r3
 800af16:	f01b 0f01 	tst.w	fp, #1
 800af1a:	d10f      	bne.n	800af3c <__gethex+0x370>
 800af1c:	f048 0810 	orr.w	r8, r8, #16
 800af20:	e036      	b.n	800af90 <__gethex+0x3c4>
 800af22:	f04f 0b01 	mov.w	fp, #1
 800af26:	e7d0      	b.n	800aeca <__gethex+0x2fe>
 800af28:	f04f 0801 	mov.w	r8, #1
 800af2c:	e7e2      	b.n	800aef4 <__gethex+0x328>
 800af2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af30:	f1c3 0301 	rsb	r3, r3, #1
 800af34:	930f      	str	r3, [sp, #60]	; 0x3c
 800af36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d0ef      	beq.n	800af1c <__gethex+0x350>
 800af3c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af40:	f104 0214 	add.w	r2, r4, #20
 800af44:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800af48:	9301      	str	r3, [sp, #4]
 800af4a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800af4e:	2300      	movs	r3, #0
 800af50:	4694      	mov	ip, r2
 800af52:	f852 1b04 	ldr.w	r1, [r2], #4
 800af56:	f1b1 3fff 	cmp.w	r1, #4294967295
 800af5a:	d01e      	beq.n	800af9a <__gethex+0x3ce>
 800af5c:	3101      	adds	r1, #1
 800af5e:	f8cc 1000 	str.w	r1, [ip]
 800af62:	f1b8 0f02 	cmp.w	r8, #2
 800af66:	f104 0214 	add.w	r2, r4, #20
 800af6a:	d13d      	bne.n	800afe8 <__gethex+0x41c>
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	3b01      	subs	r3, #1
 800af70:	42ab      	cmp	r3, r5
 800af72:	d10b      	bne.n	800af8c <__gethex+0x3c0>
 800af74:	1169      	asrs	r1, r5, #5
 800af76:	2301      	movs	r3, #1
 800af78:	f005 051f 	and.w	r5, r5, #31
 800af7c:	fa03 f505 	lsl.w	r5, r3, r5
 800af80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af84:	421d      	tst	r5, r3
 800af86:	bf18      	it	ne
 800af88:	f04f 0801 	movne.w	r8, #1
 800af8c:	f048 0820 	orr.w	r8, r8, #32
 800af90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af92:	601c      	str	r4, [r3, #0]
 800af94:	9b02      	ldr	r3, [sp, #8]
 800af96:	601e      	str	r6, [r3, #0]
 800af98:	e6a2      	b.n	800ace0 <__gethex+0x114>
 800af9a:	4290      	cmp	r0, r2
 800af9c:	f842 3c04 	str.w	r3, [r2, #-4]
 800afa0:	d8d6      	bhi.n	800af50 <__gethex+0x384>
 800afa2:	68a2      	ldr	r2, [r4, #8]
 800afa4:	4593      	cmp	fp, r2
 800afa6:	db17      	blt.n	800afd8 <__gethex+0x40c>
 800afa8:	6861      	ldr	r1, [r4, #4]
 800afaa:	4648      	mov	r0, r9
 800afac:	3101      	adds	r1, #1
 800afae:	f000 f9c3 	bl	800b338 <_Balloc>
 800afb2:	4682      	mov	sl, r0
 800afb4:	b918      	cbnz	r0, 800afbe <__gethex+0x3f2>
 800afb6:	4b1b      	ldr	r3, [pc, #108]	; (800b024 <__gethex+0x458>)
 800afb8:	4602      	mov	r2, r0
 800afba:	2184      	movs	r1, #132	; 0x84
 800afbc:	e6b3      	b.n	800ad26 <__gethex+0x15a>
 800afbe:	6922      	ldr	r2, [r4, #16]
 800afc0:	3202      	adds	r2, #2
 800afc2:	f104 010c 	add.w	r1, r4, #12
 800afc6:	0092      	lsls	r2, r2, #2
 800afc8:	300c      	adds	r0, #12
 800afca:	f7fe feba 	bl	8009d42 <memcpy>
 800afce:	4621      	mov	r1, r4
 800afd0:	4648      	mov	r0, r9
 800afd2:	f000 f9f1 	bl	800b3b8 <_Bfree>
 800afd6:	4654      	mov	r4, sl
 800afd8:	6922      	ldr	r2, [r4, #16]
 800afda:	1c51      	adds	r1, r2, #1
 800afdc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800afe0:	6121      	str	r1, [r4, #16]
 800afe2:	2101      	movs	r1, #1
 800afe4:	6151      	str	r1, [r2, #20]
 800afe6:	e7bc      	b.n	800af62 <__gethex+0x396>
 800afe8:	6921      	ldr	r1, [r4, #16]
 800afea:	4559      	cmp	r1, fp
 800afec:	dd0b      	ble.n	800b006 <__gethex+0x43a>
 800afee:	2101      	movs	r1, #1
 800aff0:	4620      	mov	r0, r4
 800aff2:	f7ff fd83 	bl	800aafc <rshift>
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	3601      	adds	r6, #1
 800affa:	42b3      	cmp	r3, r6
 800affc:	f6ff aedb 	blt.w	800adb6 <__gethex+0x1ea>
 800b000:	f04f 0801 	mov.w	r8, #1
 800b004:	e7c2      	b.n	800af8c <__gethex+0x3c0>
 800b006:	f015 051f 	ands.w	r5, r5, #31
 800b00a:	d0f9      	beq.n	800b000 <__gethex+0x434>
 800b00c:	9b01      	ldr	r3, [sp, #4]
 800b00e:	441a      	add	r2, r3
 800b010:	f1c5 0520 	rsb	r5, r5, #32
 800b014:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b018:	f000 fa80 	bl	800b51c <__hi0bits>
 800b01c:	42a8      	cmp	r0, r5
 800b01e:	dbe6      	blt.n	800afee <__gethex+0x422>
 800b020:	e7ee      	b.n	800b000 <__gethex+0x434>
 800b022:	bf00      	nop
 800b024:	0800c8d8 	.word	0x0800c8d8

0800b028 <L_shift>:
 800b028:	f1c2 0208 	rsb	r2, r2, #8
 800b02c:	0092      	lsls	r2, r2, #2
 800b02e:	b570      	push	{r4, r5, r6, lr}
 800b030:	f1c2 0620 	rsb	r6, r2, #32
 800b034:	6843      	ldr	r3, [r0, #4]
 800b036:	6804      	ldr	r4, [r0, #0]
 800b038:	fa03 f506 	lsl.w	r5, r3, r6
 800b03c:	432c      	orrs	r4, r5
 800b03e:	40d3      	lsrs	r3, r2
 800b040:	6004      	str	r4, [r0, #0]
 800b042:	f840 3f04 	str.w	r3, [r0, #4]!
 800b046:	4288      	cmp	r0, r1
 800b048:	d3f4      	bcc.n	800b034 <L_shift+0xc>
 800b04a:	bd70      	pop	{r4, r5, r6, pc}

0800b04c <__match>:
 800b04c:	b530      	push	{r4, r5, lr}
 800b04e:	6803      	ldr	r3, [r0, #0]
 800b050:	3301      	adds	r3, #1
 800b052:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b056:	b914      	cbnz	r4, 800b05e <__match+0x12>
 800b058:	6003      	str	r3, [r0, #0]
 800b05a:	2001      	movs	r0, #1
 800b05c:	bd30      	pop	{r4, r5, pc}
 800b05e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b062:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b066:	2d19      	cmp	r5, #25
 800b068:	bf98      	it	ls
 800b06a:	3220      	addls	r2, #32
 800b06c:	42a2      	cmp	r2, r4
 800b06e:	d0f0      	beq.n	800b052 <__match+0x6>
 800b070:	2000      	movs	r0, #0
 800b072:	e7f3      	b.n	800b05c <__match+0x10>

0800b074 <__hexnan>:
 800b074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b078:	680b      	ldr	r3, [r1, #0]
 800b07a:	6801      	ldr	r1, [r0, #0]
 800b07c:	115e      	asrs	r6, r3, #5
 800b07e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b082:	f013 031f 	ands.w	r3, r3, #31
 800b086:	b087      	sub	sp, #28
 800b088:	bf18      	it	ne
 800b08a:	3604      	addne	r6, #4
 800b08c:	2500      	movs	r5, #0
 800b08e:	1f37      	subs	r7, r6, #4
 800b090:	4682      	mov	sl, r0
 800b092:	4690      	mov	r8, r2
 800b094:	9301      	str	r3, [sp, #4]
 800b096:	f846 5c04 	str.w	r5, [r6, #-4]
 800b09a:	46b9      	mov	r9, r7
 800b09c:	463c      	mov	r4, r7
 800b09e:	9502      	str	r5, [sp, #8]
 800b0a0:	46ab      	mov	fp, r5
 800b0a2:	784a      	ldrb	r2, [r1, #1]
 800b0a4:	1c4b      	adds	r3, r1, #1
 800b0a6:	9303      	str	r3, [sp, #12]
 800b0a8:	b342      	cbz	r2, 800b0fc <__hexnan+0x88>
 800b0aa:	4610      	mov	r0, r2
 800b0ac:	9105      	str	r1, [sp, #20]
 800b0ae:	9204      	str	r2, [sp, #16]
 800b0b0:	f7ff fd76 	bl	800aba0 <__hexdig_fun>
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	d14f      	bne.n	800b158 <__hexnan+0xe4>
 800b0b8:	9a04      	ldr	r2, [sp, #16]
 800b0ba:	9905      	ldr	r1, [sp, #20]
 800b0bc:	2a20      	cmp	r2, #32
 800b0be:	d818      	bhi.n	800b0f2 <__hexnan+0x7e>
 800b0c0:	9b02      	ldr	r3, [sp, #8]
 800b0c2:	459b      	cmp	fp, r3
 800b0c4:	dd13      	ble.n	800b0ee <__hexnan+0x7a>
 800b0c6:	454c      	cmp	r4, r9
 800b0c8:	d206      	bcs.n	800b0d8 <__hexnan+0x64>
 800b0ca:	2d07      	cmp	r5, #7
 800b0cc:	dc04      	bgt.n	800b0d8 <__hexnan+0x64>
 800b0ce:	462a      	mov	r2, r5
 800b0d0:	4649      	mov	r1, r9
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f7ff ffa8 	bl	800b028 <L_shift>
 800b0d8:	4544      	cmp	r4, r8
 800b0da:	d950      	bls.n	800b17e <__hexnan+0x10a>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	f1a4 0904 	sub.w	r9, r4, #4
 800b0e2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0e6:	f8cd b008 	str.w	fp, [sp, #8]
 800b0ea:	464c      	mov	r4, r9
 800b0ec:	461d      	mov	r5, r3
 800b0ee:	9903      	ldr	r1, [sp, #12]
 800b0f0:	e7d7      	b.n	800b0a2 <__hexnan+0x2e>
 800b0f2:	2a29      	cmp	r2, #41	; 0x29
 800b0f4:	d155      	bne.n	800b1a2 <__hexnan+0x12e>
 800b0f6:	3102      	adds	r1, #2
 800b0f8:	f8ca 1000 	str.w	r1, [sl]
 800b0fc:	f1bb 0f00 	cmp.w	fp, #0
 800b100:	d04f      	beq.n	800b1a2 <__hexnan+0x12e>
 800b102:	454c      	cmp	r4, r9
 800b104:	d206      	bcs.n	800b114 <__hexnan+0xa0>
 800b106:	2d07      	cmp	r5, #7
 800b108:	dc04      	bgt.n	800b114 <__hexnan+0xa0>
 800b10a:	462a      	mov	r2, r5
 800b10c:	4649      	mov	r1, r9
 800b10e:	4620      	mov	r0, r4
 800b110:	f7ff ff8a 	bl	800b028 <L_shift>
 800b114:	4544      	cmp	r4, r8
 800b116:	d934      	bls.n	800b182 <__hexnan+0x10e>
 800b118:	f1a8 0204 	sub.w	r2, r8, #4
 800b11c:	4623      	mov	r3, r4
 800b11e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b122:	f842 1f04 	str.w	r1, [r2, #4]!
 800b126:	429f      	cmp	r7, r3
 800b128:	d2f9      	bcs.n	800b11e <__hexnan+0xaa>
 800b12a:	1b3b      	subs	r3, r7, r4
 800b12c:	f023 0303 	bic.w	r3, r3, #3
 800b130:	3304      	adds	r3, #4
 800b132:	3e03      	subs	r6, #3
 800b134:	3401      	adds	r4, #1
 800b136:	42a6      	cmp	r6, r4
 800b138:	bf38      	it	cc
 800b13a:	2304      	movcc	r3, #4
 800b13c:	4443      	add	r3, r8
 800b13e:	2200      	movs	r2, #0
 800b140:	f843 2b04 	str.w	r2, [r3], #4
 800b144:	429f      	cmp	r7, r3
 800b146:	d2fb      	bcs.n	800b140 <__hexnan+0xcc>
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	b91b      	cbnz	r3, 800b154 <__hexnan+0xe0>
 800b14c:	4547      	cmp	r7, r8
 800b14e:	d126      	bne.n	800b19e <__hexnan+0x12a>
 800b150:	2301      	movs	r3, #1
 800b152:	603b      	str	r3, [r7, #0]
 800b154:	2005      	movs	r0, #5
 800b156:	e025      	b.n	800b1a4 <__hexnan+0x130>
 800b158:	3501      	adds	r5, #1
 800b15a:	2d08      	cmp	r5, #8
 800b15c:	f10b 0b01 	add.w	fp, fp, #1
 800b160:	dd06      	ble.n	800b170 <__hexnan+0xfc>
 800b162:	4544      	cmp	r4, r8
 800b164:	d9c3      	bls.n	800b0ee <__hexnan+0x7a>
 800b166:	2300      	movs	r3, #0
 800b168:	f844 3c04 	str.w	r3, [r4, #-4]
 800b16c:	2501      	movs	r5, #1
 800b16e:	3c04      	subs	r4, #4
 800b170:	6822      	ldr	r2, [r4, #0]
 800b172:	f000 000f 	and.w	r0, r0, #15
 800b176:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b17a:	6020      	str	r0, [r4, #0]
 800b17c:	e7b7      	b.n	800b0ee <__hexnan+0x7a>
 800b17e:	2508      	movs	r5, #8
 800b180:	e7b5      	b.n	800b0ee <__hexnan+0x7a>
 800b182:	9b01      	ldr	r3, [sp, #4]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d0df      	beq.n	800b148 <__hexnan+0xd4>
 800b188:	f1c3 0320 	rsb	r3, r3, #32
 800b18c:	f04f 32ff 	mov.w	r2, #4294967295
 800b190:	40da      	lsrs	r2, r3
 800b192:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b196:	4013      	ands	r3, r2
 800b198:	f846 3c04 	str.w	r3, [r6, #-4]
 800b19c:	e7d4      	b.n	800b148 <__hexnan+0xd4>
 800b19e:	3f04      	subs	r7, #4
 800b1a0:	e7d2      	b.n	800b148 <__hexnan+0xd4>
 800b1a2:	2004      	movs	r0, #4
 800b1a4:	b007      	add	sp, #28
 800b1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b1ac <malloc>:
 800b1ac:	4b02      	ldr	r3, [pc, #8]	; (800b1b8 <malloc+0xc>)
 800b1ae:	4601      	mov	r1, r0
 800b1b0:	6818      	ldr	r0, [r3, #0]
 800b1b2:	f000 b823 	b.w	800b1fc <_malloc_r>
 800b1b6:	bf00      	nop
 800b1b8:	200001e4 	.word	0x200001e4

0800b1bc <sbrk_aligned>:
 800b1bc:	b570      	push	{r4, r5, r6, lr}
 800b1be:	4e0e      	ldr	r6, [pc, #56]	; (800b1f8 <sbrk_aligned+0x3c>)
 800b1c0:	460c      	mov	r4, r1
 800b1c2:	6831      	ldr	r1, [r6, #0]
 800b1c4:	4605      	mov	r5, r0
 800b1c6:	b911      	cbnz	r1, 800b1ce <sbrk_aligned+0x12>
 800b1c8:	f000 ff90 	bl	800c0ec <_sbrk_r>
 800b1cc:	6030      	str	r0, [r6, #0]
 800b1ce:	4621      	mov	r1, r4
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	f000 ff8b 	bl	800c0ec <_sbrk_r>
 800b1d6:	1c43      	adds	r3, r0, #1
 800b1d8:	d00a      	beq.n	800b1f0 <sbrk_aligned+0x34>
 800b1da:	1cc4      	adds	r4, r0, #3
 800b1dc:	f024 0403 	bic.w	r4, r4, #3
 800b1e0:	42a0      	cmp	r0, r4
 800b1e2:	d007      	beq.n	800b1f4 <sbrk_aligned+0x38>
 800b1e4:	1a21      	subs	r1, r4, r0
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	f000 ff80 	bl	800c0ec <_sbrk_r>
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	d101      	bne.n	800b1f4 <sbrk_aligned+0x38>
 800b1f0:	f04f 34ff 	mov.w	r4, #4294967295
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	bd70      	pop	{r4, r5, r6, pc}
 800b1f8:	20000adc 	.word	0x20000adc

0800b1fc <_malloc_r>:
 800b1fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b200:	1ccd      	adds	r5, r1, #3
 800b202:	f025 0503 	bic.w	r5, r5, #3
 800b206:	3508      	adds	r5, #8
 800b208:	2d0c      	cmp	r5, #12
 800b20a:	bf38      	it	cc
 800b20c:	250c      	movcc	r5, #12
 800b20e:	2d00      	cmp	r5, #0
 800b210:	4607      	mov	r7, r0
 800b212:	db01      	blt.n	800b218 <_malloc_r+0x1c>
 800b214:	42a9      	cmp	r1, r5
 800b216:	d905      	bls.n	800b224 <_malloc_r+0x28>
 800b218:	230c      	movs	r3, #12
 800b21a:	603b      	str	r3, [r7, #0]
 800b21c:	2600      	movs	r6, #0
 800b21e:	4630      	mov	r0, r6
 800b220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b224:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b2f8 <_malloc_r+0xfc>
 800b228:	f000 f87a 	bl	800b320 <__malloc_lock>
 800b22c:	f8d8 3000 	ldr.w	r3, [r8]
 800b230:	461c      	mov	r4, r3
 800b232:	bb5c      	cbnz	r4, 800b28c <_malloc_r+0x90>
 800b234:	4629      	mov	r1, r5
 800b236:	4638      	mov	r0, r7
 800b238:	f7ff ffc0 	bl	800b1bc <sbrk_aligned>
 800b23c:	1c43      	adds	r3, r0, #1
 800b23e:	4604      	mov	r4, r0
 800b240:	d155      	bne.n	800b2ee <_malloc_r+0xf2>
 800b242:	f8d8 4000 	ldr.w	r4, [r8]
 800b246:	4626      	mov	r6, r4
 800b248:	2e00      	cmp	r6, #0
 800b24a:	d145      	bne.n	800b2d8 <_malloc_r+0xdc>
 800b24c:	2c00      	cmp	r4, #0
 800b24e:	d048      	beq.n	800b2e2 <_malloc_r+0xe6>
 800b250:	6823      	ldr	r3, [r4, #0]
 800b252:	4631      	mov	r1, r6
 800b254:	4638      	mov	r0, r7
 800b256:	eb04 0903 	add.w	r9, r4, r3
 800b25a:	f000 ff47 	bl	800c0ec <_sbrk_r>
 800b25e:	4581      	cmp	r9, r0
 800b260:	d13f      	bne.n	800b2e2 <_malloc_r+0xe6>
 800b262:	6821      	ldr	r1, [r4, #0]
 800b264:	1a6d      	subs	r5, r5, r1
 800b266:	4629      	mov	r1, r5
 800b268:	4638      	mov	r0, r7
 800b26a:	f7ff ffa7 	bl	800b1bc <sbrk_aligned>
 800b26e:	3001      	adds	r0, #1
 800b270:	d037      	beq.n	800b2e2 <_malloc_r+0xe6>
 800b272:	6823      	ldr	r3, [r4, #0]
 800b274:	442b      	add	r3, r5
 800b276:	6023      	str	r3, [r4, #0]
 800b278:	f8d8 3000 	ldr.w	r3, [r8]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d038      	beq.n	800b2f2 <_malloc_r+0xf6>
 800b280:	685a      	ldr	r2, [r3, #4]
 800b282:	42a2      	cmp	r2, r4
 800b284:	d12b      	bne.n	800b2de <_malloc_r+0xe2>
 800b286:	2200      	movs	r2, #0
 800b288:	605a      	str	r2, [r3, #4]
 800b28a:	e00f      	b.n	800b2ac <_malloc_r+0xb0>
 800b28c:	6822      	ldr	r2, [r4, #0]
 800b28e:	1b52      	subs	r2, r2, r5
 800b290:	d41f      	bmi.n	800b2d2 <_malloc_r+0xd6>
 800b292:	2a0b      	cmp	r2, #11
 800b294:	d917      	bls.n	800b2c6 <_malloc_r+0xca>
 800b296:	1961      	adds	r1, r4, r5
 800b298:	42a3      	cmp	r3, r4
 800b29a:	6025      	str	r5, [r4, #0]
 800b29c:	bf18      	it	ne
 800b29e:	6059      	strne	r1, [r3, #4]
 800b2a0:	6863      	ldr	r3, [r4, #4]
 800b2a2:	bf08      	it	eq
 800b2a4:	f8c8 1000 	streq.w	r1, [r8]
 800b2a8:	5162      	str	r2, [r4, r5]
 800b2aa:	604b      	str	r3, [r1, #4]
 800b2ac:	4638      	mov	r0, r7
 800b2ae:	f104 060b 	add.w	r6, r4, #11
 800b2b2:	f000 f83b 	bl	800b32c <__malloc_unlock>
 800b2b6:	f026 0607 	bic.w	r6, r6, #7
 800b2ba:	1d23      	adds	r3, r4, #4
 800b2bc:	1af2      	subs	r2, r6, r3
 800b2be:	d0ae      	beq.n	800b21e <_malloc_r+0x22>
 800b2c0:	1b9b      	subs	r3, r3, r6
 800b2c2:	50a3      	str	r3, [r4, r2]
 800b2c4:	e7ab      	b.n	800b21e <_malloc_r+0x22>
 800b2c6:	42a3      	cmp	r3, r4
 800b2c8:	6862      	ldr	r2, [r4, #4]
 800b2ca:	d1dd      	bne.n	800b288 <_malloc_r+0x8c>
 800b2cc:	f8c8 2000 	str.w	r2, [r8]
 800b2d0:	e7ec      	b.n	800b2ac <_malloc_r+0xb0>
 800b2d2:	4623      	mov	r3, r4
 800b2d4:	6864      	ldr	r4, [r4, #4]
 800b2d6:	e7ac      	b.n	800b232 <_malloc_r+0x36>
 800b2d8:	4634      	mov	r4, r6
 800b2da:	6876      	ldr	r6, [r6, #4]
 800b2dc:	e7b4      	b.n	800b248 <_malloc_r+0x4c>
 800b2de:	4613      	mov	r3, r2
 800b2e0:	e7cc      	b.n	800b27c <_malloc_r+0x80>
 800b2e2:	230c      	movs	r3, #12
 800b2e4:	603b      	str	r3, [r7, #0]
 800b2e6:	4638      	mov	r0, r7
 800b2e8:	f000 f820 	bl	800b32c <__malloc_unlock>
 800b2ec:	e797      	b.n	800b21e <_malloc_r+0x22>
 800b2ee:	6025      	str	r5, [r4, #0]
 800b2f0:	e7dc      	b.n	800b2ac <_malloc_r+0xb0>
 800b2f2:	605b      	str	r3, [r3, #4]
 800b2f4:	deff      	udf	#255	; 0xff
 800b2f6:	bf00      	nop
 800b2f8:	20000ad8 	.word	0x20000ad8

0800b2fc <__ascii_mbtowc>:
 800b2fc:	b082      	sub	sp, #8
 800b2fe:	b901      	cbnz	r1, 800b302 <__ascii_mbtowc+0x6>
 800b300:	a901      	add	r1, sp, #4
 800b302:	b142      	cbz	r2, 800b316 <__ascii_mbtowc+0x1a>
 800b304:	b14b      	cbz	r3, 800b31a <__ascii_mbtowc+0x1e>
 800b306:	7813      	ldrb	r3, [r2, #0]
 800b308:	600b      	str	r3, [r1, #0]
 800b30a:	7812      	ldrb	r2, [r2, #0]
 800b30c:	1e10      	subs	r0, r2, #0
 800b30e:	bf18      	it	ne
 800b310:	2001      	movne	r0, #1
 800b312:	b002      	add	sp, #8
 800b314:	4770      	bx	lr
 800b316:	4610      	mov	r0, r2
 800b318:	e7fb      	b.n	800b312 <__ascii_mbtowc+0x16>
 800b31a:	f06f 0001 	mvn.w	r0, #1
 800b31e:	e7f8      	b.n	800b312 <__ascii_mbtowc+0x16>

0800b320 <__malloc_lock>:
 800b320:	4801      	ldr	r0, [pc, #4]	; (800b328 <__malloc_lock+0x8>)
 800b322:	f7fe bd0c 	b.w	8009d3e <__retarget_lock_acquire_recursive>
 800b326:	bf00      	nop
 800b328:	20000ad4 	.word	0x20000ad4

0800b32c <__malloc_unlock>:
 800b32c:	4801      	ldr	r0, [pc, #4]	; (800b334 <__malloc_unlock+0x8>)
 800b32e:	f7fe bd07 	b.w	8009d40 <__retarget_lock_release_recursive>
 800b332:	bf00      	nop
 800b334:	20000ad4 	.word	0x20000ad4

0800b338 <_Balloc>:
 800b338:	b570      	push	{r4, r5, r6, lr}
 800b33a:	69c6      	ldr	r6, [r0, #28]
 800b33c:	4604      	mov	r4, r0
 800b33e:	460d      	mov	r5, r1
 800b340:	b976      	cbnz	r6, 800b360 <_Balloc+0x28>
 800b342:	2010      	movs	r0, #16
 800b344:	f7ff ff32 	bl	800b1ac <malloc>
 800b348:	4602      	mov	r2, r0
 800b34a:	61e0      	str	r0, [r4, #28]
 800b34c:	b920      	cbnz	r0, 800b358 <_Balloc+0x20>
 800b34e:	4b18      	ldr	r3, [pc, #96]	; (800b3b0 <_Balloc+0x78>)
 800b350:	4818      	ldr	r0, [pc, #96]	; (800b3b4 <_Balloc+0x7c>)
 800b352:	216b      	movs	r1, #107	; 0x6b
 800b354:	f000 feda 	bl	800c10c <__assert_func>
 800b358:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b35c:	6006      	str	r6, [r0, #0]
 800b35e:	60c6      	str	r6, [r0, #12]
 800b360:	69e6      	ldr	r6, [r4, #28]
 800b362:	68f3      	ldr	r3, [r6, #12]
 800b364:	b183      	cbz	r3, 800b388 <_Balloc+0x50>
 800b366:	69e3      	ldr	r3, [r4, #28]
 800b368:	68db      	ldr	r3, [r3, #12]
 800b36a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b36e:	b9b8      	cbnz	r0, 800b3a0 <_Balloc+0x68>
 800b370:	2101      	movs	r1, #1
 800b372:	fa01 f605 	lsl.w	r6, r1, r5
 800b376:	1d72      	adds	r2, r6, #5
 800b378:	0092      	lsls	r2, r2, #2
 800b37a:	4620      	mov	r0, r4
 800b37c:	f000 fee4 	bl	800c148 <_calloc_r>
 800b380:	b160      	cbz	r0, 800b39c <_Balloc+0x64>
 800b382:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b386:	e00e      	b.n	800b3a6 <_Balloc+0x6e>
 800b388:	2221      	movs	r2, #33	; 0x21
 800b38a:	2104      	movs	r1, #4
 800b38c:	4620      	mov	r0, r4
 800b38e:	f000 fedb 	bl	800c148 <_calloc_r>
 800b392:	69e3      	ldr	r3, [r4, #28]
 800b394:	60f0      	str	r0, [r6, #12]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1e4      	bne.n	800b366 <_Balloc+0x2e>
 800b39c:	2000      	movs	r0, #0
 800b39e:	bd70      	pop	{r4, r5, r6, pc}
 800b3a0:	6802      	ldr	r2, [r0, #0]
 800b3a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b3ac:	e7f7      	b.n	800b39e <_Balloc+0x66>
 800b3ae:	bf00      	nop
 800b3b0:	0800c869 	.word	0x0800c869
 800b3b4:	0800c949 	.word	0x0800c949

0800b3b8 <_Bfree>:
 800b3b8:	b570      	push	{r4, r5, r6, lr}
 800b3ba:	69c6      	ldr	r6, [r0, #28]
 800b3bc:	4605      	mov	r5, r0
 800b3be:	460c      	mov	r4, r1
 800b3c0:	b976      	cbnz	r6, 800b3e0 <_Bfree+0x28>
 800b3c2:	2010      	movs	r0, #16
 800b3c4:	f7ff fef2 	bl	800b1ac <malloc>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	61e8      	str	r0, [r5, #28]
 800b3cc:	b920      	cbnz	r0, 800b3d8 <_Bfree+0x20>
 800b3ce:	4b09      	ldr	r3, [pc, #36]	; (800b3f4 <_Bfree+0x3c>)
 800b3d0:	4809      	ldr	r0, [pc, #36]	; (800b3f8 <_Bfree+0x40>)
 800b3d2:	218f      	movs	r1, #143	; 0x8f
 800b3d4:	f000 fe9a 	bl	800c10c <__assert_func>
 800b3d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3dc:	6006      	str	r6, [r0, #0]
 800b3de:	60c6      	str	r6, [r0, #12]
 800b3e0:	b13c      	cbz	r4, 800b3f2 <_Bfree+0x3a>
 800b3e2:	69eb      	ldr	r3, [r5, #28]
 800b3e4:	6862      	ldr	r2, [r4, #4]
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b3ec:	6021      	str	r1, [r4, #0]
 800b3ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b3f2:	bd70      	pop	{r4, r5, r6, pc}
 800b3f4:	0800c869 	.word	0x0800c869
 800b3f8:	0800c949 	.word	0x0800c949

0800b3fc <__multadd>:
 800b3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b400:	690d      	ldr	r5, [r1, #16]
 800b402:	4607      	mov	r7, r0
 800b404:	460c      	mov	r4, r1
 800b406:	461e      	mov	r6, r3
 800b408:	f101 0c14 	add.w	ip, r1, #20
 800b40c:	2000      	movs	r0, #0
 800b40e:	f8dc 3000 	ldr.w	r3, [ip]
 800b412:	b299      	uxth	r1, r3
 800b414:	fb02 6101 	mla	r1, r2, r1, r6
 800b418:	0c1e      	lsrs	r6, r3, #16
 800b41a:	0c0b      	lsrs	r3, r1, #16
 800b41c:	fb02 3306 	mla	r3, r2, r6, r3
 800b420:	b289      	uxth	r1, r1
 800b422:	3001      	adds	r0, #1
 800b424:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b428:	4285      	cmp	r5, r0
 800b42a:	f84c 1b04 	str.w	r1, [ip], #4
 800b42e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b432:	dcec      	bgt.n	800b40e <__multadd+0x12>
 800b434:	b30e      	cbz	r6, 800b47a <__multadd+0x7e>
 800b436:	68a3      	ldr	r3, [r4, #8]
 800b438:	42ab      	cmp	r3, r5
 800b43a:	dc19      	bgt.n	800b470 <__multadd+0x74>
 800b43c:	6861      	ldr	r1, [r4, #4]
 800b43e:	4638      	mov	r0, r7
 800b440:	3101      	adds	r1, #1
 800b442:	f7ff ff79 	bl	800b338 <_Balloc>
 800b446:	4680      	mov	r8, r0
 800b448:	b928      	cbnz	r0, 800b456 <__multadd+0x5a>
 800b44a:	4602      	mov	r2, r0
 800b44c:	4b0c      	ldr	r3, [pc, #48]	; (800b480 <__multadd+0x84>)
 800b44e:	480d      	ldr	r0, [pc, #52]	; (800b484 <__multadd+0x88>)
 800b450:	21ba      	movs	r1, #186	; 0xba
 800b452:	f000 fe5b 	bl	800c10c <__assert_func>
 800b456:	6922      	ldr	r2, [r4, #16]
 800b458:	3202      	adds	r2, #2
 800b45a:	f104 010c 	add.w	r1, r4, #12
 800b45e:	0092      	lsls	r2, r2, #2
 800b460:	300c      	adds	r0, #12
 800b462:	f7fe fc6e 	bl	8009d42 <memcpy>
 800b466:	4621      	mov	r1, r4
 800b468:	4638      	mov	r0, r7
 800b46a:	f7ff ffa5 	bl	800b3b8 <_Bfree>
 800b46e:	4644      	mov	r4, r8
 800b470:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b474:	3501      	adds	r5, #1
 800b476:	615e      	str	r6, [r3, #20]
 800b478:	6125      	str	r5, [r4, #16]
 800b47a:	4620      	mov	r0, r4
 800b47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b480:	0800c8d8 	.word	0x0800c8d8
 800b484:	0800c949 	.word	0x0800c949

0800b488 <__s2b>:
 800b488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b48c:	460c      	mov	r4, r1
 800b48e:	4615      	mov	r5, r2
 800b490:	461f      	mov	r7, r3
 800b492:	2209      	movs	r2, #9
 800b494:	3308      	adds	r3, #8
 800b496:	4606      	mov	r6, r0
 800b498:	fb93 f3f2 	sdiv	r3, r3, r2
 800b49c:	2100      	movs	r1, #0
 800b49e:	2201      	movs	r2, #1
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	db09      	blt.n	800b4b8 <__s2b+0x30>
 800b4a4:	4630      	mov	r0, r6
 800b4a6:	f7ff ff47 	bl	800b338 <_Balloc>
 800b4aa:	b940      	cbnz	r0, 800b4be <__s2b+0x36>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	4b19      	ldr	r3, [pc, #100]	; (800b514 <__s2b+0x8c>)
 800b4b0:	4819      	ldr	r0, [pc, #100]	; (800b518 <__s2b+0x90>)
 800b4b2:	21d3      	movs	r1, #211	; 0xd3
 800b4b4:	f000 fe2a 	bl	800c10c <__assert_func>
 800b4b8:	0052      	lsls	r2, r2, #1
 800b4ba:	3101      	adds	r1, #1
 800b4bc:	e7f0      	b.n	800b4a0 <__s2b+0x18>
 800b4be:	9b08      	ldr	r3, [sp, #32]
 800b4c0:	6143      	str	r3, [r0, #20]
 800b4c2:	2d09      	cmp	r5, #9
 800b4c4:	f04f 0301 	mov.w	r3, #1
 800b4c8:	6103      	str	r3, [r0, #16]
 800b4ca:	dd16      	ble.n	800b4fa <__s2b+0x72>
 800b4cc:	f104 0909 	add.w	r9, r4, #9
 800b4d0:	46c8      	mov	r8, r9
 800b4d2:	442c      	add	r4, r5
 800b4d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b4d8:	4601      	mov	r1, r0
 800b4da:	3b30      	subs	r3, #48	; 0x30
 800b4dc:	220a      	movs	r2, #10
 800b4de:	4630      	mov	r0, r6
 800b4e0:	f7ff ff8c 	bl	800b3fc <__multadd>
 800b4e4:	45a0      	cmp	r8, r4
 800b4e6:	d1f5      	bne.n	800b4d4 <__s2b+0x4c>
 800b4e8:	f1a5 0408 	sub.w	r4, r5, #8
 800b4ec:	444c      	add	r4, r9
 800b4ee:	1b2d      	subs	r5, r5, r4
 800b4f0:	1963      	adds	r3, r4, r5
 800b4f2:	42bb      	cmp	r3, r7
 800b4f4:	db04      	blt.n	800b500 <__s2b+0x78>
 800b4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4fa:	340a      	adds	r4, #10
 800b4fc:	2509      	movs	r5, #9
 800b4fe:	e7f6      	b.n	800b4ee <__s2b+0x66>
 800b500:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b504:	4601      	mov	r1, r0
 800b506:	3b30      	subs	r3, #48	; 0x30
 800b508:	220a      	movs	r2, #10
 800b50a:	4630      	mov	r0, r6
 800b50c:	f7ff ff76 	bl	800b3fc <__multadd>
 800b510:	e7ee      	b.n	800b4f0 <__s2b+0x68>
 800b512:	bf00      	nop
 800b514:	0800c8d8 	.word	0x0800c8d8
 800b518:	0800c949 	.word	0x0800c949

0800b51c <__hi0bits>:
 800b51c:	0c03      	lsrs	r3, r0, #16
 800b51e:	041b      	lsls	r3, r3, #16
 800b520:	b9d3      	cbnz	r3, 800b558 <__hi0bits+0x3c>
 800b522:	0400      	lsls	r0, r0, #16
 800b524:	2310      	movs	r3, #16
 800b526:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b52a:	bf04      	itt	eq
 800b52c:	0200      	lsleq	r0, r0, #8
 800b52e:	3308      	addeq	r3, #8
 800b530:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b534:	bf04      	itt	eq
 800b536:	0100      	lsleq	r0, r0, #4
 800b538:	3304      	addeq	r3, #4
 800b53a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b53e:	bf04      	itt	eq
 800b540:	0080      	lsleq	r0, r0, #2
 800b542:	3302      	addeq	r3, #2
 800b544:	2800      	cmp	r0, #0
 800b546:	db05      	blt.n	800b554 <__hi0bits+0x38>
 800b548:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b54c:	f103 0301 	add.w	r3, r3, #1
 800b550:	bf08      	it	eq
 800b552:	2320      	moveq	r3, #32
 800b554:	4618      	mov	r0, r3
 800b556:	4770      	bx	lr
 800b558:	2300      	movs	r3, #0
 800b55a:	e7e4      	b.n	800b526 <__hi0bits+0xa>

0800b55c <__lo0bits>:
 800b55c:	6803      	ldr	r3, [r0, #0]
 800b55e:	f013 0207 	ands.w	r2, r3, #7
 800b562:	d00c      	beq.n	800b57e <__lo0bits+0x22>
 800b564:	07d9      	lsls	r1, r3, #31
 800b566:	d422      	bmi.n	800b5ae <__lo0bits+0x52>
 800b568:	079a      	lsls	r2, r3, #30
 800b56a:	bf49      	itett	mi
 800b56c:	085b      	lsrmi	r3, r3, #1
 800b56e:	089b      	lsrpl	r3, r3, #2
 800b570:	6003      	strmi	r3, [r0, #0]
 800b572:	2201      	movmi	r2, #1
 800b574:	bf5c      	itt	pl
 800b576:	6003      	strpl	r3, [r0, #0]
 800b578:	2202      	movpl	r2, #2
 800b57a:	4610      	mov	r0, r2
 800b57c:	4770      	bx	lr
 800b57e:	b299      	uxth	r1, r3
 800b580:	b909      	cbnz	r1, 800b586 <__lo0bits+0x2a>
 800b582:	0c1b      	lsrs	r3, r3, #16
 800b584:	2210      	movs	r2, #16
 800b586:	b2d9      	uxtb	r1, r3
 800b588:	b909      	cbnz	r1, 800b58e <__lo0bits+0x32>
 800b58a:	3208      	adds	r2, #8
 800b58c:	0a1b      	lsrs	r3, r3, #8
 800b58e:	0719      	lsls	r1, r3, #28
 800b590:	bf04      	itt	eq
 800b592:	091b      	lsreq	r3, r3, #4
 800b594:	3204      	addeq	r2, #4
 800b596:	0799      	lsls	r1, r3, #30
 800b598:	bf04      	itt	eq
 800b59a:	089b      	lsreq	r3, r3, #2
 800b59c:	3202      	addeq	r2, #2
 800b59e:	07d9      	lsls	r1, r3, #31
 800b5a0:	d403      	bmi.n	800b5aa <__lo0bits+0x4e>
 800b5a2:	085b      	lsrs	r3, r3, #1
 800b5a4:	f102 0201 	add.w	r2, r2, #1
 800b5a8:	d003      	beq.n	800b5b2 <__lo0bits+0x56>
 800b5aa:	6003      	str	r3, [r0, #0]
 800b5ac:	e7e5      	b.n	800b57a <__lo0bits+0x1e>
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	e7e3      	b.n	800b57a <__lo0bits+0x1e>
 800b5b2:	2220      	movs	r2, #32
 800b5b4:	e7e1      	b.n	800b57a <__lo0bits+0x1e>
	...

0800b5b8 <__i2b>:
 800b5b8:	b510      	push	{r4, lr}
 800b5ba:	460c      	mov	r4, r1
 800b5bc:	2101      	movs	r1, #1
 800b5be:	f7ff febb 	bl	800b338 <_Balloc>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	b928      	cbnz	r0, 800b5d2 <__i2b+0x1a>
 800b5c6:	4b05      	ldr	r3, [pc, #20]	; (800b5dc <__i2b+0x24>)
 800b5c8:	4805      	ldr	r0, [pc, #20]	; (800b5e0 <__i2b+0x28>)
 800b5ca:	f240 1145 	movw	r1, #325	; 0x145
 800b5ce:	f000 fd9d 	bl	800c10c <__assert_func>
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	6144      	str	r4, [r0, #20]
 800b5d6:	6103      	str	r3, [r0, #16]
 800b5d8:	bd10      	pop	{r4, pc}
 800b5da:	bf00      	nop
 800b5dc:	0800c8d8 	.word	0x0800c8d8
 800b5e0:	0800c949 	.word	0x0800c949

0800b5e4 <__multiply>:
 800b5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e8:	4691      	mov	r9, r2
 800b5ea:	690a      	ldr	r2, [r1, #16]
 800b5ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	bfb8      	it	lt
 800b5f4:	460b      	movlt	r3, r1
 800b5f6:	460c      	mov	r4, r1
 800b5f8:	bfbc      	itt	lt
 800b5fa:	464c      	movlt	r4, r9
 800b5fc:	4699      	movlt	r9, r3
 800b5fe:	6927      	ldr	r7, [r4, #16]
 800b600:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b604:	68a3      	ldr	r3, [r4, #8]
 800b606:	6861      	ldr	r1, [r4, #4]
 800b608:	eb07 060a 	add.w	r6, r7, sl
 800b60c:	42b3      	cmp	r3, r6
 800b60e:	b085      	sub	sp, #20
 800b610:	bfb8      	it	lt
 800b612:	3101      	addlt	r1, #1
 800b614:	f7ff fe90 	bl	800b338 <_Balloc>
 800b618:	b930      	cbnz	r0, 800b628 <__multiply+0x44>
 800b61a:	4602      	mov	r2, r0
 800b61c:	4b44      	ldr	r3, [pc, #272]	; (800b730 <__multiply+0x14c>)
 800b61e:	4845      	ldr	r0, [pc, #276]	; (800b734 <__multiply+0x150>)
 800b620:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b624:	f000 fd72 	bl	800c10c <__assert_func>
 800b628:	f100 0514 	add.w	r5, r0, #20
 800b62c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b630:	462b      	mov	r3, r5
 800b632:	2200      	movs	r2, #0
 800b634:	4543      	cmp	r3, r8
 800b636:	d321      	bcc.n	800b67c <__multiply+0x98>
 800b638:	f104 0314 	add.w	r3, r4, #20
 800b63c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b640:	f109 0314 	add.w	r3, r9, #20
 800b644:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b648:	9202      	str	r2, [sp, #8]
 800b64a:	1b3a      	subs	r2, r7, r4
 800b64c:	3a15      	subs	r2, #21
 800b64e:	f022 0203 	bic.w	r2, r2, #3
 800b652:	3204      	adds	r2, #4
 800b654:	f104 0115 	add.w	r1, r4, #21
 800b658:	428f      	cmp	r7, r1
 800b65a:	bf38      	it	cc
 800b65c:	2204      	movcc	r2, #4
 800b65e:	9201      	str	r2, [sp, #4]
 800b660:	9a02      	ldr	r2, [sp, #8]
 800b662:	9303      	str	r3, [sp, #12]
 800b664:	429a      	cmp	r2, r3
 800b666:	d80c      	bhi.n	800b682 <__multiply+0x9e>
 800b668:	2e00      	cmp	r6, #0
 800b66a:	dd03      	ble.n	800b674 <__multiply+0x90>
 800b66c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b670:	2b00      	cmp	r3, #0
 800b672:	d05b      	beq.n	800b72c <__multiply+0x148>
 800b674:	6106      	str	r6, [r0, #16]
 800b676:	b005      	add	sp, #20
 800b678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b67c:	f843 2b04 	str.w	r2, [r3], #4
 800b680:	e7d8      	b.n	800b634 <__multiply+0x50>
 800b682:	f8b3 a000 	ldrh.w	sl, [r3]
 800b686:	f1ba 0f00 	cmp.w	sl, #0
 800b68a:	d024      	beq.n	800b6d6 <__multiply+0xf2>
 800b68c:	f104 0e14 	add.w	lr, r4, #20
 800b690:	46a9      	mov	r9, r5
 800b692:	f04f 0c00 	mov.w	ip, #0
 800b696:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b69a:	f8d9 1000 	ldr.w	r1, [r9]
 800b69e:	fa1f fb82 	uxth.w	fp, r2
 800b6a2:	b289      	uxth	r1, r1
 800b6a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b6a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b6ac:	f8d9 2000 	ldr.w	r2, [r9]
 800b6b0:	4461      	add	r1, ip
 800b6b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b6b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800b6ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b6be:	b289      	uxth	r1, r1
 800b6c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b6c4:	4577      	cmp	r7, lr
 800b6c6:	f849 1b04 	str.w	r1, [r9], #4
 800b6ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b6ce:	d8e2      	bhi.n	800b696 <__multiply+0xb2>
 800b6d0:	9a01      	ldr	r2, [sp, #4]
 800b6d2:	f845 c002 	str.w	ip, [r5, r2]
 800b6d6:	9a03      	ldr	r2, [sp, #12]
 800b6d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b6dc:	3304      	adds	r3, #4
 800b6de:	f1b9 0f00 	cmp.w	r9, #0
 800b6e2:	d021      	beq.n	800b728 <__multiply+0x144>
 800b6e4:	6829      	ldr	r1, [r5, #0]
 800b6e6:	f104 0c14 	add.w	ip, r4, #20
 800b6ea:	46ae      	mov	lr, r5
 800b6ec:	f04f 0a00 	mov.w	sl, #0
 800b6f0:	f8bc b000 	ldrh.w	fp, [ip]
 800b6f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b6f8:	fb09 220b 	mla	r2, r9, fp, r2
 800b6fc:	4452      	add	r2, sl
 800b6fe:	b289      	uxth	r1, r1
 800b700:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b704:	f84e 1b04 	str.w	r1, [lr], #4
 800b708:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b70c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b710:	f8be 1000 	ldrh.w	r1, [lr]
 800b714:	fb09 110a 	mla	r1, r9, sl, r1
 800b718:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b71c:	4567      	cmp	r7, ip
 800b71e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b722:	d8e5      	bhi.n	800b6f0 <__multiply+0x10c>
 800b724:	9a01      	ldr	r2, [sp, #4]
 800b726:	50a9      	str	r1, [r5, r2]
 800b728:	3504      	adds	r5, #4
 800b72a:	e799      	b.n	800b660 <__multiply+0x7c>
 800b72c:	3e01      	subs	r6, #1
 800b72e:	e79b      	b.n	800b668 <__multiply+0x84>
 800b730:	0800c8d8 	.word	0x0800c8d8
 800b734:	0800c949 	.word	0x0800c949

0800b738 <__pow5mult>:
 800b738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b73c:	4615      	mov	r5, r2
 800b73e:	f012 0203 	ands.w	r2, r2, #3
 800b742:	4606      	mov	r6, r0
 800b744:	460f      	mov	r7, r1
 800b746:	d007      	beq.n	800b758 <__pow5mult+0x20>
 800b748:	4c25      	ldr	r4, [pc, #148]	; (800b7e0 <__pow5mult+0xa8>)
 800b74a:	3a01      	subs	r2, #1
 800b74c:	2300      	movs	r3, #0
 800b74e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b752:	f7ff fe53 	bl	800b3fc <__multadd>
 800b756:	4607      	mov	r7, r0
 800b758:	10ad      	asrs	r5, r5, #2
 800b75a:	d03d      	beq.n	800b7d8 <__pow5mult+0xa0>
 800b75c:	69f4      	ldr	r4, [r6, #28]
 800b75e:	b97c      	cbnz	r4, 800b780 <__pow5mult+0x48>
 800b760:	2010      	movs	r0, #16
 800b762:	f7ff fd23 	bl	800b1ac <malloc>
 800b766:	4602      	mov	r2, r0
 800b768:	61f0      	str	r0, [r6, #28]
 800b76a:	b928      	cbnz	r0, 800b778 <__pow5mult+0x40>
 800b76c:	4b1d      	ldr	r3, [pc, #116]	; (800b7e4 <__pow5mult+0xac>)
 800b76e:	481e      	ldr	r0, [pc, #120]	; (800b7e8 <__pow5mult+0xb0>)
 800b770:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b774:	f000 fcca 	bl	800c10c <__assert_func>
 800b778:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b77c:	6004      	str	r4, [r0, #0]
 800b77e:	60c4      	str	r4, [r0, #12]
 800b780:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b784:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b788:	b94c      	cbnz	r4, 800b79e <__pow5mult+0x66>
 800b78a:	f240 2171 	movw	r1, #625	; 0x271
 800b78e:	4630      	mov	r0, r6
 800b790:	f7ff ff12 	bl	800b5b8 <__i2b>
 800b794:	2300      	movs	r3, #0
 800b796:	f8c8 0008 	str.w	r0, [r8, #8]
 800b79a:	4604      	mov	r4, r0
 800b79c:	6003      	str	r3, [r0, #0]
 800b79e:	f04f 0900 	mov.w	r9, #0
 800b7a2:	07eb      	lsls	r3, r5, #31
 800b7a4:	d50a      	bpl.n	800b7bc <__pow5mult+0x84>
 800b7a6:	4639      	mov	r1, r7
 800b7a8:	4622      	mov	r2, r4
 800b7aa:	4630      	mov	r0, r6
 800b7ac:	f7ff ff1a 	bl	800b5e4 <__multiply>
 800b7b0:	4639      	mov	r1, r7
 800b7b2:	4680      	mov	r8, r0
 800b7b4:	4630      	mov	r0, r6
 800b7b6:	f7ff fdff 	bl	800b3b8 <_Bfree>
 800b7ba:	4647      	mov	r7, r8
 800b7bc:	106d      	asrs	r5, r5, #1
 800b7be:	d00b      	beq.n	800b7d8 <__pow5mult+0xa0>
 800b7c0:	6820      	ldr	r0, [r4, #0]
 800b7c2:	b938      	cbnz	r0, 800b7d4 <__pow5mult+0x9c>
 800b7c4:	4622      	mov	r2, r4
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	f7ff ff0b 	bl	800b5e4 <__multiply>
 800b7ce:	6020      	str	r0, [r4, #0]
 800b7d0:	f8c0 9000 	str.w	r9, [r0]
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	e7e4      	b.n	800b7a2 <__pow5mult+0x6a>
 800b7d8:	4638      	mov	r0, r7
 800b7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7de:	bf00      	nop
 800b7e0:	0800ca98 	.word	0x0800ca98
 800b7e4:	0800c869 	.word	0x0800c869
 800b7e8:	0800c949 	.word	0x0800c949

0800b7ec <__lshift>:
 800b7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7f0:	460c      	mov	r4, r1
 800b7f2:	6849      	ldr	r1, [r1, #4]
 800b7f4:	6923      	ldr	r3, [r4, #16]
 800b7f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b7fa:	68a3      	ldr	r3, [r4, #8]
 800b7fc:	4607      	mov	r7, r0
 800b7fe:	4691      	mov	r9, r2
 800b800:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b804:	f108 0601 	add.w	r6, r8, #1
 800b808:	42b3      	cmp	r3, r6
 800b80a:	db0b      	blt.n	800b824 <__lshift+0x38>
 800b80c:	4638      	mov	r0, r7
 800b80e:	f7ff fd93 	bl	800b338 <_Balloc>
 800b812:	4605      	mov	r5, r0
 800b814:	b948      	cbnz	r0, 800b82a <__lshift+0x3e>
 800b816:	4602      	mov	r2, r0
 800b818:	4b28      	ldr	r3, [pc, #160]	; (800b8bc <__lshift+0xd0>)
 800b81a:	4829      	ldr	r0, [pc, #164]	; (800b8c0 <__lshift+0xd4>)
 800b81c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b820:	f000 fc74 	bl	800c10c <__assert_func>
 800b824:	3101      	adds	r1, #1
 800b826:	005b      	lsls	r3, r3, #1
 800b828:	e7ee      	b.n	800b808 <__lshift+0x1c>
 800b82a:	2300      	movs	r3, #0
 800b82c:	f100 0114 	add.w	r1, r0, #20
 800b830:	f100 0210 	add.w	r2, r0, #16
 800b834:	4618      	mov	r0, r3
 800b836:	4553      	cmp	r3, sl
 800b838:	db33      	blt.n	800b8a2 <__lshift+0xb6>
 800b83a:	6920      	ldr	r0, [r4, #16]
 800b83c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b840:	f104 0314 	add.w	r3, r4, #20
 800b844:	f019 091f 	ands.w	r9, r9, #31
 800b848:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b84c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b850:	d02b      	beq.n	800b8aa <__lshift+0xbe>
 800b852:	f1c9 0e20 	rsb	lr, r9, #32
 800b856:	468a      	mov	sl, r1
 800b858:	2200      	movs	r2, #0
 800b85a:	6818      	ldr	r0, [r3, #0]
 800b85c:	fa00 f009 	lsl.w	r0, r0, r9
 800b860:	4310      	orrs	r0, r2
 800b862:	f84a 0b04 	str.w	r0, [sl], #4
 800b866:	f853 2b04 	ldr.w	r2, [r3], #4
 800b86a:	459c      	cmp	ip, r3
 800b86c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b870:	d8f3      	bhi.n	800b85a <__lshift+0x6e>
 800b872:	ebac 0304 	sub.w	r3, ip, r4
 800b876:	3b15      	subs	r3, #21
 800b878:	f023 0303 	bic.w	r3, r3, #3
 800b87c:	3304      	adds	r3, #4
 800b87e:	f104 0015 	add.w	r0, r4, #21
 800b882:	4584      	cmp	ip, r0
 800b884:	bf38      	it	cc
 800b886:	2304      	movcc	r3, #4
 800b888:	50ca      	str	r2, [r1, r3]
 800b88a:	b10a      	cbz	r2, 800b890 <__lshift+0xa4>
 800b88c:	f108 0602 	add.w	r6, r8, #2
 800b890:	3e01      	subs	r6, #1
 800b892:	4638      	mov	r0, r7
 800b894:	612e      	str	r6, [r5, #16]
 800b896:	4621      	mov	r1, r4
 800b898:	f7ff fd8e 	bl	800b3b8 <_Bfree>
 800b89c:	4628      	mov	r0, r5
 800b89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	e7c5      	b.n	800b836 <__lshift+0x4a>
 800b8aa:	3904      	subs	r1, #4
 800b8ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b8b4:	459c      	cmp	ip, r3
 800b8b6:	d8f9      	bhi.n	800b8ac <__lshift+0xc0>
 800b8b8:	e7ea      	b.n	800b890 <__lshift+0xa4>
 800b8ba:	bf00      	nop
 800b8bc:	0800c8d8 	.word	0x0800c8d8
 800b8c0:	0800c949 	.word	0x0800c949

0800b8c4 <__mcmp>:
 800b8c4:	b530      	push	{r4, r5, lr}
 800b8c6:	6902      	ldr	r2, [r0, #16]
 800b8c8:	690c      	ldr	r4, [r1, #16]
 800b8ca:	1b12      	subs	r2, r2, r4
 800b8cc:	d10e      	bne.n	800b8ec <__mcmp+0x28>
 800b8ce:	f100 0314 	add.w	r3, r0, #20
 800b8d2:	3114      	adds	r1, #20
 800b8d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b8d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b8dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b8e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b8e4:	42a5      	cmp	r5, r4
 800b8e6:	d003      	beq.n	800b8f0 <__mcmp+0x2c>
 800b8e8:	d305      	bcc.n	800b8f6 <__mcmp+0x32>
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	4610      	mov	r0, r2
 800b8ee:	bd30      	pop	{r4, r5, pc}
 800b8f0:	4283      	cmp	r3, r0
 800b8f2:	d3f3      	bcc.n	800b8dc <__mcmp+0x18>
 800b8f4:	e7fa      	b.n	800b8ec <__mcmp+0x28>
 800b8f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8fa:	e7f7      	b.n	800b8ec <__mcmp+0x28>

0800b8fc <__mdiff>:
 800b8fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b900:	460c      	mov	r4, r1
 800b902:	4606      	mov	r6, r0
 800b904:	4611      	mov	r1, r2
 800b906:	4620      	mov	r0, r4
 800b908:	4690      	mov	r8, r2
 800b90a:	f7ff ffdb 	bl	800b8c4 <__mcmp>
 800b90e:	1e05      	subs	r5, r0, #0
 800b910:	d110      	bne.n	800b934 <__mdiff+0x38>
 800b912:	4629      	mov	r1, r5
 800b914:	4630      	mov	r0, r6
 800b916:	f7ff fd0f 	bl	800b338 <_Balloc>
 800b91a:	b930      	cbnz	r0, 800b92a <__mdiff+0x2e>
 800b91c:	4b3a      	ldr	r3, [pc, #232]	; (800ba08 <__mdiff+0x10c>)
 800b91e:	4602      	mov	r2, r0
 800b920:	f240 2137 	movw	r1, #567	; 0x237
 800b924:	4839      	ldr	r0, [pc, #228]	; (800ba0c <__mdiff+0x110>)
 800b926:	f000 fbf1 	bl	800c10c <__assert_func>
 800b92a:	2301      	movs	r3, #1
 800b92c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b930:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b934:	bfa4      	itt	ge
 800b936:	4643      	movge	r3, r8
 800b938:	46a0      	movge	r8, r4
 800b93a:	4630      	mov	r0, r6
 800b93c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b940:	bfa6      	itte	ge
 800b942:	461c      	movge	r4, r3
 800b944:	2500      	movge	r5, #0
 800b946:	2501      	movlt	r5, #1
 800b948:	f7ff fcf6 	bl	800b338 <_Balloc>
 800b94c:	b920      	cbnz	r0, 800b958 <__mdiff+0x5c>
 800b94e:	4b2e      	ldr	r3, [pc, #184]	; (800ba08 <__mdiff+0x10c>)
 800b950:	4602      	mov	r2, r0
 800b952:	f240 2145 	movw	r1, #581	; 0x245
 800b956:	e7e5      	b.n	800b924 <__mdiff+0x28>
 800b958:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b95c:	6926      	ldr	r6, [r4, #16]
 800b95e:	60c5      	str	r5, [r0, #12]
 800b960:	f104 0914 	add.w	r9, r4, #20
 800b964:	f108 0514 	add.w	r5, r8, #20
 800b968:	f100 0e14 	add.w	lr, r0, #20
 800b96c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b970:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b974:	f108 0210 	add.w	r2, r8, #16
 800b978:	46f2      	mov	sl, lr
 800b97a:	2100      	movs	r1, #0
 800b97c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b980:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b984:	fa11 f88b 	uxtah	r8, r1, fp
 800b988:	b299      	uxth	r1, r3
 800b98a:	0c1b      	lsrs	r3, r3, #16
 800b98c:	eba8 0801 	sub.w	r8, r8, r1
 800b990:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b994:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b998:	fa1f f888 	uxth.w	r8, r8
 800b99c:	1419      	asrs	r1, r3, #16
 800b99e:	454e      	cmp	r6, r9
 800b9a0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b9a4:	f84a 3b04 	str.w	r3, [sl], #4
 800b9a8:	d8e8      	bhi.n	800b97c <__mdiff+0x80>
 800b9aa:	1b33      	subs	r3, r6, r4
 800b9ac:	3b15      	subs	r3, #21
 800b9ae:	f023 0303 	bic.w	r3, r3, #3
 800b9b2:	3304      	adds	r3, #4
 800b9b4:	3415      	adds	r4, #21
 800b9b6:	42a6      	cmp	r6, r4
 800b9b8:	bf38      	it	cc
 800b9ba:	2304      	movcc	r3, #4
 800b9bc:	441d      	add	r5, r3
 800b9be:	4473      	add	r3, lr
 800b9c0:	469e      	mov	lr, r3
 800b9c2:	462e      	mov	r6, r5
 800b9c4:	4566      	cmp	r6, ip
 800b9c6:	d30e      	bcc.n	800b9e6 <__mdiff+0xea>
 800b9c8:	f10c 0203 	add.w	r2, ip, #3
 800b9cc:	1b52      	subs	r2, r2, r5
 800b9ce:	f022 0203 	bic.w	r2, r2, #3
 800b9d2:	3d03      	subs	r5, #3
 800b9d4:	45ac      	cmp	ip, r5
 800b9d6:	bf38      	it	cc
 800b9d8:	2200      	movcc	r2, #0
 800b9da:	4413      	add	r3, r2
 800b9dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b9e0:	b17a      	cbz	r2, 800ba02 <__mdiff+0x106>
 800b9e2:	6107      	str	r7, [r0, #16]
 800b9e4:	e7a4      	b.n	800b930 <__mdiff+0x34>
 800b9e6:	f856 8b04 	ldr.w	r8, [r6], #4
 800b9ea:	fa11 f288 	uxtah	r2, r1, r8
 800b9ee:	1414      	asrs	r4, r2, #16
 800b9f0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b9f4:	b292      	uxth	r2, r2
 800b9f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b9fa:	f84e 2b04 	str.w	r2, [lr], #4
 800b9fe:	1421      	asrs	r1, r4, #16
 800ba00:	e7e0      	b.n	800b9c4 <__mdiff+0xc8>
 800ba02:	3f01      	subs	r7, #1
 800ba04:	e7ea      	b.n	800b9dc <__mdiff+0xe0>
 800ba06:	bf00      	nop
 800ba08:	0800c8d8 	.word	0x0800c8d8
 800ba0c:	0800c949 	.word	0x0800c949

0800ba10 <__ulp>:
 800ba10:	b082      	sub	sp, #8
 800ba12:	ed8d 0b00 	vstr	d0, [sp]
 800ba16:	9a01      	ldr	r2, [sp, #4]
 800ba18:	4b0f      	ldr	r3, [pc, #60]	; (800ba58 <__ulp+0x48>)
 800ba1a:	4013      	ands	r3, r2
 800ba1c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	dc08      	bgt.n	800ba36 <__ulp+0x26>
 800ba24:	425b      	negs	r3, r3
 800ba26:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ba2a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ba2e:	da04      	bge.n	800ba3a <__ulp+0x2a>
 800ba30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ba34:	4113      	asrs	r3, r2
 800ba36:	2200      	movs	r2, #0
 800ba38:	e008      	b.n	800ba4c <__ulp+0x3c>
 800ba3a:	f1a2 0314 	sub.w	r3, r2, #20
 800ba3e:	2b1e      	cmp	r3, #30
 800ba40:	bfda      	itte	le
 800ba42:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ba46:	40da      	lsrle	r2, r3
 800ba48:	2201      	movgt	r2, #1
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	4610      	mov	r0, r2
 800ba50:	ec41 0b10 	vmov	d0, r0, r1
 800ba54:	b002      	add	sp, #8
 800ba56:	4770      	bx	lr
 800ba58:	7ff00000 	.word	0x7ff00000

0800ba5c <__b2d>:
 800ba5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba60:	6906      	ldr	r6, [r0, #16]
 800ba62:	f100 0814 	add.w	r8, r0, #20
 800ba66:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ba6a:	1f37      	subs	r7, r6, #4
 800ba6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ba70:	4610      	mov	r0, r2
 800ba72:	f7ff fd53 	bl	800b51c <__hi0bits>
 800ba76:	f1c0 0320 	rsb	r3, r0, #32
 800ba7a:	280a      	cmp	r0, #10
 800ba7c:	600b      	str	r3, [r1, #0]
 800ba7e:	491b      	ldr	r1, [pc, #108]	; (800baec <__b2d+0x90>)
 800ba80:	dc15      	bgt.n	800baae <__b2d+0x52>
 800ba82:	f1c0 0c0b 	rsb	ip, r0, #11
 800ba86:	fa22 f30c 	lsr.w	r3, r2, ip
 800ba8a:	45b8      	cmp	r8, r7
 800ba8c:	ea43 0501 	orr.w	r5, r3, r1
 800ba90:	bf34      	ite	cc
 800ba92:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ba96:	2300      	movcs	r3, #0
 800ba98:	3015      	adds	r0, #21
 800ba9a:	fa02 f000 	lsl.w	r0, r2, r0
 800ba9e:	fa23 f30c 	lsr.w	r3, r3, ip
 800baa2:	4303      	orrs	r3, r0
 800baa4:	461c      	mov	r4, r3
 800baa6:	ec45 4b10 	vmov	d0, r4, r5
 800baaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baae:	45b8      	cmp	r8, r7
 800bab0:	bf3a      	itte	cc
 800bab2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bab6:	f1a6 0708 	subcc.w	r7, r6, #8
 800baba:	2300      	movcs	r3, #0
 800babc:	380b      	subs	r0, #11
 800babe:	d012      	beq.n	800bae6 <__b2d+0x8a>
 800bac0:	f1c0 0120 	rsb	r1, r0, #32
 800bac4:	fa23 f401 	lsr.w	r4, r3, r1
 800bac8:	4082      	lsls	r2, r0
 800baca:	4322      	orrs	r2, r4
 800bacc:	4547      	cmp	r7, r8
 800bace:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bad2:	bf8c      	ite	hi
 800bad4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bad8:	2200      	movls	r2, #0
 800bada:	4083      	lsls	r3, r0
 800badc:	40ca      	lsrs	r2, r1
 800bade:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bae2:	4313      	orrs	r3, r2
 800bae4:	e7de      	b.n	800baa4 <__b2d+0x48>
 800bae6:	ea42 0501 	orr.w	r5, r2, r1
 800baea:	e7db      	b.n	800baa4 <__b2d+0x48>
 800baec:	3ff00000 	.word	0x3ff00000

0800baf0 <__d2b>:
 800baf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800baf4:	460f      	mov	r7, r1
 800baf6:	2101      	movs	r1, #1
 800baf8:	ec59 8b10 	vmov	r8, r9, d0
 800bafc:	4616      	mov	r6, r2
 800bafe:	f7ff fc1b 	bl	800b338 <_Balloc>
 800bb02:	4604      	mov	r4, r0
 800bb04:	b930      	cbnz	r0, 800bb14 <__d2b+0x24>
 800bb06:	4602      	mov	r2, r0
 800bb08:	4b24      	ldr	r3, [pc, #144]	; (800bb9c <__d2b+0xac>)
 800bb0a:	4825      	ldr	r0, [pc, #148]	; (800bba0 <__d2b+0xb0>)
 800bb0c:	f240 310f 	movw	r1, #783	; 0x30f
 800bb10:	f000 fafc 	bl	800c10c <__assert_func>
 800bb14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb1c:	bb2d      	cbnz	r5, 800bb6a <__d2b+0x7a>
 800bb1e:	9301      	str	r3, [sp, #4]
 800bb20:	f1b8 0300 	subs.w	r3, r8, #0
 800bb24:	d026      	beq.n	800bb74 <__d2b+0x84>
 800bb26:	4668      	mov	r0, sp
 800bb28:	9300      	str	r3, [sp, #0]
 800bb2a:	f7ff fd17 	bl	800b55c <__lo0bits>
 800bb2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bb32:	b1e8      	cbz	r0, 800bb70 <__d2b+0x80>
 800bb34:	f1c0 0320 	rsb	r3, r0, #32
 800bb38:	fa02 f303 	lsl.w	r3, r2, r3
 800bb3c:	430b      	orrs	r3, r1
 800bb3e:	40c2      	lsrs	r2, r0
 800bb40:	6163      	str	r3, [r4, #20]
 800bb42:	9201      	str	r2, [sp, #4]
 800bb44:	9b01      	ldr	r3, [sp, #4]
 800bb46:	61a3      	str	r3, [r4, #24]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	bf14      	ite	ne
 800bb4c:	2202      	movne	r2, #2
 800bb4e:	2201      	moveq	r2, #1
 800bb50:	6122      	str	r2, [r4, #16]
 800bb52:	b1bd      	cbz	r5, 800bb84 <__d2b+0x94>
 800bb54:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bb58:	4405      	add	r5, r0
 800bb5a:	603d      	str	r5, [r7, #0]
 800bb5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bb60:	6030      	str	r0, [r6, #0]
 800bb62:	4620      	mov	r0, r4
 800bb64:	b003      	add	sp, #12
 800bb66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb6e:	e7d6      	b.n	800bb1e <__d2b+0x2e>
 800bb70:	6161      	str	r1, [r4, #20]
 800bb72:	e7e7      	b.n	800bb44 <__d2b+0x54>
 800bb74:	a801      	add	r0, sp, #4
 800bb76:	f7ff fcf1 	bl	800b55c <__lo0bits>
 800bb7a:	9b01      	ldr	r3, [sp, #4]
 800bb7c:	6163      	str	r3, [r4, #20]
 800bb7e:	3020      	adds	r0, #32
 800bb80:	2201      	movs	r2, #1
 800bb82:	e7e5      	b.n	800bb50 <__d2b+0x60>
 800bb84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb8c:	6038      	str	r0, [r7, #0]
 800bb8e:	6918      	ldr	r0, [r3, #16]
 800bb90:	f7ff fcc4 	bl	800b51c <__hi0bits>
 800bb94:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb98:	e7e2      	b.n	800bb60 <__d2b+0x70>
 800bb9a:	bf00      	nop
 800bb9c:	0800c8d8 	.word	0x0800c8d8
 800bba0:	0800c949 	.word	0x0800c949

0800bba4 <__ratio>:
 800bba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba8:	4688      	mov	r8, r1
 800bbaa:	4669      	mov	r1, sp
 800bbac:	4681      	mov	r9, r0
 800bbae:	f7ff ff55 	bl	800ba5c <__b2d>
 800bbb2:	a901      	add	r1, sp, #4
 800bbb4:	4640      	mov	r0, r8
 800bbb6:	ec55 4b10 	vmov	r4, r5, d0
 800bbba:	f7ff ff4f 	bl	800ba5c <__b2d>
 800bbbe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bbc2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bbc6:	eba3 0c02 	sub.w	ip, r3, r2
 800bbca:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bbce:	1a9b      	subs	r3, r3, r2
 800bbd0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bbd4:	ec51 0b10 	vmov	r0, r1, d0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	bfd6      	itet	le
 800bbdc:	460a      	movle	r2, r1
 800bbde:	462a      	movgt	r2, r5
 800bbe0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bbe4:	468b      	mov	fp, r1
 800bbe6:	462f      	mov	r7, r5
 800bbe8:	bfd4      	ite	le
 800bbea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bbee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	ee10 2a10 	vmov	r2, s0
 800bbf8:	465b      	mov	r3, fp
 800bbfa:	4639      	mov	r1, r7
 800bbfc:	f7f4 fe46 	bl	800088c <__aeabi_ddiv>
 800bc00:	ec41 0b10 	vmov	d0, r0, r1
 800bc04:	b003      	add	sp, #12
 800bc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc0a <__copybits>:
 800bc0a:	3901      	subs	r1, #1
 800bc0c:	b570      	push	{r4, r5, r6, lr}
 800bc0e:	1149      	asrs	r1, r1, #5
 800bc10:	6914      	ldr	r4, [r2, #16]
 800bc12:	3101      	adds	r1, #1
 800bc14:	f102 0314 	add.w	r3, r2, #20
 800bc18:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc1c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bc20:	1f05      	subs	r5, r0, #4
 800bc22:	42a3      	cmp	r3, r4
 800bc24:	d30c      	bcc.n	800bc40 <__copybits+0x36>
 800bc26:	1aa3      	subs	r3, r4, r2
 800bc28:	3b11      	subs	r3, #17
 800bc2a:	f023 0303 	bic.w	r3, r3, #3
 800bc2e:	3211      	adds	r2, #17
 800bc30:	42a2      	cmp	r2, r4
 800bc32:	bf88      	it	hi
 800bc34:	2300      	movhi	r3, #0
 800bc36:	4418      	add	r0, r3
 800bc38:	2300      	movs	r3, #0
 800bc3a:	4288      	cmp	r0, r1
 800bc3c:	d305      	bcc.n	800bc4a <__copybits+0x40>
 800bc3e:	bd70      	pop	{r4, r5, r6, pc}
 800bc40:	f853 6b04 	ldr.w	r6, [r3], #4
 800bc44:	f845 6f04 	str.w	r6, [r5, #4]!
 800bc48:	e7eb      	b.n	800bc22 <__copybits+0x18>
 800bc4a:	f840 3b04 	str.w	r3, [r0], #4
 800bc4e:	e7f4      	b.n	800bc3a <__copybits+0x30>

0800bc50 <__any_on>:
 800bc50:	f100 0214 	add.w	r2, r0, #20
 800bc54:	6900      	ldr	r0, [r0, #16]
 800bc56:	114b      	asrs	r3, r1, #5
 800bc58:	4298      	cmp	r0, r3
 800bc5a:	b510      	push	{r4, lr}
 800bc5c:	db11      	blt.n	800bc82 <__any_on+0x32>
 800bc5e:	dd0a      	ble.n	800bc76 <__any_on+0x26>
 800bc60:	f011 011f 	ands.w	r1, r1, #31
 800bc64:	d007      	beq.n	800bc76 <__any_on+0x26>
 800bc66:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bc6a:	fa24 f001 	lsr.w	r0, r4, r1
 800bc6e:	fa00 f101 	lsl.w	r1, r0, r1
 800bc72:	428c      	cmp	r4, r1
 800bc74:	d10b      	bne.n	800bc8e <__any_on+0x3e>
 800bc76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d803      	bhi.n	800bc86 <__any_on+0x36>
 800bc7e:	2000      	movs	r0, #0
 800bc80:	bd10      	pop	{r4, pc}
 800bc82:	4603      	mov	r3, r0
 800bc84:	e7f7      	b.n	800bc76 <__any_on+0x26>
 800bc86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc8a:	2900      	cmp	r1, #0
 800bc8c:	d0f5      	beq.n	800bc7a <__any_on+0x2a>
 800bc8e:	2001      	movs	r0, #1
 800bc90:	e7f6      	b.n	800bc80 <__any_on+0x30>

0800bc92 <__ascii_wctomb>:
 800bc92:	b149      	cbz	r1, 800bca8 <__ascii_wctomb+0x16>
 800bc94:	2aff      	cmp	r2, #255	; 0xff
 800bc96:	bf85      	ittet	hi
 800bc98:	238a      	movhi	r3, #138	; 0x8a
 800bc9a:	6003      	strhi	r3, [r0, #0]
 800bc9c:	700a      	strbls	r2, [r1, #0]
 800bc9e:	f04f 30ff 	movhi.w	r0, #4294967295
 800bca2:	bf98      	it	ls
 800bca4:	2001      	movls	r0, #1
 800bca6:	4770      	bx	lr
 800bca8:	4608      	mov	r0, r1
 800bcaa:	4770      	bx	lr

0800bcac <__ssputs_r>:
 800bcac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcb0:	688e      	ldr	r6, [r1, #8]
 800bcb2:	461f      	mov	r7, r3
 800bcb4:	42be      	cmp	r6, r7
 800bcb6:	680b      	ldr	r3, [r1, #0]
 800bcb8:	4682      	mov	sl, r0
 800bcba:	460c      	mov	r4, r1
 800bcbc:	4690      	mov	r8, r2
 800bcbe:	d82c      	bhi.n	800bd1a <__ssputs_r+0x6e>
 800bcc0:	898a      	ldrh	r2, [r1, #12]
 800bcc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bcc6:	d026      	beq.n	800bd16 <__ssputs_r+0x6a>
 800bcc8:	6965      	ldr	r5, [r4, #20]
 800bcca:	6909      	ldr	r1, [r1, #16]
 800bccc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bcd0:	eba3 0901 	sub.w	r9, r3, r1
 800bcd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bcd8:	1c7b      	adds	r3, r7, #1
 800bcda:	444b      	add	r3, r9
 800bcdc:	106d      	asrs	r5, r5, #1
 800bcde:	429d      	cmp	r5, r3
 800bce0:	bf38      	it	cc
 800bce2:	461d      	movcc	r5, r3
 800bce4:	0553      	lsls	r3, r2, #21
 800bce6:	d527      	bpl.n	800bd38 <__ssputs_r+0x8c>
 800bce8:	4629      	mov	r1, r5
 800bcea:	f7ff fa87 	bl	800b1fc <_malloc_r>
 800bcee:	4606      	mov	r6, r0
 800bcf0:	b360      	cbz	r0, 800bd4c <__ssputs_r+0xa0>
 800bcf2:	6921      	ldr	r1, [r4, #16]
 800bcf4:	464a      	mov	r2, r9
 800bcf6:	f7fe f824 	bl	8009d42 <memcpy>
 800bcfa:	89a3      	ldrh	r3, [r4, #12]
 800bcfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd04:	81a3      	strh	r3, [r4, #12]
 800bd06:	6126      	str	r6, [r4, #16]
 800bd08:	6165      	str	r5, [r4, #20]
 800bd0a:	444e      	add	r6, r9
 800bd0c:	eba5 0509 	sub.w	r5, r5, r9
 800bd10:	6026      	str	r6, [r4, #0]
 800bd12:	60a5      	str	r5, [r4, #8]
 800bd14:	463e      	mov	r6, r7
 800bd16:	42be      	cmp	r6, r7
 800bd18:	d900      	bls.n	800bd1c <__ssputs_r+0x70>
 800bd1a:	463e      	mov	r6, r7
 800bd1c:	6820      	ldr	r0, [r4, #0]
 800bd1e:	4632      	mov	r2, r6
 800bd20:	4641      	mov	r1, r8
 800bd22:	f000 f9c9 	bl	800c0b8 <memmove>
 800bd26:	68a3      	ldr	r3, [r4, #8]
 800bd28:	1b9b      	subs	r3, r3, r6
 800bd2a:	60a3      	str	r3, [r4, #8]
 800bd2c:	6823      	ldr	r3, [r4, #0]
 800bd2e:	4433      	add	r3, r6
 800bd30:	6023      	str	r3, [r4, #0]
 800bd32:	2000      	movs	r0, #0
 800bd34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd38:	462a      	mov	r2, r5
 800bd3a:	f000 fa1b 	bl	800c174 <_realloc_r>
 800bd3e:	4606      	mov	r6, r0
 800bd40:	2800      	cmp	r0, #0
 800bd42:	d1e0      	bne.n	800bd06 <__ssputs_r+0x5a>
 800bd44:	6921      	ldr	r1, [r4, #16]
 800bd46:	4650      	mov	r0, sl
 800bd48:	f7fe fe8c 	bl	800aa64 <_free_r>
 800bd4c:	230c      	movs	r3, #12
 800bd4e:	f8ca 3000 	str.w	r3, [sl]
 800bd52:	89a3      	ldrh	r3, [r4, #12]
 800bd54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd58:	81a3      	strh	r3, [r4, #12]
 800bd5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd5e:	e7e9      	b.n	800bd34 <__ssputs_r+0x88>

0800bd60 <_svfiprintf_r>:
 800bd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd64:	4698      	mov	r8, r3
 800bd66:	898b      	ldrh	r3, [r1, #12]
 800bd68:	061b      	lsls	r3, r3, #24
 800bd6a:	b09d      	sub	sp, #116	; 0x74
 800bd6c:	4607      	mov	r7, r0
 800bd6e:	460d      	mov	r5, r1
 800bd70:	4614      	mov	r4, r2
 800bd72:	d50e      	bpl.n	800bd92 <_svfiprintf_r+0x32>
 800bd74:	690b      	ldr	r3, [r1, #16]
 800bd76:	b963      	cbnz	r3, 800bd92 <_svfiprintf_r+0x32>
 800bd78:	2140      	movs	r1, #64	; 0x40
 800bd7a:	f7ff fa3f 	bl	800b1fc <_malloc_r>
 800bd7e:	6028      	str	r0, [r5, #0]
 800bd80:	6128      	str	r0, [r5, #16]
 800bd82:	b920      	cbnz	r0, 800bd8e <_svfiprintf_r+0x2e>
 800bd84:	230c      	movs	r3, #12
 800bd86:	603b      	str	r3, [r7, #0]
 800bd88:	f04f 30ff 	mov.w	r0, #4294967295
 800bd8c:	e0d0      	b.n	800bf30 <_svfiprintf_r+0x1d0>
 800bd8e:	2340      	movs	r3, #64	; 0x40
 800bd90:	616b      	str	r3, [r5, #20]
 800bd92:	2300      	movs	r3, #0
 800bd94:	9309      	str	r3, [sp, #36]	; 0x24
 800bd96:	2320      	movs	r3, #32
 800bd98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bda0:	2330      	movs	r3, #48	; 0x30
 800bda2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bf48 <_svfiprintf_r+0x1e8>
 800bda6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdaa:	f04f 0901 	mov.w	r9, #1
 800bdae:	4623      	mov	r3, r4
 800bdb0:	469a      	mov	sl, r3
 800bdb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdb6:	b10a      	cbz	r2, 800bdbc <_svfiprintf_r+0x5c>
 800bdb8:	2a25      	cmp	r2, #37	; 0x25
 800bdba:	d1f9      	bne.n	800bdb0 <_svfiprintf_r+0x50>
 800bdbc:	ebba 0b04 	subs.w	fp, sl, r4
 800bdc0:	d00b      	beq.n	800bdda <_svfiprintf_r+0x7a>
 800bdc2:	465b      	mov	r3, fp
 800bdc4:	4622      	mov	r2, r4
 800bdc6:	4629      	mov	r1, r5
 800bdc8:	4638      	mov	r0, r7
 800bdca:	f7ff ff6f 	bl	800bcac <__ssputs_r>
 800bdce:	3001      	adds	r0, #1
 800bdd0:	f000 80a9 	beq.w	800bf26 <_svfiprintf_r+0x1c6>
 800bdd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdd6:	445a      	add	r2, fp
 800bdd8:	9209      	str	r2, [sp, #36]	; 0x24
 800bdda:	f89a 3000 	ldrb.w	r3, [sl]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	f000 80a1 	beq.w	800bf26 <_svfiprintf_r+0x1c6>
 800bde4:	2300      	movs	r3, #0
 800bde6:	f04f 32ff 	mov.w	r2, #4294967295
 800bdea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdee:	f10a 0a01 	add.w	sl, sl, #1
 800bdf2:	9304      	str	r3, [sp, #16]
 800bdf4:	9307      	str	r3, [sp, #28]
 800bdf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdfa:	931a      	str	r3, [sp, #104]	; 0x68
 800bdfc:	4654      	mov	r4, sl
 800bdfe:	2205      	movs	r2, #5
 800be00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be04:	4850      	ldr	r0, [pc, #320]	; (800bf48 <_svfiprintf_r+0x1e8>)
 800be06:	f7f4 fa03 	bl	8000210 <memchr>
 800be0a:	9a04      	ldr	r2, [sp, #16]
 800be0c:	b9d8      	cbnz	r0, 800be46 <_svfiprintf_r+0xe6>
 800be0e:	06d0      	lsls	r0, r2, #27
 800be10:	bf44      	itt	mi
 800be12:	2320      	movmi	r3, #32
 800be14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be18:	0711      	lsls	r1, r2, #28
 800be1a:	bf44      	itt	mi
 800be1c:	232b      	movmi	r3, #43	; 0x2b
 800be1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be22:	f89a 3000 	ldrb.w	r3, [sl]
 800be26:	2b2a      	cmp	r3, #42	; 0x2a
 800be28:	d015      	beq.n	800be56 <_svfiprintf_r+0xf6>
 800be2a:	9a07      	ldr	r2, [sp, #28]
 800be2c:	4654      	mov	r4, sl
 800be2e:	2000      	movs	r0, #0
 800be30:	f04f 0c0a 	mov.w	ip, #10
 800be34:	4621      	mov	r1, r4
 800be36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be3a:	3b30      	subs	r3, #48	; 0x30
 800be3c:	2b09      	cmp	r3, #9
 800be3e:	d94d      	bls.n	800bedc <_svfiprintf_r+0x17c>
 800be40:	b1b0      	cbz	r0, 800be70 <_svfiprintf_r+0x110>
 800be42:	9207      	str	r2, [sp, #28]
 800be44:	e014      	b.n	800be70 <_svfiprintf_r+0x110>
 800be46:	eba0 0308 	sub.w	r3, r0, r8
 800be4a:	fa09 f303 	lsl.w	r3, r9, r3
 800be4e:	4313      	orrs	r3, r2
 800be50:	9304      	str	r3, [sp, #16]
 800be52:	46a2      	mov	sl, r4
 800be54:	e7d2      	b.n	800bdfc <_svfiprintf_r+0x9c>
 800be56:	9b03      	ldr	r3, [sp, #12]
 800be58:	1d19      	adds	r1, r3, #4
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	9103      	str	r1, [sp, #12]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	bfbb      	ittet	lt
 800be62:	425b      	neglt	r3, r3
 800be64:	f042 0202 	orrlt.w	r2, r2, #2
 800be68:	9307      	strge	r3, [sp, #28]
 800be6a:	9307      	strlt	r3, [sp, #28]
 800be6c:	bfb8      	it	lt
 800be6e:	9204      	strlt	r2, [sp, #16]
 800be70:	7823      	ldrb	r3, [r4, #0]
 800be72:	2b2e      	cmp	r3, #46	; 0x2e
 800be74:	d10c      	bne.n	800be90 <_svfiprintf_r+0x130>
 800be76:	7863      	ldrb	r3, [r4, #1]
 800be78:	2b2a      	cmp	r3, #42	; 0x2a
 800be7a:	d134      	bne.n	800bee6 <_svfiprintf_r+0x186>
 800be7c:	9b03      	ldr	r3, [sp, #12]
 800be7e:	1d1a      	adds	r2, r3, #4
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	9203      	str	r2, [sp, #12]
 800be84:	2b00      	cmp	r3, #0
 800be86:	bfb8      	it	lt
 800be88:	f04f 33ff 	movlt.w	r3, #4294967295
 800be8c:	3402      	adds	r4, #2
 800be8e:	9305      	str	r3, [sp, #20]
 800be90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bf58 <_svfiprintf_r+0x1f8>
 800be94:	7821      	ldrb	r1, [r4, #0]
 800be96:	2203      	movs	r2, #3
 800be98:	4650      	mov	r0, sl
 800be9a:	f7f4 f9b9 	bl	8000210 <memchr>
 800be9e:	b138      	cbz	r0, 800beb0 <_svfiprintf_r+0x150>
 800bea0:	9b04      	ldr	r3, [sp, #16]
 800bea2:	eba0 000a 	sub.w	r0, r0, sl
 800bea6:	2240      	movs	r2, #64	; 0x40
 800bea8:	4082      	lsls	r2, r0
 800beaa:	4313      	orrs	r3, r2
 800beac:	3401      	adds	r4, #1
 800beae:	9304      	str	r3, [sp, #16]
 800beb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beb4:	4825      	ldr	r0, [pc, #148]	; (800bf4c <_svfiprintf_r+0x1ec>)
 800beb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800beba:	2206      	movs	r2, #6
 800bebc:	f7f4 f9a8 	bl	8000210 <memchr>
 800bec0:	2800      	cmp	r0, #0
 800bec2:	d038      	beq.n	800bf36 <_svfiprintf_r+0x1d6>
 800bec4:	4b22      	ldr	r3, [pc, #136]	; (800bf50 <_svfiprintf_r+0x1f0>)
 800bec6:	bb1b      	cbnz	r3, 800bf10 <_svfiprintf_r+0x1b0>
 800bec8:	9b03      	ldr	r3, [sp, #12]
 800beca:	3307      	adds	r3, #7
 800becc:	f023 0307 	bic.w	r3, r3, #7
 800bed0:	3308      	adds	r3, #8
 800bed2:	9303      	str	r3, [sp, #12]
 800bed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bed6:	4433      	add	r3, r6
 800bed8:	9309      	str	r3, [sp, #36]	; 0x24
 800beda:	e768      	b.n	800bdae <_svfiprintf_r+0x4e>
 800bedc:	fb0c 3202 	mla	r2, ip, r2, r3
 800bee0:	460c      	mov	r4, r1
 800bee2:	2001      	movs	r0, #1
 800bee4:	e7a6      	b.n	800be34 <_svfiprintf_r+0xd4>
 800bee6:	2300      	movs	r3, #0
 800bee8:	3401      	adds	r4, #1
 800beea:	9305      	str	r3, [sp, #20]
 800beec:	4619      	mov	r1, r3
 800beee:	f04f 0c0a 	mov.w	ip, #10
 800bef2:	4620      	mov	r0, r4
 800bef4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bef8:	3a30      	subs	r2, #48	; 0x30
 800befa:	2a09      	cmp	r2, #9
 800befc:	d903      	bls.n	800bf06 <_svfiprintf_r+0x1a6>
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d0c6      	beq.n	800be90 <_svfiprintf_r+0x130>
 800bf02:	9105      	str	r1, [sp, #20]
 800bf04:	e7c4      	b.n	800be90 <_svfiprintf_r+0x130>
 800bf06:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf0a:	4604      	mov	r4, r0
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	e7f0      	b.n	800bef2 <_svfiprintf_r+0x192>
 800bf10:	ab03      	add	r3, sp, #12
 800bf12:	9300      	str	r3, [sp, #0]
 800bf14:	462a      	mov	r2, r5
 800bf16:	4b0f      	ldr	r3, [pc, #60]	; (800bf54 <_svfiprintf_r+0x1f4>)
 800bf18:	a904      	add	r1, sp, #16
 800bf1a:	4638      	mov	r0, r7
 800bf1c:	f7fd f960 	bl	80091e0 <_printf_float>
 800bf20:	1c42      	adds	r2, r0, #1
 800bf22:	4606      	mov	r6, r0
 800bf24:	d1d6      	bne.n	800bed4 <_svfiprintf_r+0x174>
 800bf26:	89ab      	ldrh	r3, [r5, #12]
 800bf28:	065b      	lsls	r3, r3, #25
 800bf2a:	f53f af2d 	bmi.w	800bd88 <_svfiprintf_r+0x28>
 800bf2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf30:	b01d      	add	sp, #116	; 0x74
 800bf32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf36:	ab03      	add	r3, sp, #12
 800bf38:	9300      	str	r3, [sp, #0]
 800bf3a:	462a      	mov	r2, r5
 800bf3c:	4b05      	ldr	r3, [pc, #20]	; (800bf54 <_svfiprintf_r+0x1f4>)
 800bf3e:	a904      	add	r1, sp, #16
 800bf40:	4638      	mov	r0, r7
 800bf42:	f7fd fbf1 	bl	8009728 <_printf_i>
 800bf46:	e7eb      	b.n	800bf20 <_svfiprintf_r+0x1c0>
 800bf48:	0800cba5 	.word	0x0800cba5
 800bf4c:	0800cbaf 	.word	0x0800cbaf
 800bf50:	080091e1 	.word	0x080091e1
 800bf54:	0800bcad 	.word	0x0800bcad
 800bf58:	0800cbab 	.word	0x0800cbab

0800bf5c <__sflush_r>:
 800bf5c:	898a      	ldrh	r2, [r1, #12]
 800bf5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf62:	4605      	mov	r5, r0
 800bf64:	0710      	lsls	r0, r2, #28
 800bf66:	460c      	mov	r4, r1
 800bf68:	d458      	bmi.n	800c01c <__sflush_r+0xc0>
 800bf6a:	684b      	ldr	r3, [r1, #4]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	dc05      	bgt.n	800bf7c <__sflush_r+0x20>
 800bf70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	dc02      	bgt.n	800bf7c <__sflush_r+0x20>
 800bf76:	2000      	movs	r0, #0
 800bf78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf7e:	2e00      	cmp	r6, #0
 800bf80:	d0f9      	beq.n	800bf76 <__sflush_r+0x1a>
 800bf82:	2300      	movs	r3, #0
 800bf84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf88:	682f      	ldr	r7, [r5, #0]
 800bf8a:	6a21      	ldr	r1, [r4, #32]
 800bf8c:	602b      	str	r3, [r5, #0]
 800bf8e:	d032      	beq.n	800bff6 <__sflush_r+0x9a>
 800bf90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf92:	89a3      	ldrh	r3, [r4, #12]
 800bf94:	075a      	lsls	r2, r3, #29
 800bf96:	d505      	bpl.n	800bfa4 <__sflush_r+0x48>
 800bf98:	6863      	ldr	r3, [r4, #4]
 800bf9a:	1ac0      	subs	r0, r0, r3
 800bf9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf9e:	b10b      	cbz	r3, 800bfa4 <__sflush_r+0x48>
 800bfa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfa2:	1ac0      	subs	r0, r0, r3
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfaa:	6a21      	ldr	r1, [r4, #32]
 800bfac:	4628      	mov	r0, r5
 800bfae:	47b0      	blx	r6
 800bfb0:	1c43      	adds	r3, r0, #1
 800bfb2:	89a3      	ldrh	r3, [r4, #12]
 800bfb4:	d106      	bne.n	800bfc4 <__sflush_r+0x68>
 800bfb6:	6829      	ldr	r1, [r5, #0]
 800bfb8:	291d      	cmp	r1, #29
 800bfba:	d82b      	bhi.n	800c014 <__sflush_r+0xb8>
 800bfbc:	4a29      	ldr	r2, [pc, #164]	; (800c064 <__sflush_r+0x108>)
 800bfbe:	410a      	asrs	r2, r1
 800bfc0:	07d6      	lsls	r6, r2, #31
 800bfc2:	d427      	bmi.n	800c014 <__sflush_r+0xb8>
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	6062      	str	r2, [r4, #4]
 800bfc8:	04d9      	lsls	r1, r3, #19
 800bfca:	6922      	ldr	r2, [r4, #16]
 800bfcc:	6022      	str	r2, [r4, #0]
 800bfce:	d504      	bpl.n	800bfda <__sflush_r+0x7e>
 800bfd0:	1c42      	adds	r2, r0, #1
 800bfd2:	d101      	bne.n	800bfd8 <__sflush_r+0x7c>
 800bfd4:	682b      	ldr	r3, [r5, #0]
 800bfd6:	b903      	cbnz	r3, 800bfda <__sflush_r+0x7e>
 800bfd8:	6560      	str	r0, [r4, #84]	; 0x54
 800bfda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfdc:	602f      	str	r7, [r5, #0]
 800bfde:	2900      	cmp	r1, #0
 800bfe0:	d0c9      	beq.n	800bf76 <__sflush_r+0x1a>
 800bfe2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfe6:	4299      	cmp	r1, r3
 800bfe8:	d002      	beq.n	800bff0 <__sflush_r+0x94>
 800bfea:	4628      	mov	r0, r5
 800bfec:	f7fe fd3a 	bl	800aa64 <_free_r>
 800bff0:	2000      	movs	r0, #0
 800bff2:	6360      	str	r0, [r4, #52]	; 0x34
 800bff4:	e7c0      	b.n	800bf78 <__sflush_r+0x1c>
 800bff6:	2301      	movs	r3, #1
 800bff8:	4628      	mov	r0, r5
 800bffa:	47b0      	blx	r6
 800bffc:	1c41      	adds	r1, r0, #1
 800bffe:	d1c8      	bne.n	800bf92 <__sflush_r+0x36>
 800c000:	682b      	ldr	r3, [r5, #0]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d0c5      	beq.n	800bf92 <__sflush_r+0x36>
 800c006:	2b1d      	cmp	r3, #29
 800c008:	d001      	beq.n	800c00e <__sflush_r+0xb2>
 800c00a:	2b16      	cmp	r3, #22
 800c00c:	d101      	bne.n	800c012 <__sflush_r+0xb6>
 800c00e:	602f      	str	r7, [r5, #0]
 800c010:	e7b1      	b.n	800bf76 <__sflush_r+0x1a>
 800c012:	89a3      	ldrh	r3, [r4, #12]
 800c014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c018:	81a3      	strh	r3, [r4, #12]
 800c01a:	e7ad      	b.n	800bf78 <__sflush_r+0x1c>
 800c01c:	690f      	ldr	r7, [r1, #16]
 800c01e:	2f00      	cmp	r7, #0
 800c020:	d0a9      	beq.n	800bf76 <__sflush_r+0x1a>
 800c022:	0793      	lsls	r3, r2, #30
 800c024:	680e      	ldr	r6, [r1, #0]
 800c026:	bf08      	it	eq
 800c028:	694b      	ldreq	r3, [r1, #20]
 800c02a:	600f      	str	r7, [r1, #0]
 800c02c:	bf18      	it	ne
 800c02e:	2300      	movne	r3, #0
 800c030:	eba6 0807 	sub.w	r8, r6, r7
 800c034:	608b      	str	r3, [r1, #8]
 800c036:	f1b8 0f00 	cmp.w	r8, #0
 800c03a:	dd9c      	ble.n	800bf76 <__sflush_r+0x1a>
 800c03c:	6a21      	ldr	r1, [r4, #32]
 800c03e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c040:	4643      	mov	r3, r8
 800c042:	463a      	mov	r2, r7
 800c044:	4628      	mov	r0, r5
 800c046:	47b0      	blx	r6
 800c048:	2800      	cmp	r0, #0
 800c04a:	dc06      	bgt.n	800c05a <__sflush_r+0xfe>
 800c04c:	89a3      	ldrh	r3, [r4, #12]
 800c04e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c052:	81a3      	strh	r3, [r4, #12]
 800c054:	f04f 30ff 	mov.w	r0, #4294967295
 800c058:	e78e      	b.n	800bf78 <__sflush_r+0x1c>
 800c05a:	4407      	add	r7, r0
 800c05c:	eba8 0800 	sub.w	r8, r8, r0
 800c060:	e7e9      	b.n	800c036 <__sflush_r+0xda>
 800c062:	bf00      	nop
 800c064:	dfbffffe 	.word	0xdfbffffe

0800c068 <_fflush_r>:
 800c068:	b538      	push	{r3, r4, r5, lr}
 800c06a:	690b      	ldr	r3, [r1, #16]
 800c06c:	4605      	mov	r5, r0
 800c06e:	460c      	mov	r4, r1
 800c070:	b913      	cbnz	r3, 800c078 <_fflush_r+0x10>
 800c072:	2500      	movs	r5, #0
 800c074:	4628      	mov	r0, r5
 800c076:	bd38      	pop	{r3, r4, r5, pc}
 800c078:	b118      	cbz	r0, 800c082 <_fflush_r+0x1a>
 800c07a:	6a03      	ldr	r3, [r0, #32]
 800c07c:	b90b      	cbnz	r3, 800c082 <_fflush_r+0x1a>
 800c07e:	f7fd fd01 	bl	8009a84 <__sinit>
 800c082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d0f3      	beq.n	800c072 <_fflush_r+0xa>
 800c08a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c08c:	07d0      	lsls	r0, r2, #31
 800c08e:	d404      	bmi.n	800c09a <_fflush_r+0x32>
 800c090:	0599      	lsls	r1, r3, #22
 800c092:	d402      	bmi.n	800c09a <_fflush_r+0x32>
 800c094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c096:	f7fd fe52 	bl	8009d3e <__retarget_lock_acquire_recursive>
 800c09a:	4628      	mov	r0, r5
 800c09c:	4621      	mov	r1, r4
 800c09e:	f7ff ff5d 	bl	800bf5c <__sflush_r>
 800c0a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0a4:	07da      	lsls	r2, r3, #31
 800c0a6:	4605      	mov	r5, r0
 800c0a8:	d4e4      	bmi.n	800c074 <_fflush_r+0xc>
 800c0aa:	89a3      	ldrh	r3, [r4, #12]
 800c0ac:	059b      	lsls	r3, r3, #22
 800c0ae:	d4e1      	bmi.n	800c074 <_fflush_r+0xc>
 800c0b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0b2:	f7fd fe45 	bl	8009d40 <__retarget_lock_release_recursive>
 800c0b6:	e7dd      	b.n	800c074 <_fflush_r+0xc>

0800c0b8 <memmove>:
 800c0b8:	4288      	cmp	r0, r1
 800c0ba:	b510      	push	{r4, lr}
 800c0bc:	eb01 0402 	add.w	r4, r1, r2
 800c0c0:	d902      	bls.n	800c0c8 <memmove+0x10>
 800c0c2:	4284      	cmp	r4, r0
 800c0c4:	4623      	mov	r3, r4
 800c0c6:	d807      	bhi.n	800c0d8 <memmove+0x20>
 800c0c8:	1e43      	subs	r3, r0, #1
 800c0ca:	42a1      	cmp	r1, r4
 800c0cc:	d008      	beq.n	800c0e0 <memmove+0x28>
 800c0ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0d6:	e7f8      	b.n	800c0ca <memmove+0x12>
 800c0d8:	4402      	add	r2, r0
 800c0da:	4601      	mov	r1, r0
 800c0dc:	428a      	cmp	r2, r1
 800c0de:	d100      	bne.n	800c0e2 <memmove+0x2a>
 800c0e0:	bd10      	pop	{r4, pc}
 800c0e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0ea:	e7f7      	b.n	800c0dc <memmove+0x24>

0800c0ec <_sbrk_r>:
 800c0ec:	b538      	push	{r3, r4, r5, lr}
 800c0ee:	4d06      	ldr	r5, [pc, #24]	; (800c108 <_sbrk_r+0x1c>)
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	4608      	mov	r0, r1
 800c0f6:	602b      	str	r3, [r5, #0]
 800c0f8:	f7f6 fd66 	bl	8002bc8 <_sbrk>
 800c0fc:	1c43      	adds	r3, r0, #1
 800c0fe:	d102      	bne.n	800c106 <_sbrk_r+0x1a>
 800c100:	682b      	ldr	r3, [r5, #0]
 800c102:	b103      	cbz	r3, 800c106 <_sbrk_r+0x1a>
 800c104:	6023      	str	r3, [r4, #0]
 800c106:	bd38      	pop	{r3, r4, r5, pc}
 800c108:	20000ad0 	.word	0x20000ad0

0800c10c <__assert_func>:
 800c10c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c10e:	4614      	mov	r4, r2
 800c110:	461a      	mov	r2, r3
 800c112:	4b09      	ldr	r3, [pc, #36]	; (800c138 <__assert_func+0x2c>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4605      	mov	r5, r0
 800c118:	68d8      	ldr	r0, [r3, #12]
 800c11a:	b14c      	cbz	r4, 800c130 <__assert_func+0x24>
 800c11c:	4b07      	ldr	r3, [pc, #28]	; (800c13c <__assert_func+0x30>)
 800c11e:	9100      	str	r1, [sp, #0]
 800c120:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c124:	4906      	ldr	r1, [pc, #24]	; (800c140 <__assert_func+0x34>)
 800c126:	462b      	mov	r3, r5
 800c128:	f000 f854 	bl	800c1d4 <fiprintf>
 800c12c:	f000 f864 	bl	800c1f8 <abort>
 800c130:	4b04      	ldr	r3, [pc, #16]	; (800c144 <__assert_func+0x38>)
 800c132:	461c      	mov	r4, r3
 800c134:	e7f3      	b.n	800c11e <__assert_func+0x12>
 800c136:	bf00      	nop
 800c138:	200001e4 	.word	0x200001e4
 800c13c:	0800cbb6 	.word	0x0800cbb6
 800c140:	0800cbc3 	.word	0x0800cbc3
 800c144:	0800cbf1 	.word	0x0800cbf1

0800c148 <_calloc_r>:
 800c148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c14a:	fba1 2402 	umull	r2, r4, r1, r2
 800c14e:	b94c      	cbnz	r4, 800c164 <_calloc_r+0x1c>
 800c150:	4611      	mov	r1, r2
 800c152:	9201      	str	r2, [sp, #4]
 800c154:	f7ff f852 	bl	800b1fc <_malloc_r>
 800c158:	9a01      	ldr	r2, [sp, #4]
 800c15a:	4605      	mov	r5, r0
 800c15c:	b930      	cbnz	r0, 800c16c <_calloc_r+0x24>
 800c15e:	4628      	mov	r0, r5
 800c160:	b003      	add	sp, #12
 800c162:	bd30      	pop	{r4, r5, pc}
 800c164:	220c      	movs	r2, #12
 800c166:	6002      	str	r2, [r0, #0]
 800c168:	2500      	movs	r5, #0
 800c16a:	e7f8      	b.n	800c15e <_calloc_r+0x16>
 800c16c:	4621      	mov	r1, r4
 800c16e:	f7fd fd56 	bl	8009c1e <memset>
 800c172:	e7f4      	b.n	800c15e <_calloc_r+0x16>

0800c174 <_realloc_r>:
 800c174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c178:	4680      	mov	r8, r0
 800c17a:	4614      	mov	r4, r2
 800c17c:	460e      	mov	r6, r1
 800c17e:	b921      	cbnz	r1, 800c18a <_realloc_r+0x16>
 800c180:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c184:	4611      	mov	r1, r2
 800c186:	f7ff b839 	b.w	800b1fc <_malloc_r>
 800c18a:	b92a      	cbnz	r2, 800c198 <_realloc_r+0x24>
 800c18c:	f7fe fc6a 	bl	800aa64 <_free_r>
 800c190:	4625      	mov	r5, r4
 800c192:	4628      	mov	r0, r5
 800c194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c198:	f000 f835 	bl	800c206 <_malloc_usable_size_r>
 800c19c:	4284      	cmp	r4, r0
 800c19e:	4607      	mov	r7, r0
 800c1a0:	d802      	bhi.n	800c1a8 <_realloc_r+0x34>
 800c1a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c1a6:	d812      	bhi.n	800c1ce <_realloc_r+0x5a>
 800c1a8:	4621      	mov	r1, r4
 800c1aa:	4640      	mov	r0, r8
 800c1ac:	f7ff f826 	bl	800b1fc <_malloc_r>
 800c1b0:	4605      	mov	r5, r0
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	d0ed      	beq.n	800c192 <_realloc_r+0x1e>
 800c1b6:	42bc      	cmp	r4, r7
 800c1b8:	4622      	mov	r2, r4
 800c1ba:	4631      	mov	r1, r6
 800c1bc:	bf28      	it	cs
 800c1be:	463a      	movcs	r2, r7
 800c1c0:	f7fd fdbf 	bl	8009d42 <memcpy>
 800c1c4:	4631      	mov	r1, r6
 800c1c6:	4640      	mov	r0, r8
 800c1c8:	f7fe fc4c 	bl	800aa64 <_free_r>
 800c1cc:	e7e1      	b.n	800c192 <_realloc_r+0x1e>
 800c1ce:	4635      	mov	r5, r6
 800c1d0:	e7df      	b.n	800c192 <_realloc_r+0x1e>
	...

0800c1d4 <fiprintf>:
 800c1d4:	b40e      	push	{r1, r2, r3}
 800c1d6:	b503      	push	{r0, r1, lr}
 800c1d8:	4601      	mov	r1, r0
 800c1da:	ab03      	add	r3, sp, #12
 800c1dc:	4805      	ldr	r0, [pc, #20]	; (800c1f4 <fiprintf+0x20>)
 800c1de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1e2:	6800      	ldr	r0, [r0, #0]
 800c1e4:	9301      	str	r3, [sp, #4]
 800c1e6:	f000 f83f 	bl	800c268 <_vfiprintf_r>
 800c1ea:	b002      	add	sp, #8
 800c1ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1f0:	b003      	add	sp, #12
 800c1f2:	4770      	bx	lr
 800c1f4:	200001e4 	.word	0x200001e4

0800c1f8 <abort>:
 800c1f8:	b508      	push	{r3, lr}
 800c1fa:	2006      	movs	r0, #6
 800c1fc:	f000 fa0c 	bl	800c618 <raise>
 800c200:	2001      	movs	r0, #1
 800c202:	f7f6 fc69 	bl	8002ad8 <_exit>

0800c206 <_malloc_usable_size_r>:
 800c206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c20a:	1f18      	subs	r0, r3, #4
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	bfbc      	itt	lt
 800c210:	580b      	ldrlt	r3, [r1, r0]
 800c212:	18c0      	addlt	r0, r0, r3
 800c214:	4770      	bx	lr

0800c216 <__sfputc_r>:
 800c216:	6893      	ldr	r3, [r2, #8]
 800c218:	3b01      	subs	r3, #1
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	b410      	push	{r4}
 800c21e:	6093      	str	r3, [r2, #8]
 800c220:	da08      	bge.n	800c234 <__sfputc_r+0x1e>
 800c222:	6994      	ldr	r4, [r2, #24]
 800c224:	42a3      	cmp	r3, r4
 800c226:	db01      	blt.n	800c22c <__sfputc_r+0x16>
 800c228:	290a      	cmp	r1, #10
 800c22a:	d103      	bne.n	800c234 <__sfputc_r+0x1e>
 800c22c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c230:	f000 b934 	b.w	800c49c <__swbuf_r>
 800c234:	6813      	ldr	r3, [r2, #0]
 800c236:	1c58      	adds	r0, r3, #1
 800c238:	6010      	str	r0, [r2, #0]
 800c23a:	7019      	strb	r1, [r3, #0]
 800c23c:	4608      	mov	r0, r1
 800c23e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <__sfputs_r>:
 800c244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c246:	4606      	mov	r6, r0
 800c248:	460f      	mov	r7, r1
 800c24a:	4614      	mov	r4, r2
 800c24c:	18d5      	adds	r5, r2, r3
 800c24e:	42ac      	cmp	r4, r5
 800c250:	d101      	bne.n	800c256 <__sfputs_r+0x12>
 800c252:	2000      	movs	r0, #0
 800c254:	e007      	b.n	800c266 <__sfputs_r+0x22>
 800c256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c25a:	463a      	mov	r2, r7
 800c25c:	4630      	mov	r0, r6
 800c25e:	f7ff ffda 	bl	800c216 <__sfputc_r>
 800c262:	1c43      	adds	r3, r0, #1
 800c264:	d1f3      	bne.n	800c24e <__sfputs_r+0xa>
 800c266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c268 <_vfiprintf_r>:
 800c268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c26c:	460d      	mov	r5, r1
 800c26e:	b09d      	sub	sp, #116	; 0x74
 800c270:	4614      	mov	r4, r2
 800c272:	4698      	mov	r8, r3
 800c274:	4606      	mov	r6, r0
 800c276:	b118      	cbz	r0, 800c280 <_vfiprintf_r+0x18>
 800c278:	6a03      	ldr	r3, [r0, #32]
 800c27a:	b90b      	cbnz	r3, 800c280 <_vfiprintf_r+0x18>
 800c27c:	f7fd fc02 	bl	8009a84 <__sinit>
 800c280:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c282:	07d9      	lsls	r1, r3, #31
 800c284:	d405      	bmi.n	800c292 <_vfiprintf_r+0x2a>
 800c286:	89ab      	ldrh	r3, [r5, #12]
 800c288:	059a      	lsls	r2, r3, #22
 800c28a:	d402      	bmi.n	800c292 <_vfiprintf_r+0x2a>
 800c28c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c28e:	f7fd fd56 	bl	8009d3e <__retarget_lock_acquire_recursive>
 800c292:	89ab      	ldrh	r3, [r5, #12]
 800c294:	071b      	lsls	r3, r3, #28
 800c296:	d501      	bpl.n	800c29c <_vfiprintf_r+0x34>
 800c298:	692b      	ldr	r3, [r5, #16]
 800c29a:	b99b      	cbnz	r3, 800c2c4 <_vfiprintf_r+0x5c>
 800c29c:	4629      	mov	r1, r5
 800c29e:	4630      	mov	r0, r6
 800c2a0:	f000 f93a 	bl	800c518 <__swsetup_r>
 800c2a4:	b170      	cbz	r0, 800c2c4 <_vfiprintf_r+0x5c>
 800c2a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2a8:	07dc      	lsls	r4, r3, #31
 800c2aa:	d504      	bpl.n	800c2b6 <_vfiprintf_r+0x4e>
 800c2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b0:	b01d      	add	sp, #116	; 0x74
 800c2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b6:	89ab      	ldrh	r3, [r5, #12]
 800c2b8:	0598      	lsls	r0, r3, #22
 800c2ba:	d4f7      	bmi.n	800c2ac <_vfiprintf_r+0x44>
 800c2bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2be:	f7fd fd3f 	bl	8009d40 <__retarget_lock_release_recursive>
 800c2c2:	e7f3      	b.n	800c2ac <_vfiprintf_r+0x44>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c2c8:	2320      	movs	r3, #32
 800c2ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2d2:	2330      	movs	r3, #48	; 0x30
 800c2d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c488 <_vfiprintf_r+0x220>
 800c2d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2dc:	f04f 0901 	mov.w	r9, #1
 800c2e0:	4623      	mov	r3, r4
 800c2e2:	469a      	mov	sl, r3
 800c2e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2e8:	b10a      	cbz	r2, 800c2ee <_vfiprintf_r+0x86>
 800c2ea:	2a25      	cmp	r2, #37	; 0x25
 800c2ec:	d1f9      	bne.n	800c2e2 <_vfiprintf_r+0x7a>
 800c2ee:	ebba 0b04 	subs.w	fp, sl, r4
 800c2f2:	d00b      	beq.n	800c30c <_vfiprintf_r+0xa4>
 800c2f4:	465b      	mov	r3, fp
 800c2f6:	4622      	mov	r2, r4
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	f7ff ffa2 	bl	800c244 <__sfputs_r>
 800c300:	3001      	adds	r0, #1
 800c302:	f000 80a9 	beq.w	800c458 <_vfiprintf_r+0x1f0>
 800c306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c308:	445a      	add	r2, fp
 800c30a:	9209      	str	r2, [sp, #36]	; 0x24
 800c30c:	f89a 3000 	ldrb.w	r3, [sl]
 800c310:	2b00      	cmp	r3, #0
 800c312:	f000 80a1 	beq.w	800c458 <_vfiprintf_r+0x1f0>
 800c316:	2300      	movs	r3, #0
 800c318:	f04f 32ff 	mov.w	r2, #4294967295
 800c31c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c320:	f10a 0a01 	add.w	sl, sl, #1
 800c324:	9304      	str	r3, [sp, #16]
 800c326:	9307      	str	r3, [sp, #28]
 800c328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c32c:	931a      	str	r3, [sp, #104]	; 0x68
 800c32e:	4654      	mov	r4, sl
 800c330:	2205      	movs	r2, #5
 800c332:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c336:	4854      	ldr	r0, [pc, #336]	; (800c488 <_vfiprintf_r+0x220>)
 800c338:	f7f3 ff6a 	bl	8000210 <memchr>
 800c33c:	9a04      	ldr	r2, [sp, #16]
 800c33e:	b9d8      	cbnz	r0, 800c378 <_vfiprintf_r+0x110>
 800c340:	06d1      	lsls	r1, r2, #27
 800c342:	bf44      	itt	mi
 800c344:	2320      	movmi	r3, #32
 800c346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c34a:	0713      	lsls	r3, r2, #28
 800c34c:	bf44      	itt	mi
 800c34e:	232b      	movmi	r3, #43	; 0x2b
 800c350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c354:	f89a 3000 	ldrb.w	r3, [sl]
 800c358:	2b2a      	cmp	r3, #42	; 0x2a
 800c35a:	d015      	beq.n	800c388 <_vfiprintf_r+0x120>
 800c35c:	9a07      	ldr	r2, [sp, #28]
 800c35e:	4654      	mov	r4, sl
 800c360:	2000      	movs	r0, #0
 800c362:	f04f 0c0a 	mov.w	ip, #10
 800c366:	4621      	mov	r1, r4
 800c368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c36c:	3b30      	subs	r3, #48	; 0x30
 800c36e:	2b09      	cmp	r3, #9
 800c370:	d94d      	bls.n	800c40e <_vfiprintf_r+0x1a6>
 800c372:	b1b0      	cbz	r0, 800c3a2 <_vfiprintf_r+0x13a>
 800c374:	9207      	str	r2, [sp, #28]
 800c376:	e014      	b.n	800c3a2 <_vfiprintf_r+0x13a>
 800c378:	eba0 0308 	sub.w	r3, r0, r8
 800c37c:	fa09 f303 	lsl.w	r3, r9, r3
 800c380:	4313      	orrs	r3, r2
 800c382:	9304      	str	r3, [sp, #16]
 800c384:	46a2      	mov	sl, r4
 800c386:	e7d2      	b.n	800c32e <_vfiprintf_r+0xc6>
 800c388:	9b03      	ldr	r3, [sp, #12]
 800c38a:	1d19      	adds	r1, r3, #4
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	9103      	str	r1, [sp, #12]
 800c390:	2b00      	cmp	r3, #0
 800c392:	bfbb      	ittet	lt
 800c394:	425b      	neglt	r3, r3
 800c396:	f042 0202 	orrlt.w	r2, r2, #2
 800c39a:	9307      	strge	r3, [sp, #28]
 800c39c:	9307      	strlt	r3, [sp, #28]
 800c39e:	bfb8      	it	lt
 800c3a0:	9204      	strlt	r2, [sp, #16]
 800c3a2:	7823      	ldrb	r3, [r4, #0]
 800c3a4:	2b2e      	cmp	r3, #46	; 0x2e
 800c3a6:	d10c      	bne.n	800c3c2 <_vfiprintf_r+0x15a>
 800c3a8:	7863      	ldrb	r3, [r4, #1]
 800c3aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c3ac:	d134      	bne.n	800c418 <_vfiprintf_r+0x1b0>
 800c3ae:	9b03      	ldr	r3, [sp, #12]
 800c3b0:	1d1a      	adds	r2, r3, #4
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	9203      	str	r2, [sp, #12]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	bfb8      	it	lt
 800c3ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3be:	3402      	adds	r4, #2
 800c3c0:	9305      	str	r3, [sp, #20]
 800c3c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c498 <_vfiprintf_r+0x230>
 800c3c6:	7821      	ldrb	r1, [r4, #0]
 800c3c8:	2203      	movs	r2, #3
 800c3ca:	4650      	mov	r0, sl
 800c3cc:	f7f3 ff20 	bl	8000210 <memchr>
 800c3d0:	b138      	cbz	r0, 800c3e2 <_vfiprintf_r+0x17a>
 800c3d2:	9b04      	ldr	r3, [sp, #16]
 800c3d4:	eba0 000a 	sub.w	r0, r0, sl
 800c3d8:	2240      	movs	r2, #64	; 0x40
 800c3da:	4082      	lsls	r2, r0
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	3401      	adds	r4, #1
 800c3e0:	9304      	str	r3, [sp, #16]
 800c3e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3e6:	4829      	ldr	r0, [pc, #164]	; (800c48c <_vfiprintf_r+0x224>)
 800c3e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3ec:	2206      	movs	r2, #6
 800c3ee:	f7f3 ff0f 	bl	8000210 <memchr>
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	d03f      	beq.n	800c476 <_vfiprintf_r+0x20e>
 800c3f6:	4b26      	ldr	r3, [pc, #152]	; (800c490 <_vfiprintf_r+0x228>)
 800c3f8:	bb1b      	cbnz	r3, 800c442 <_vfiprintf_r+0x1da>
 800c3fa:	9b03      	ldr	r3, [sp, #12]
 800c3fc:	3307      	adds	r3, #7
 800c3fe:	f023 0307 	bic.w	r3, r3, #7
 800c402:	3308      	adds	r3, #8
 800c404:	9303      	str	r3, [sp, #12]
 800c406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c408:	443b      	add	r3, r7
 800c40a:	9309      	str	r3, [sp, #36]	; 0x24
 800c40c:	e768      	b.n	800c2e0 <_vfiprintf_r+0x78>
 800c40e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c412:	460c      	mov	r4, r1
 800c414:	2001      	movs	r0, #1
 800c416:	e7a6      	b.n	800c366 <_vfiprintf_r+0xfe>
 800c418:	2300      	movs	r3, #0
 800c41a:	3401      	adds	r4, #1
 800c41c:	9305      	str	r3, [sp, #20]
 800c41e:	4619      	mov	r1, r3
 800c420:	f04f 0c0a 	mov.w	ip, #10
 800c424:	4620      	mov	r0, r4
 800c426:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c42a:	3a30      	subs	r2, #48	; 0x30
 800c42c:	2a09      	cmp	r2, #9
 800c42e:	d903      	bls.n	800c438 <_vfiprintf_r+0x1d0>
 800c430:	2b00      	cmp	r3, #0
 800c432:	d0c6      	beq.n	800c3c2 <_vfiprintf_r+0x15a>
 800c434:	9105      	str	r1, [sp, #20]
 800c436:	e7c4      	b.n	800c3c2 <_vfiprintf_r+0x15a>
 800c438:	fb0c 2101 	mla	r1, ip, r1, r2
 800c43c:	4604      	mov	r4, r0
 800c43e:	2301      	movs	r3, #1
 800c440:	e7f0      	b.n	800c424 <_vfiprintf_r+0x1bc>
 800c442:	ab03      	add	r3, sp, #12
 800c444:	9300      	str	r3, [sp, #0]
 800c446:	462a      	mov	r2, r5
 800c448:	4b12      	ldr	r3, [pc, #72]	; (800c494 <_vfiprintf_r+0x22c>)
 800c44a:	a904      	add	r1, sp, #16
 800c44c:	4630      	mov	r0, r6
 800c44e:	f7fc fec7 	bl	80091e0 <_printf_float>
 800c452:	4607      	mov	r7, r0
 800c454:	1c78      	adds	r0, r7, #1
 800c456:	d1d6      	bne.n	800c406 <_vfiprintf_r+0x19e>
 800c458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c45a:	07d9      	lsls	r1, r3, #31
 800c45c:	d405      	bmi.n	800c46a <_vfiprintf_r+0x202>
 800c45e:	89ab      	ldrh	r3, [r5, #12]
 800c460:	059a      	lsls	r2, r3, #22
 800c462:	d402      	bmi.n	800c46a <_vfiprintf_r+0x202>
 800c464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c466:	f7fd fc6b 	bl	8009d40 <__retarget_lock_release_recursive>
 800c46a:	89ab      	ldrh	r3, [r5, #12]
 800c46c:	065b      	lsls	r3, r3, #25
 800c46e:	f53f af1d 	bmi.w	800c2ac <_vfiprintf_r+0x44>
 800c472:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c474:	e71c      	b.n	800c2b0 <_vfiprintf_r+0x48>
 800c476:	ab03      	add	r3, sp, #12
 800c478:	9300      	str	r3, [sp, #0]
 800c47a:	462a      	mov	r2, r5
 800c47c:	4b05      	ldr	r3, [pc, #20]	; (800c494 <_vfiprintf_r+0x22c>)
 800c47e:	a904      	add	r1, sp, #16
 800c480:	4630      	mov	r0, r6
 800c482:	f7fd f951 	bl	8009728 <_printf_i>
 800c486:	e7e4      	b.n	800c452 <_vfiprintf_r+0x1ea>
 800c488:	0800cba5 	.word	0x0800cba5
 800c48c:	0800cbaf 	.word	0x0800cbaf
 800c490:	080091e1 	.word	0x080091e1
 800c494:	0800c245 	.word	0x0800c245
 800c498:	0800cbab 	.word	0x0800cbab

0800c49c <__swbuf_r>:
 800c49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49e:	460e      	mov	r6, r1
 800c4a0:	4614      	mov	r4, r2
 800c4a2:	4605      	mov	r5, r0
 800c4a4:	b118      	cbz	r0, 800c4ae <__swbuf_r+0x12>
 800c4a6:	6a03      	ldr	r3, [r0, #32]
 800c4a8:	b90b      	cbnz	r3, 800c4ae <__swbuf_r+0x12>
 800c4aa:	f7fd faeb 	bl	8009a84 <__sinit>
 800c4ae:	69a3      	ldr	r3, [r4, #24]
 800c4b0:	60a3      	str	r3, [r4, #8]
 800c4b2:	89a3      	ldrh	r3, [r4, #12]
 800c4b4:	071a      	lsls	r2, r3, #28
 800c4b6:	d525      	bpl.n	800c504 <__swbuf_r+0x68>
 800c4b8:	6923      	ldr	r3, [r4, #16]
 800c4ba:	b31b      	cbz	r3, 800c504 <__swbuf_r+0x68>
 800c4bc:	6823      	ldr	r3, [r4, #0]
 800c4be:	6922      	ldr	r2, [r4, #16]
 800c4c0:	1a98      	subs	r0, r3, r2
 800c4c2:	6963      	ldr	r3, [r4, #20]
 800c4c4:	b2f6      	uxtb	r6, r6
 800c4c6:	4283      	cmp	r3, r0
 800c4c8:	4637      	mov	r7, r6
 800c4ca:	dc04      	bgt.n	800c4d6 <__swbuf_r+0x3a>
 800c4cc:	4621      	mov	r1, r4
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	f7ff fdca 	bl	800c068 <_fflush_r>
 800c4d4:	b9e0      	cbnz	r0, 800c510 <__swbuf_r+0x74>
 800c4d6:	68a3      	ldr	r3, [r4, #8]
 800c4d8:	3b01      	subs	r3, #1
 800c4da:	60a3      	str	r3, [r4, #8]
 800c4dc:	6823      	ldr	r3, [r4, #0]
 800c4de:	1c5a      	adds	r2, r3, #1
 800c4e0:	6022      	str	r2, [r4, #0]
 800c4e2:	701e      	strb	r6, [r3, #0]
 800c4e4:	6962      	ldr	r2, [r4, #20]
 800c4e6:	1c43      	adds	r3, r0, #1
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d004      	beq.n	800c4f6 <__swbuf_r+0x5a>
 800c4ec:	89a3      	ldrh	r3, [r4, #12]
 800c4ee:	07db      	lsls	r3, r3, #31
 800c4f0:	d506      	bpl.n	800c500 <__swbuf_r+0x64>
 800c4f2:	2e0a      	cmp	r6, #10
 800c4f4:	d104      	bne.n	800c500 <__swbuf_r+0x64>
 800c4f6:	4621      	mov	r1, r4
 800c4f8:	4628      	mov	r0, r5
 800c4fa:	f7ff fdb5 	bl	800c068 <_fflush_r>
 800c4fe:	b938      	cbnz	r0, 800c510 <__swbuf_r+0x74>
 800c500:	4638      	mov	r0, r7
 800c502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c504:	4621      	mov	r1, r4
 800c506:	4628      	mov	r0, r5
 800c508:	f000 f806 	bl	800c518 <__swsetup_r>
 800c50c:	2800      	cmp	r0, #0
 800c50e:	d0d5      	beq.n	800c4bc <__swbuf_r+0x20>
 800c510:	f04f 37ff 	mov.w	r7, #4294967295
 800c514:	e7f4      	b.n	800c500 <__swbuf_r+0x64>
	...

0800c518 <__swsetup_r>:
 800c518:	b538      	push	{r3, r4, r5, lr}
 800c51a:	4b2a      	ldr	r3, [pc, #168]	; (800c5c4 <__swsetup_r+0xac>)
 800c51c:	4605      	mov	r5, r0
 800c51e:	6818      	ldr	r0, [r3, #0]
 800c520:	460c      	mov	r4, r1
 800c522:	b118      	cbz	r0, 800c52c <__swsetup_r+0x14>
 800c524:	6a03      	ldr	r3, [r0, #32]
 800c526:	b90b      	cbnz	r3, 800c52c <__swsetup_r+0x14>
 800c528:	f7fd faac 	bl	8009a84 <__sinit>
 800c52c:	89a3      	ldrh	r3, [r4, #12]
 800c52e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c532:	0718      	lsls	r0, r3, #28
 800c534:	d422      	bmi.n	800c57c <__swsetup_r+0x64>
 800c536:	06d9      	lsls	r1, r3, #27
 800c538:	d407      	bmi.n	800c54a <__swsetup_r+0x32>
 800c53a:	2309      	movs	r3, #9
 800c53c:	602b      	str	r3, [r5, #0]
 800c53e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c542:	81a3      	strh	r3, [r4, #12]
 800c544:	f04f 30ff 	mov.w	r0, #4294967295
 800c548:	e034      	b.n	800c5b4 <__swsetup_r+0x9c>
 800c54a:	0758      	lsls	r0, r3, #29
 800c54c:	d512      	bpl.n	800c574 <__swsetup_r+0x5c>
 800c54e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c550:	b141      	cbz	r1, 800c564 <__swsetup_r+0x4c>
 800c552:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c556:	4299      	cmp	r1, r3
 800c558:	d002      	beq.n	800c560 <__swsetup_r+0x48>
 800c55a:	4628      	mov	r0, r5
 800c55c:	f7fe fa82 	bl	800aa64 <_free_r>
 800c560:	2300      	movs	r3, #0
 800c562:	6363      	str	r3, [r4, #52]	; 0x34
 800c564:	89a3      	ldrh	r3, [r4, #12]
 800c566:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c56a:	81a3      	strh	r3, [r4, #12]
 800c56c:	2300      	movs	r3, #0
 800c56e:	6063      	str	r3, [r4, #4]
 800c570:	6923      	ldr	r3, [r4, #16]
 800c572:	6023      	str	r3, [r4, #0]
 800c574:	89a3      	ldrh	r3, [r4, #12]
 800c576:	f043 0308 	orr.w	r3, r3, #8
 800c57a:	81a3      	strh	r3, [r4, #12]
 800c57c:	6923      	ldr	r3, [r4, #16]
 800c57e:	b94b      	cbnz	r3, 800c594 <__swsetup_r+0x7c>
 800c580:	89a3      	ldrh	r3, [r4, #12]
 800c582:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c58a:	d003      	beq.n	800c594 <__swsetup_r+0x7c>
 800c58c:	4621      	mov	r1, r4
 800c58e:	4628      	mov	r0, r5
 800c590:	f000 f884 	bl	800c69c <__smakebuf_r>
 800c594:	89a0      	ldrh	r0, [r4, #12]
 800c596:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c59a:	f010 0301 	ands.w	r3, r0, #1
 800c59e:	d00a      	beq.n	800c5b6 <__swsetup_r+0x9e>
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	60a3      	str	r3, [r4, #8]
 800c5a4:	6963      	ldr	r3, [r4, #20]
 800c5a6:	425b      	negs	r3, r3
 800c5a8:	61a3      	str	r3, [r4, #24]
 800c5aa:	6923      	ldr	r3, [r4, #16]
 800c5ac:	b943      	cbnz	r3, 800c5c0 <__swsetup_r+0xa8>
 800c5ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c5b2:	d1c4      	bne.n	800c53e <__swsetup_r+0x26>
 800c5b4:	bd38      	pop	{r3, r4, r5, pc}
 800c5b6:	0781      	lsls	r1, r0, #30
 800c5b8:	bf58      	it	pl
 800c5ba:	6963      	ldrpl	r3, [r4, #20]
 800c5bc:	60a3      	str	r3, [r4, #8]
 800c5be:	e7f4      	b.n	800c5aa <__swsetup_r+0x92>
 800c5c0:	2000      	movs	r0, #0
 800c5c2:	e7f7      	b.n	800c5b4 <__swsetup_r+0x9c>
 800c5c4:	200001e4 	.word	0x200001e4

0800c5c8 <_raise_r>:
 800c5c8:	291f      	cmp	r1, #31
 800c5ca:	b538      	push	{r3, r4, r5, lr}
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	460d      	mov	r5, r1
 800c5d0:	d904      	bls.n	800c5dc <_raise_r+0x14>
 800c5d2:	2316      	movs	r3, #22
 800c5d4:	6003      	str	r3, [r0, #0]
 800c5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5da:	bd38      	pop	{r3, r4, r5, pc}
 800c5dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c5de:	b112      	cbz	r2, 800c5e6 <_raise_r+0x1e>
 800c5e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5e4:	b94b      	cbnz	r3, 800c5fa <_raise_r+0x32>
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f000 f830 	bl	800c64c <_getpid_r>
 800c5ec:	462a      	mov	r2, r5
 800c5ee:	4601      	mov	r1, r0
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5f6:	f000 b817 	b.w	800c628 <_kill_r>
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d00a      	beq.n	800c614 <_raise_r+0x4c>
 800c5fe:	1c59      	adds	r1, r3, #1
 800c600:	d103      	bne.n	800c60a <_raise_r+0x42>
 800c602:	2316      	movs	r3, #22
 800c604:	6003      	str	r3, [r0, #0]
 800c606:	2001      	movs	r0, #1
 800c608:	e7e7      	b.n	800c5da <_raise_r+0x12>
 800c60a:	2400      	movs	r4, #0
 800c60c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c610:	4628      	mov	r0, r5
 800c612:	4798      	blx	r3
 800c614:	2000      	movs	r0, #0
 800c616:	e7e0      	b.n	800c5da <_raise_r+0x12>

0800c618 <raise>:
 800c618:	4b02      	ldr	r3, [pc, #8]	; (800c624 <raise+0xc>)
 800c61a:	4601      	mov	r1, r0
 800c61c:	6818      	ldr	r0, [r3, #0]
 800c61e:	f7ff bfd3 	b.w	800c5c8 <_raise_r>
 800c622:	bf00      	nop
 800c624:	200001e4 	.word	0x200001e4

0800c628 <_kill_r>:
 800c628:	b538      	push	{r3, r4, r5, lr}
 800c62a:	4d07      	ldr	r5, [pc, #28]	; (800c648 <_kill_r+0x20>)
 800c62c:	2300      	movs	r3, #0
 800c62e:	4604      	mov	r4, r0
 800c630:	4608      	mov	r0, r1
 800c632:	4611      	mov	r1, r2
 800c634:	602b      	str	r3, [r5, #0]
 800c636:	f7f6 fa3f 	bl	8002ab8 <_kill>
 800c63a:	1c43      	adds	r3, r0, #1
 800c63c:	d102      	bne.n	800c644 <_kill_r+0x1c>
 800c63e:	682b      	ldr	r3, [r5, #0]
 800c640:	b103      	cbz	r3, 800c644 <_kill_r+0x1c>
 800c642:	6023      	str	r3, [r4, #0]
 800c644:	bd38      	pop	{r3, r4, r5, pc}
 800c646:	bf00      	nop
 800c648:	20000ad0 	.word	0x20000ad0

0800c64c <_getpid_r>:
 800c64c:	f7f6 ba2c 	b.w	8002aa8 <_getpid>

0800c650 <__swhatbuf_r>:
 800c650:	b570      	push	{r4, r5, r6, lr}
 800c652:	460c      	mov	r4, r1
 800c654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c658:	2900      	cmp	r1, #0
 800c65a:	b096      	sub	sp, #88	; 0x58
 800c65c:	4615      	mov	r5, r2
 800c65e:	461e      	mov	r6, r3
 800c660:	da0d      	bge.n	800c67e <__swhatbuf_r+0x2e>
 800c662:	89a3      	ldrh	r3, [r4, #12]
 800c664:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c668:	f04f 0100 	mov.w	r1, #0
 800c66c:	bf0c      	ite	eq
 800c66e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c672:	2340      	movne	r3, #64	; 0x40
 800c674:	2000      	movs	r0, #0
 800c676:	6031      	str	r1, [r6, #0]
 800c678:	602b      	str	r3, [r5, #0]
 800c67a:	b016      	add	sp, #88	; 0x58
 800c67c:	bd70      	pop	{r4, r5, r6, pc}
 800c67e:	466a      	mov	r2, sp
 800c680:	f000 f848 	bl	800c714 <_fstat_r>
 800c684:	2800      	cmp	r0, #0
 800c686:	dbec      	blt.n	800c662 <__swhatbuf_r+0x12>
 800c688:	9901      	ldr	r1, [sp, #4]
 800c68a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c68e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c692:	4259      	negs	r1, r3
 800c694:	4159      	adcs	r1, r3
 800c696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c69a:	e7eb      	b.n	800c674 <__swhatbuf_r+0x24>

0800c69c <__smakebuf_r>:
 800c69c:	898b      	ldrh	r3, [r1, #12]
 800c69e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6a0:	079d      	lsls	r5, r3, #30
 800c6a2:	4606      	mov	r6, r0
 800c6a4:	460c      	mov	r4, r1
 800c6a6:	d507      	bpl.n	800c6b8 <__smakebuf_r+0x1c>
 800c6a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c6ac:	6023      	str	r3, [r4, #0]
 800c6ae:	6123      	str	r3, [r4, #16]
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	6163      	str	r3, [r4, #20]
 800c6b4:	b002      	add	sp, #8
 800c6b6:	bd70      	pop	{r4, r5, r6, pc}
 800c6b8:	ab01      	add	r3, sp, #4
 800c6ba:	466a      	mov	r2, sp
 800c6bc:	f7ff ffc8 	bl	800c650 <__swhatbuf_r>
 800c6c0:	9900      	ldr	r1, [sp, #0]
 800c6c2:	4605      	mov	r5, r0
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	f7fe fd99 	bl	800b1fc <_malloc_r>
 800c6ca:	b948      	cbnz	r0, 800c6e0 <__smakebuf_r+0x44>
 800c6cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6d0:	059a      	lsls	r2, r3, #22
 800c6d2:	d4ef      	bmi.n	800c6b4 <__smakebuf_r+0x18>
 800c6d4:	f023 0303 	bic.w	r3, r3, #3
 800c6d8:	f043 0302 	orr.w	r3, r3, #2
 800c6dc:	81a3      	strh	r3, [r4, #12]
 800c6de:	e7e3      	b.n	800c6a8 <__smakebuf_r+0xc>
 800c6e0:	89a3      	ldrh	r3, [r4, #12]
 800c6e2:	6020      	str	r0, [r4, #0]
 800c6e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6e8:	81a3      	strh	r3, [r4, #12]
 800c6ea:	9b00      	ldr	r3, [sp, #0]
 800c6ec:	6163      	str	r3, [r4, #20]
 800c6ee:	9b01      	ldr	r3, [sp, #4]
 800c6f0:	6120      	str	r0, [r4, #16]
 800c6f2:	b15b      	cbz	r3, 800c70c <__smakebuf_r+0x70>
 800c6f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6f8:	4630      	mov	r0, r6
 800c6fa:	f000 f81d 	bl	800c738 <_isatty_r>
 800c6fe:	b128      	cbz	r0, 800c70c <__smakebuf_r+0x70>
 800c700:	89a3      	ldrh	r3, [r4, #12]
 800c702:	f023 0303 	bic.w	r3, r3, #3
 800c706:	f043 0301 	orr.w	r3, r3, #1
 800c70a:	81a3      	strh	r3, [r4, #12]
 800c70c:	89a3      	ldrh	r3, [r4, #12]
 800c70e:	431d      	orrs	r5, r3
 800c710:	81a5      	strh	r5, [r4, #12]
 800c712:	e7cf      	b.n	800c6b4 <__smakebuf_r+0x18>

0800c714 <_fstat_r>:
 800c714:	b538      	push	{r3, r4, r5, lr}
 800c716:	4d07      	ldr	r5, [pc, #28]	; (800c734 <_fstat_r+0x20>)
 800c718:	2300      	movs	r3, #0
 800c71a:	4604      	mov	r4, r0
 800c71c:	4608      	mov	r0, r1
 800c71e:	4611      	mov	r1, r2
 800c720:	602b      	str	r3, [r5, #0]
 800c722:	f7f6 fa28 	bl	8002b76 <_fstat>
 800c726:	1c43      	adds	r3, r0, #1
 800c728:	d102      	bne.n	800c730 <_fstat_r+0x1c>
 800c72a:	682b      	ldr	r3, [r5, #0]
 800c72c:	b103      	cbz	r3, 800c730 <_fstat_r+0x1c>
 800c72e:	6023      	str	r3, [r4, #0]
 800c730:	bd38      	pop	{r3, r4, r5, pc}
 800c732:	bf00      	nop
 800c734:	20000ad0 	.word	0x20000ad0

0800c738 <_isatty_r>:
 800c738:	b538      	push	{r3, r4, r5, lr}
 800c73a:	4d06      	ldr	r5, [pc, #24]	; (800c754 <_isatty_r+0x1c>)
 800c73c:	2300      	movs	r3, #0
 800c73e:	4604      	mov	r4, r0
 800c740:	4608      	mov	r0, r1
 800c742:	602b      	str	r3, [r5, #0]
 800c744:	f7f6 fa27 	bl	8002b96 <_isatty>
 800c748:	1c43      	adds	r3, r0, #1
 800c74a:	d102      	bne.n	800c752 <_isatty_r+0x1a>
 800c74c:	682b      	ldr	r3, [r5, #0]
 800c74e:	b103      	cbz	r3, 800c752 <_isatty_r+0x1a>
 800c750:	6023      	str	r3, [r4, #0]
 800c752:	bd38      	pop	{r3, r4, r5, pc}
 800c754:	20000ad0 	.word	0x20000ad0

0800c758 <_init>:
 800c758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75a:	bf00      	nop
 800c75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c75e:	bc08      	pop	{r3}
 800c760:	469e      	mov	lr, r3
 800c762:	4770      	bx	lr

0800c764 <_fini>:
 800c764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c766:	bf00      	nop
 800c768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c76a:	bc08      	pop	{r3}
 800c76c:	469e      	mov	lr, r3
 800c76e:	4770      	bx	lr
